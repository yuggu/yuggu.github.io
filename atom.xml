<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2019-09-25T12:52:30.249Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HDU - 1575] Tr A</title>
    <link href="https://yuggu.github.io/2019/09/25/HDU-1575-Tr-A/"/>
    <id>https://yuggu.github.io/2019/09/25/HDU-1575-Tr-A/</id>
    <published>2019-09-25T11:15:50.000Z</published>
    <updated>2019-09-25T12:52:30.249Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://vjudge.net/problem/SPOJ-NGCD" target="_blank" rel="noopener"><span class="math inline">\(\text{SPOJ - NO GCD}\)</span></a></p><h3 id="题意">题意</h3><p>  A是一个方阵，<span class="math inline">\(Tr\space A\)</span>表示<span class="math inline">\(A\)</span>的迹(即是主对角线上的和)，现在要求<span class="math inline">\(Tr(A^k)\%9973\)</span></p><p>  输入格式：第一行为<span class="math inline">\(t\)</span>，共<span class="math inline">\(t\)</span>组测试样例，每组数据的一行两个数字<span class="math inline">\(n,k\)</span>，接下来<span class="math inline">\(n\)</span>行<span class="math inline">\(n\)</span>列，表示方阵<span class="math inline">\(A\)</span></p><p>  输出格式：每组测试样例一行输出，输出<span class="math inline">\(Tr(A^k)\%9973\)</span></p><p>  数据范围：<span class="math inline">\(2\leq n\leq 10,2\leq k\leq 10^9\)</span> <a id="more"></a></p><h3 id="分析">分析</h3><p>  这是一个矩阵快速幂的模板题；</p><p>  对于<span class="math inline">\(\text{Successione di Fibonacci}\)</span>，有：</p><ul><li><span class="math inline">\(f_{0}=0\)</span></li><li><span class="math inline">\(f_{1}=1\)</span></li><li><span class="math inline">\(f_{n}=f_{n-1}+f_{n-2}（n≧2）\)</span></li></ul><p>  如果需要我们求出<span class="math inline">\(f_{1e9}\%(1e9+7)\)</span>的结果，那么我们直接利用递推公式进行求解，显然是不可行的。</p><p>  定义<span class="math inline">\(F(n)=\begin{bmatrix} f_{n} &amp; f_{n+1} \end{bmatrix}\)</span>，且<span class="math inline">\(f_0=0,f_1=1,f_{n}=f_{n-1}+f_{n-2}（n≧2）\)</span>，我们有：</p><p><span class="math display">\[  F(n)=\begin{bmatrix} f_{n} &amp; f_{n+1}\end{bmatrix} = \begin{bmatrix} f_{n-1} &amp; f_{n}\end{bmatrix}* \begin{bmatrix}0&amp;1\\ 1 &amp; 1\end{bmatrix}=\vdots=\begin{bmatrix} f_{0} &amp; f_{1}\end{bmatrix}*\begin{bmatrix}0&amp;1\\ 1 &amp; 1\end{bmatrix}^{n}\]</span></p><p>  令<span class="math inline">\(A=\begin{bmatrix}0&amp;1\\ 1 &amp; 1\end{bmatrix}\)</span>，则有<span class="math inline">\(F(n)=F(0)*A^{n}\)</span>，实际上我们只要考虑求解<span class="math inline">\(A^n\)</span>即可，如果这里的<span class="math inline">\(A\)</span>是一个整数，那么我们直接快速幂即可，但是这里是一个矩阵。</p><p>  这里有涉及到广义快速幂的概念；</p><p>  <span class="math inline">\((G,*)\)</span>是一个群（<span class="math inline">\(1.*\)</span>在<span class="math inline">\(G\)</span>上的运算是封闭的；<span class="math inline">\(2.\)</span>满足交换律；<span class="math inline">\(3.\)</span>对<span class="math inline">\(G\)</span>中的任意元素含有唯一的单位元；<span class="math inline">\(4.\)</span>除零元外均有逆元），<span class="math inline">\(*\)</span>是一种二元运算（<strong>泛指</strong>），<span class="math inline">\(e\)</span>为<span class="math inline">\(*\)</span>在<span class="math inline">\(G\)</span>上的单位元，<span class="math inline">\(a\in G\)</span>，<span class="math inline">\(e*a=a*e=a\)</span>，<span class="math inline">\((a^{-1})^{-1}=a\)</span>，规定<span class="math inline">\(a^{0}=1,a^{-n}=(a^{n})^{-1}\)</span>，可以证明<span class="math inline">\(a^{m}\cdot a^{n}=a^{m+n}\)</span>，<span class="math inline">\((a^{m})^{n}=a^{mn}\)</span>，那么关于它的快速幂可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typename</span> <span class="title">pow</span><span class="params">(<span class="keyword">typename</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//ans初始化为单位元</span></span><br><span class="line"><span class="keyword">typename</span> ans = e;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ans = ans * a;</span><br><span class="line">a = a * a;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于上面的<span class="math inline">\(A^n\)</span>，那么<span class="math inline">\((G,*)\)</span>是一个群，<span class="math inline">\(*\)</span>为矩阵乘法，<span class="math inline">\(G\)</span>元素为<span class="math inline">\(e、A、A^{2}、A^{3}\dots A^{\infty}\)</span>，并且<span class="math inline">\(A\)</span>是一个方阵，那么广义快速幂对于它来说也是成立的，注意<span class="math inline">\(A\)</span>的单位元是单位矩阵。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 9973</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    ll M[maxn][maxn];</span><br><span class="line">    Matrix(<span class="keyword">const</span> <span class="keyword">int</span> I = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(M, <span class="number">0</span>, <span class="keyword">sizeof</span>(M));</span><br><span class="line">        <span class="keyword">if</span> (I)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                M[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp; a) &#123;</span><br><span class="line">        Matrix t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                    t.M[i][j] = (t.M[i][j] + M[i][k] * a.M[k][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">c</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = c * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        Matrix a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a.M[i][j];</span><br><span class="line">        Matrix ans = <span class="built_in">pow</span>(a, k);</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            res = (res + ans.M[i][i]) % MOD;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/SPOJ-NGCD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{SPOJ - NO GCD}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  A是一个方阵，&lt;span class=&quot;math inline&quot;&gt;\(Tr\space A\)&lt;/span&gt;表示&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;的迹(即是主对角线上的和)，现在要求&lt;span class=&quot;math inline&quot;&gt;\(Tr(A^k)\%9973\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  输入格式：第一行为&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;，共&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;组测试样例，每组数据的一行两个数字&lt;span class=&quot;math inline&quot;&gt;\(n,k\)&lt;/span&gt;，接下来&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;行&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;列，表示方阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  输出格式：每组测试样例一行输出，输出&lt;span class=&quot;math inline&quot;&gt;\(Tr(A^k)\%9973\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(2\leq n\leq 10,2\leq k\leq 10^9\)&lt;/span&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="https://yuggu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="广义快速幂" scheme="https://yuggu.github.io/tags/%E5%B9%BF%E4%B9%89%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="矩阵快速幂" scheme="https://yuggu.github.io/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>[SPOJ NO GCD]</title>
    <link href="https://yuggu.github.io/2019/09/25/SPOJ-NO-GCD/"/>
    <id>https://yuggu.github.io/2019/09/25/SPOJ-NO-GCD/</id>
    <published>2019-09-25T09:24:45.000Z</published>
    <updated>2019-09-25T12:50:07.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://vjudge.net/problem/SPOJ-NGCD" target="_blank" rel="noopener"><span class="math inline">\(\text{SPOJ - NO GCD}\)</span></a></p><h3 id="题意">题意</h3><p>  给你一个长度为<span class="math inline">\(n\)</span>的序列<span class="math inline">\(a\)</span>，并且对于任意一个数<span class="math inline">\(a[i]\)</span>，它只有小于<span class="math inline">\(50\)</span>的素因子，且不含有平方因子，求有多少对<span class="math inline">\((i,j)\)</span>，使得<span class="math inline">\(a[i]和a[j]\)</span>互质，或者<span class="math inline">\(gcd\)</span>是质数。</p><p>  输入格式：第一行输入<span class="math inline">\(t\)</span>，包含<span class="math inline">\(t\)</span>组样例，下面每组样例第一行一个<span class="math inline">\(n\)</span>，下面一行输入一个长度为<span class="math inline">\(n\)</span>的序列<span class="math inline">\(a\)</span>。</p><p>  数据范围：<span class="math inline">\(1\leq t\leq 10,1\leq 100000\)</span>.</p><p>  输出格式：每个样例对应一行一个输出结果。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  这一题是偶然在别人博客看到的，几乎没怎么写过数学题，感到这个思路非常非常的巧妙。</p><p>  首先考虑到了<span class="math inline">\(50\)</span>以内的素数仅有<span class="math inline">\(15\)</span>个，而对于<span class="math inline">\(a\)</span>序列中的任意两个数来说，它们的<span class="math inline">\(gcd\)</span>要么为<span class="math inline">\(1\)</span>，要么在这<span class="math inline">\(15\)</span>个素数之中，要么为<span class="math inline">\(1\)</span>，如果用二进制表示，那么则有它们二进制表示的与的结果为<span class="math inline">\(0\)</span>，或者某一位为<span class="math inline">\(1\)</span>(恰好有一个素因子)。对于一个二进制表示<span class="math inline">\(i\)</span>来说，我们需要求出它的个数与，它补集的子集个数的乘积，这即是求出了<span class="math inline">\(gcd\)</span>为<span class="math inline">\(1\)</span>的情况，对于不为<span class="math inline">\(1\)</span>的情况，我们求出它与，它的补集对某一位<span class="math inline">\(0\)</span>取反变成<span class="math inline">\(1\)</span>的所有子集个数在减去它补集没去反之间子集的个数，这二者乘积，对所有的状态进行累加。</p><p>  关键是如何快速求子集个数，对于<span class="math inline">\(i\)</span>，求所有的<span class="math inline">\(j\)</span>，<span class="math inline">\(j\leq i \&amp;\&amp;(i|j)==i\)</span>。网上代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i;;j=(j<span class="number">-1</span>)&amp;i)&#123;   </span><br><span class="line"><span class="comment">//s[i]为i的子集的个数，子集j对应的个数为num[j]     </span></span><br><span class="line">        s[i]+=num[j]; <span class="comment">//关键，得到子集 </span></span><br><span class="line">        <span class="keyword">if</span>(!j) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, a[M], b[M], p[<span class="number">16</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>&#125;;</span><br><span class="line">                                <span class="comment">//2,3,5,7,11,13,17,19,23,29,31,37,41,43,47</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (x % p[j] == <span class="number">0</span>) temp += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            <span class="comment">//x为1时，temp为0</span></span><br><span class="line">            a[temp]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            <span class="comment">//枚举j二进制表示下的子集</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i;;j = (j - <span class="number">1</span>)&amp; i) &#123;</span><br><span class="line">                b[i] += a[j];</span><br><span class="line">                <span class="comment">//写在这里，是考虑特殊情况，比如输入的x为1</span></span><br><span class="line">                <span class="keyword">if</span> (!j) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="comment">//gcd为1</span></span><br><span class="line">            ans += <span class="number">1l</span>l * a[i] * b[i ^ (M - <span class="number">1</span>)];</span><br><span class="line">            <span class="comment">//gcd为一个素数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">                    ans += <span class="number">1l</span>l * a[i] * (b[i ^ (M - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; j)] - b[i ^ (M - <span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/SPOJ-NGCD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{SPOJ - NO GCD}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你一个长度为&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;的序列&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;，并且对于任意一个数&lt;span class=&quot;math inline&quot;&gt;\(a[i]\)&lt;/span&gt;，它只有小于&lt;span class=&quot;math inline&quot;&gt;\(50\)&lt;/span&gt;的素因子，且不含有平方因子，求有多少对&lt;span class=&quot;math inline&quot;&gt;\((i,j)\)&lt;/span&gt;，使得&lt;span class=&quot;math inline&quot;&gt;\(a[i]和a[j]\)&lt;/span&gt;互质，或者&lt;span class=&quot;math inline&quot;&gt;\(gcd\)&lt;/span&gt;是质数。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行输入&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;，包含&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;组样例，下面每组样例第一行一个&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，下面一行输入一个长度为&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;的序列&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq t\leq 10,1\leq 100000\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：每个样例对应一行一个输出结果。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="数学" scheme="https://yuggu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>[HC - 1044] 状态压缩一</title>
    <link href="https://yuggu.github.io/2019/09/22/HC-1044-%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E4%B8%80/"/>
    <id>https://yuggu.github.io/2019/09/22/HC-1044-状态压缩一/</id>
    <published>2019-09-22T07:01:35.000Z</published>
    <updated>2019-09-22T07:02:43.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://hihocoder.com/problemset/problem/1044" target="_blank" rel="noopener"><span class="math inline">\(\text{hihoCoder - 1044 状态压缩一}\)</span></a></p><h3 id="题意">题意</h3><p>  火车上有<span class="math inline">\(n\)</span>个座位排成一排，第<span class="math inline">\(i\)</span>个座位上有数目<span class="math inline">\(w[i]\)</span>的垃圾，你需要尽可能多的清扫这些垃圾，然而在连续<span class="math inline">\(m\)</span>个座位上，你最多只能选取<span class="math inline">\(q\)</span>个位置进行清扫，不然会让乘客不愉快，现在问你最多可以清扫多少数目的垃圾；</p><p>  输入格式：输入包含一组样例，第一行三个数<span class="math inline">\(n,m,q\)</span>，第二行<span class="math inline">\(n\)</span>个整数，第<span class="math inline">\(i\)</span>个为<span class="math inline">\(w[i]\)</span>;</p><p>  数据范围：<span class="math inline">\(N\leq 1000,2\leq M\leq 10,1\leq q\leq m,w[i]\leq 100\)</span>.</p><p>  输出格式：输出一行代表最多可以清扫的垃圾数目； <a id="more"></a></p><h3 id="分析">分析</h3><p>  如果我们考虑每个位置的选与不选，那么最多可能有<span class="math inline">\(2^1000\)</span>种状态，显然这种想法不现实，我们发现，如果当前位置<span class="math inline">\(i\)</span>的前<span class="math inline">\(m-1\)</span>个位置中已经选了<span class="math inline">\(q\)</span>个了(即在<span class="math inline">\([i-m+1,i-1]\)</span>中选<span class="math inline">\(q\)</span>个)，这种状态为<span class="math inline">\(j\)</span>，那么显然当前位置一定不能选，所以当前位置的最大值等于，在第<span class="math inline">\(i-1\)</span>个位置，<span class="math inline">\([i-m+1,i-1]\)</span>中选了<span class="math inline">\(q\)</span>个，而第<span class="math inline">\(i-m\)</span>这个位置一定不选(对于<span class="math inline">\(i-1\)</span>来说，需要在<span class="math inline">\([i-m,i-1]\)</span>中选<span class="math inline">\(q\)</span>个)，这时候的最大值，同理当第<span class="math inline">\(i\)</span>个位置选的时候，考虑它的状态可以从<span class="math inline">\(i-1\)</span>的什么状态转移过来即可。</p><p>  第<span class="math inline">\(i\)</span>个座位为阶段，<span class="math inline">\(i\)</span>之前包括<span class="math inline">\(i\)</span>个<span class="math inline">\(m\)</span>个选若干个为状态。</p><p>  首先预处理一下，<span class="math inline">\(m\)</span>个连续座位里选小于<span class="math inline">\(q\)</span>个座位的状态，具体细节见代码。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, w[<span class="number">1005</span>], f[<span class="number">1005</span>][<span class="number">1</span> &lt;&lt; <span class="number">12</span>], mark[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) cnt++;</span><br><span class="line">        mark[i] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123; </span><br><span class="line">            <span class="keyword">if</span> (mark[j] &lt;= q) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &amp; <span class="number">1</span>)  f[i][j] = max(f[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], f[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; (m - <span class="number">1</span>))]) + w[i];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mark[j] == q) f[i][j] = f[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (mark[j] &lt; q)</span><br><span class="line">                        f[i][j] = max(f[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], f[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; (m - <span class="number">1</span>))]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">        <span class="keyword">if</span> (mark[i] &lt;= q) ans = max(f[n][i], ans);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hihocoder.com/problemset/problem/1044&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{hihoCoder - 1044 状态压缩一}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  火车上有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个座位排成一排，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个座位上有数目&lt;span class=&quot;math inline&quot;&gt;\(w[i]\)&lt;/span&gt;的垃圾，你需要尽可能多的清扫这些垃圾，然而在连续&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个座位上，你最多只能选取&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;个位置进行清扫，不然会让乘客不愉快，现在问你最多可以清扫多少数目的垃圾；&lt;/p&gt;
&lt;p&gt;  输入格式：输入包含一组样例，第一行三个数&lt;span class=&quot;math inline&quot;&gt;\(n,m,q\)&lt;/span&gt;，第二行&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个整数，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个为&lt;span class=&quot;math inline&quot;&gt;\(w[i]\)&lt;/span&gt;;&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(N\leq 1000,2\leq M\leq 10,1\leq q\leq m,w[i]\leq 100\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行代表最多可以清扫的垃圾数目；
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 2411] Mondriaan&#39;s Dream</title>
    <link href="https://yuggu.github.io/2019/09/22/POJ-2411-Mondriaan-s-Dream/"/>
    <id>https://yuggu.github.io/2019/09/22/POJ-2411-Mondriaan-s-Dream/</id>
    <published>2019-09-22T06:17:51.000Z</published>
    <updated>2019-09-22T07:02:44.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://poj.org/problem?id=2411" target="_blank" rel="noopener"><span class="math inline">\(\text{POJ - 2411 Mondriaan&#39;s Dream}\)</span></a></p><h3 id="题意">题意</h3><p>  求把<span class="math inline">\(N\ast M\)</span>的棋盘分割成若干个<span class="math inline">\(1\ast 2\)</span>的长方形，有多少种方案。如<span class="math inline">\(N=2，M=4\)</span>，有<span class="math inline">\(5\)</span>种方案，<span class="math inline">\(N=2，M=3\)</span>有<span class="math inline">\(3\)</span>种方案： <img src="/images/poj2411_2.png" width="500px"></p><p>  输入格式：输入包含多组样例，每行一个样例，每个样例一行两个数<span class="math inline">\(N,M\)</span>.</p><p>  数据范围：<span class="math inline">\(1\leq N,M\leq 11\)</span>.</p><p>  输出格式：每个样例输出一行代表方案数。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  总共<span class="math inline">\(N\)</span>行<span class="math inline">\(M\)</span>列，考虑将每一列的长方形的摆放当作状态，第<span class="math inline">\(i\)</span>行即是第<span class="math inline">\(i\)</span>阶段；</p><p>  将长方形的状态定义为如下：</p><p><img src="/images/poj2411_1.png" width="400px"></p><p>  使用一个<span class="math inline">\(M\)</span>位二进制数，若第<span class="math inline">\(j(0\leq j&lt;M)\)</span>位为<span class="math inline">\(1\)</span>，则表示这个位置是一个竖着的长方形的上半部，为0则是其他情况，<span class="math inline">\(f[i][j]\)</span>表示第<span class="math inline">\(i\)</span>行的状态为<span class="math inline">\(j\)</span>时，前<span class="math inline">\(i\)</span>行分割方案的总数，当第<span class="math inline">\(i\)</span>的状态<span class="math inline">\(j\)</span>能向第<span class="math inline">\(i+1\)</span>行状态<span class="math inline">\(k\)</span>转移时，必有<span class="math inline">\((j\&amp;k)==0\)</span>，且<span class="math inline">\(j|k\)</span>的结果中每一段连续的<span class="math inline">\(0\)</span>都必须有偶数个</p><p>   我们可以从<span class="math inline">\([0,(1&lt;&lt;M)-1]\)</span>中预处理出并记录，二进制表示下连续的<span class="math inline">\(0\)</span>有偶数个的所有状态，记录在<span class="math inline">\(S\)</span>集合中。</p><p><span class="math display">\[f[i][j]=\sum_{j\&amp;k=0\space and\space j|k\in S} f[i-1][k]\]</span></p><p>  初始值<span class="math inline">\(f[0][0]=1\)</span>，其余为0，目标为<span class="math inline">\(f[N][0]\)</span>，复杂度为<span class="math inline">\(O(4^MN)\)</span>.</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h, w;</span><br><span class="line">ll f[<span class="number">12</span>][<span class="number">1</span> &lt;&lt; <span class="number">12</span>], sta[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;h, &amp;w) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!h || !w) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(sta, <span class="number">0</span>, <span class="keyword">sizeof</span>(sta));</span><br><span class="line">        <span class="comment">//预处理二进制表示下每一段连续的0都有偶数个的状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; w; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> odd = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) odd |= cnt, cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> cnt ^= <span class="number">1</span>;</span><br><span class="line">            sta[i] = odd | cnt ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; w; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; w; k++)</span><br><span class="line">                    <span class="keyword">if</span> (sta[j | k] &amp;&amp; (j &amp; k) == <span class="number">0</span>)</span><br><span class="line">                        f[i][k] += f[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f[h][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2411&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{POJ - 2411 Mondriaan&amp;#39;s Dream}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  求把&lt;span class=&quot;math inline&quot;&gt;\(N\ast M\)&lt;/span&gt;的棋盘分割成若干个&lt;span class=&quot;math inline&quot;&gt;\(1\ast 2\)&lt;/span&gt;的长方形，有多少种方案。如&lt;span class=&quot;math inline&quot;&gt;\(N=2，M=4\)&lt;/span&gt;，有&lt;span class=&quot;math inline&quot;&gt;\(5\)&lt;/span&gt;种方案，&lt;span class=&quot;math inline&quot;&gt;\(N=2，M=3\)&lt;/span&gt;有&lt;span class=&quot;math inline&quot;&gt;\(3\)&lt;/span&gt;种方案： &lt;img src=&quot;/images/poj2411_2.png&quot; width=&quot;500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;  输入格式：输入包含多组样例，每行一个样例，每个样例一行两个数&lt;span class=&quot;math inline&quot;&gt;\(N,M\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq N,M\leq 11\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：每个样例输出一行代表方案数。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>[Shortest Hamilton path]</title>
    <link href="https://yuggu.github.io/2019/09/22/Shortest-Hamilton-path/"/>
    <id>https://yuggu.github.io/2019/09/22/Shortest-Hamilton-path/</id>
    <published>2019-09-22T05:25:38.000Z</published>
    <updated>2019-09-22T06:25:18.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://www.acwing.com/problem/content/93/" target="_blank" rel="noopener"><span class="math inline">\(\text{最短Hamilton路径}\)</span></a></p><h3 id="题意">题意</h3><p>  给定一张<span class="math inline">\(n\)</span>个点的带权无向图，点从<span class="math inline">\(0\)</span>到<span class="math inline">\(n-1\)</span>标号，求起点<span class="math inline">\(0\)</span>到终点<span class="math inline">\(n-1\)</span>的最短<span class="math inline">\(\text{Hamilton}\)</span>路径。 <span class="math inline">\(\text{Hamilton}\)</span>路径的定义是从<span class="math inline">\(0\)</span>到<span class="math inline">\(n-1\)</span>不重不漏地经过每个点恰好一次。</p><p>  输入格式：第一行一个整数<span class="math inline">\(n\)</span>，接下来一个<span class="math inline">\(n\times n\)</span>的矩阵<span class="math inline">\(a[i,j]\)</span>，代表图中点与点之间的关系;</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 20,0\leq a[i,j]\leq 10^7\)</span>.</p><p>  输出格式：输出一个整数，表示最短<span class="math inline">\(\text{Hamilton}\)</span>路径的长度。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  首先很容易想到一种方法，枚举<span class="math inline">\(n\)</span>个点的排列，然后计算最小值，那么复杂度是<span class="math inline">\(O(n\ast n!)\)</span>，然而<span class="math inline">\(20!\)</span>大约是<span class="math inline">\(2e18\)</span>，显然不可行；之后不知什么人想出来一种比较巧妙的方法。</p><p>  考虑使用二进制表示状态，从一个点转移到另一个点，两个点之间的状态转移的差距，体现在二进制上仅仅是一位不同；</p><p>  使用一个<span class="math inline">\(n\)</span>位二进制数，若第<span class="math inline">\(i(0\leq i&lt; n)\)</span>位为<span class="math inline">\(1\)</span>，则表示第<span class="math inline">\(i\)</span>个点已经被访问过了，反之未被访问过，在任意时刻还需要知道当前所在的位置，所以使用<span class="math inline">\(f[i,j](0\leq i&lt;2^n,0\leq j&lt;n)\)</span>表示点被经过的状态对应的二进制数为<span class="math inline">\(i\)</span>，且目前处于点<span class="math inline">\(j\)</span>时的最短路径。</p><p>  在起点<span class="math inline">\(0\)</span>时，有<span class="math inline">\(f[1][0]=0\)</span>(<span class="math inline">\(0\)</span>点的状态是<span class="math inline">\(1\)</span>)，其他设为<span class="math inline">\(\infty\)</span>，目标是<span class="math inline">\(f[(1&lt;&lt; n)-1][n-1]\)</span>，即经过所有点(<span class="math inline">\(i\)</span>的所有位都为<span class="math inline">\(1\)</span>)，并且最终位于<span class="math inline">\(n-1\)</span>位置，动态转移方程为： <span class="math display">\[f[i][j]=\min{f[i\space xor(1 &lt;&lt; j)][k]+weight[k][j]}\]</span>   枚举当前的位置和当前位置的前一个位置，复杂度为<span class="math inline">\(O(n^2 \ast 2^n)\)</span>.</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, f[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>) - <span class="number">1</span>][<span class="number">25</span>], e[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, INF, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                e[i][j] = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) </span><br><span class="line">                        <span class="keyword">if</span> (i &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">                            f[i][j] = min(f[i][j], f[i ^ <span class="number">1</span> &lt;&lt; j][k] + e[j][k]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/93/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{最短Hamilton路径}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给定一张&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个点的带权无向图，点从&lt;span class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;标号，求起点&lt;span class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt;到终点&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;的最短&lt;span class=&quot;math inline&quot;&gt;\(\text{Hamilton}\)&lt;/span&gt;路径。 &lt;span class=&quot;math inline&quot;&gt;\(\text{Hamilton}\)&lt;/span&gt;路径的定义是从&lt;span class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;不重不漏地经过每个点恰好一次。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行一个整数&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，接下来一个&lt;span class=&quot;math inline&quot;&gt;\(n\times n\)&lt;/span&gt;的矩阵&lt;span class=&quot;math inline&quot;&gt;\(a[i,j]\)&lt;/span&gt;，代表图中点与点之间的关系;&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 20,0\leq a[i,j]\leq 10^7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一个整数，表示最短&lt;span class=&quot;math inline&quot;&gt;\(\text{Hamilton}\)&lt;/span&gt;路径的长度。
    
    </summary>
    
      <category term="算法 - dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95-dp/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95-dp/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>Network Fundamentals</title>
    <link href="https://yuggu.github.io/2019/09/21/Network-Fundamentals/"/>
    <id>https://yuggu.github.io/2019/09/21/Network-Fundamentals/</id>
    <published>2019-09-21T10:23:42.000Z</published>
    <updated>2019-09-22T05:31:23.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主机与服务器">主机与服务器</h3><p>  <strong>网络主机</strong>（<strong>network host</strong>）是已连接到一个<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" title="计算机网络" target="_blank" rel="noopener">计算机网络</a>的一台<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F" title="电子计算机" target="_blank" rel="noopener">电子计算机</a>或其他设备。网络主机可以向网络上的用户或其他<a href="https://zh.wikipedia.org/wiki/%E8%8A%82%E7%82%B9_(%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C)" title="节点 (电信网络)" target="_blank" rel="noopener">节点</a>提供信息资源、服务和应用。一台网络主机是已被分配一个<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%B1%82" title="网络层" target="_blank" rel="noopener">网络层</a><a href="https://zh.wikipedia.org/w/index.php?title=%E4%B8%BB%E6%9C%BA%E5%9C%B0%E5%9D%80&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">主机地址</a>的网络节点。</p><p>  所有服务器都是主机，但并非所有主机都是服务器，任何与网络建立连接的设备都可以作为主机，而已接受其他设备连接为目的的主机被视作服务器。 <a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主机与服务器&quot;&gt;主机与服务器&lt;/h3&gt;
&lt;p&gt;  &lt;strong&gt;网络主机&lt;/strong&gt;（&lt;strong&gt;network host&lt;/strong&gt;）是已连接到一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&quot; title=&quot;计算机网络&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;计算机网络&lt;/a&gt;的一台&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F&quot; title=&quot;电子计算机&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;电子计算机&lt;/a&gt;或其他设备。网络主机可以向网络上的用户或其他&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%8A%82%E7%82%B9_(%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C)&quot; title=&quot;节点 (电信网络)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;节点&lt;/a&gt;提供信息资源、服务和应用。一台网络主机是已被分配一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%B1%82&quot; title=&quot;网络层&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络层&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E4%B8%BB%E6%9C%BA%E5%9C%B0%E5%9D%80&amp;amp;action=edit&amp;amp;redlink=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主机地址&lt;/a&gt;的网络节点。&lt;/p&gt;
&lt;p&gt;  所有服务器都是主机，但并非所有主机都是服务器，任何与网络建立连接的设备都可以作为主机，而已接受其他设备连接为目的的主机被视作服务器。
    
    </summary>
    
      <category term="Networks" scheme="https://yuggu.github.io/categories/Networks/"/>
    
      <category term="Fundmentals" scheme="https://yuggu.github.io/categories/Networks/Fundmentals/"/>
    
    
      <category term="network" scheme="https://yuggu.github.io/tags/network/"/>
    
      <category term="主机" scheme="https://yuggu.github.io/tags/%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>hexo背景图片及透明度修改</title>
    <link href="https://yuggu.github.io/2019/09/15/hexo%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E5%8F%8A%E9%80%8F%E6%98%8E%E5%BA%A6%E4%BF%AE%E6%94%B9/"/>
    <id>https://yuggu.github.io/2019/09/15/hexo背景图片及透明度修改/</id>
    <published>2019-09-15T13:20:13.000Z</published>
    <updated>2019-09-15T13:27:11.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo添加背景图片及修改透明度">hexo添加背景图片及修改透明度</h3><p>  首先将背景图片放入<code>hexo\next\source\images</code>文件夹下，之后修改<code>hexo\themes\next\source\css\_custom\custom.styl</code>文件，在程序中加入下面的代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这里是加载背景图片，以及设置一些图片加载的问题*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="comment">/*url括号里的图片如果不是本地的，就直接写url*/</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(/images/background.jpg)</span><br><span class="line">background-repeat: no-repeat;  </span><br><span class="line"><span class="attribute">background-attachment</span>:fixed;  </span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;  </span><br><span class="line"><span class="attribute">background-size</span>: cover;  </span><br><span class="line"><span class="attribute">-webkit-background-size</span>: cover;  </span><br><span class="line"><span class="attribute">-o-background-size</span>: cover;  </span><br><span class="line"><span class="attribute">-moz-background-size</span>: cover;  </span><br><span class="line"><span class="attribute">-ms-background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里的opacity参数是修改透明度的，值越小，透明度越大*/</span></span><br><span class="line"><span class="selector-class">.header-inner</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">   // margin-top: 60px;</span><br><span class="line">   // padding: 60px 60px 60px 60px;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">opacity</span>: 0<span class="selector-class">.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo添加背景图片及修改透明度&quot;&gt;hexo添加背景图片及修改透明度&lt;/h3&gt;
&lt;p&gt;  首先将背景图片放入&lt;code&gt;hexo\next\source\images&lt;/code&gt;文件夹下，之后修改&lt;code&gt;hexo\themes\next\source\css\_custom\custom.styl&lt;/code&gt;文件，在程序中加入下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*这里是加载背景图片，以及设置一些图片加载的问题*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*url括号里的图片如果不是本地的，就直接写url*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(/images/background.jpg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-repeat: no-repeat;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background-attachment&lt;/span&gt;:fixed;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-background-size&lt;/span&gt;: cover;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-o-background-size&lt;/span&gt;: cover;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-moz-background-size&lt;/span&gt;: cover;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-ms-background-size&lt;/span&gt;: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*这里的opacity参数是修改透明度的，值越小，透明度越大*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.header-inner&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.main-inner&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // margin-top: 60px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // padding: 60px 60px 60px 60px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;opacity&lt;/span&gt;: 0&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="https://yuggu.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="其他" scheme="https://yuggu.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="hexo" scheme="https://yuggu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 1155] TELE</title>
    <link href="https://yuggu.github.io/2019/09/13/POJ-1155-TELE/"/>
    <id>https://yuggu.github.io/2019/09/13/POJ-1155-TELE/</id>
    <published>2019-09-13T05:01:41.000Z</published>
    <updated>2019-09-22T07:04:13.911Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://poj.org/problem?id=1155" target="_blank" rel="noopener"><span class="math inline">\(\text{POJ - 1155 TELE}\)</span></a></p><h3 id="题意">题意</h3><p>  这里有<span class="math inline">\(m\)</span>个用户想要使用电视，然而它们需要电视网络信号进行传播信号，整个电视网络由信号发射器和用户组成，它的形状是一棵树，用户是叶子结点，现在给出了连接发射器与发射器或用户之间的信号所需要花费的金钱，<span class="math inline">\(m\)</span>个用户每个用户使用电视都会支付一些金钱，问可以观看电视的用户的数量最大是多少，以致电视网络的搭建不会亏损金钱；整颗树共<span class="math inline">\(n\)</span>个节点，</p><p>  输入格式：第一行两个整数<span class="math inline">\(n,m\)</span>，表示树中结点个数和叶子结点个数，树根一定是1，其他发射器编号从2到<span class="math inline">\(n-m\)</span>，用户即叶子结点编号从<span class="math inline">\(n-m+1\)</span>到<span class="math inline">\(n\)</span>，接下来<span class="math inline">\(n-m\)</span>行，第<span class="math inline">\(i\)</span>行<code>K A1 C1...AK CK</code>，表示与<span class="math inline">\(i\)</span>个发射器相连接的结点有<span class="math inline">\(k\)</span>个，对应编号是<span class="math inline">\(a_j\)</span>，连接<span class="math inline">\(i\)</span>与<span class="math inline">\(a_j\)</span>需要花费的费用是<span class="math inline">\(c_j\)</span>，最后一行<span class="math inline">\(m\)</span>个整数，表示<span class="math inline">\(m\)</span>个用户使用电视会支付的金钱。</p><p>  数据范围：<span class="math inline">\(2\leq n\leq 3000,1\leq m\leq n-1\)</span>.</p><p>  输出格式：输出一行，表示电视网络搭建不亏损情况下，最多可以使用电视的用户的数量。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  对于某一棵子树，假设我们考虑他的亏损情况，如果它是亏损的我们就切掉它，那么这种想法显然是不正确的，如果他有兄弟结点，并且兄弟结点不亏损，那么它们的父亲的那颗子树，显然是未知的；</p><p>  我们换一种思路，考虑求出当前子树的最大收入，<span class="math inline">\(f[i][j]\)</span>表示在以<span class="math inline">\(i\)</span>为根节点的子树中选取<span class="math inline">\(j\)</span>个用户即<span class="math inline">\(j\)</span>个叶子节点的最大收入，之后我们求出了节点1的所有状态，那么我们它的状态，从<span class="math inline">\(m\)</span>到1，找到第一个满足<span class="math inline">\(f[1][j]\)</span>的<span class="math inline">\(j\)</span>即可，输出它。</p><p>  关于中间的细节，如果搜索到了叶子结点<span class="math inline">\(x\)</span>我们就记录<span class="math inline">\(f[x][1]=c[x]\)</span>，同时使用<span class="math inline">\(sz[i]\)</span>记录以<span class="math inline">\(i\)</span>为根的子树中包含的用户数量，在以<span class="math inline">\(i\)</span>为根的子树中进行背包，<span class="math inline">\(sz[i]\)</span>即为背包容量，在叶子结点<span class="math inline">\(x\)</span>显然有<span class="math inline">\(sz[x]=1\)</span>，对于<span class="math inline">\(f\)</span>初始化成<span class="math inline">\(-\infty\)</span>，每当我们搜索进入一个新节点<span class="math inline">\(x\)</span>我们就初始化<span class="math inline">\(f[x][0]=0\)</span>，回溯的时候进行背包即可。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 3005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, a[MAXN][MAXN], c[MAXN], f[MAXN][MAXN], sz[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[u]) &#123;</span><br><span class="line">        sz[u] = <span class="number">1</span>;</span><br><span class="line">        f[u][<span class="number">1</span>] = c[u];</span><br><span class="line">        <span class="comment">//cout &lt;&lt; c[u] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>; </span><br><span class="line">        dfs(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = sz[u]; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line">                f[u][j] = max(f[u][j], f[u][j - k] + f[v][k] - a[u][v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">memset</span>(f, -INF, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> v, w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            vec[i].push_back(v);</span><br><span class="line">            vec[v].push_back(i);</span><br><span class="line">            a[i][v] = a[v][i] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">1</span>][i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1155&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{POJ - 1155 TELE}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  这里有&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个用户想要使用电视，然而它们需要电视网络信号进行传播信号，整个电视网络由信号发射器和用户组成，它的形状是一棵树，用户是叶子结点，现在给出了连接发射器与发射器或用户之间的信号所需要花费的金钱，&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个用户每个用户使用电视都会支付一些金钱，问可以观看电视的用户的数量最大是多少，以致电视网络的搭建不会亏损金钱；整颗树共&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个节点，&lt;/p&gt;
&lt;p&gt;  输入格式：第一行两个整数&lt;span class=&quot;math inline&quot;&gt;\(n,m\)&lt;/span&gt;，表示树中结点个数和叶子结点个数，树根一定是1，其他发射器编号从2到&lt;span class=&quot;math inline&quot;&gt;\(n-m\)&lt;/span&gt;，用户即叶子结点编号从&lt;span class=&quot;math inline&quot;&gt;\(n-m+1\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，接下来&lt;span class=&quot;math inline&quot;&gt;\(n-m\)&lt;/span&gt;行，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;行&lt;code&gt;K A1 C1...AK CK&lt;/code&gt;，表示与&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个发射器相连接的结点有&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;个，对应编号是&lt;span class=&quot;math inline&quot;&gt;\(a_j\)&lt;/span&gt;，连接&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;与&lt;span class=&quot;math inline&quot;&gt;\(a_j\)&lt;/span&gt;需要花费的费用是&lt;span class=&quot;math inline&quot;&gt;\(c_j\)&lt;/span&gt;，最后一行&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个整数，表示&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个用户使用电视会支付的金钱。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(2\leq n\leq 3000,1\leq m\leq n-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行，表示电视网络搭建不亏损情况下，最多可以使用电视的用户的数量。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形背包" scheme="https://yuggu.github.io/tags/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[UVA-1292-Strategic] game</title>
    <link href="https://yuggu.github.io/2019/09/12/UVA-1292-Strategic-game/"/>
    <id>https://yuggu.github.io/2019/09/12/UVA-1292-Strategic-game/</id>
    <published>2019-09-12T13:37:08.000Z</published>
    <updated>2019-09-20T11:07:10.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4038" target="_blank" rel="noopener"><span class="math inline">\(\text{UVA - 1292 Strategic game}\)</span></a></p><h3 id="题意">题意</h3><p>  <span class="math inline">\(\text{Bob}\)</span>在玩一款策略游戏，它需要保卫一个城市，很多道路将城市连起来，整体看起来像一棵树，<span class="math inline">\(\text{Bob}\)</span>希望放置尽可能少的士兵到一些城市，包围连接这个城市的道路，士兵只能放在城市上即树的节点上，他可以保护与这个节点相邻的边。</p><p>  输入格式：多组测试样例，每个测试样例的第一行一个整数<span class="math inline">\(n\)</span>，表示城市个数，之后<span class="math inline">\(n\)</span>行每行输入一个城市的信息<code>x:(number) a1,a2...</code>，表示与<span class="math inline">\(x\)</span>城市直接连接的城市有<span class="math inline">\(number\)</span>个，分别为<span class="math inline">\(a_1,a_2,...,a_{number}\)</span></p><p>  数据范围：<span class="math inline">\(0\leq n\leq 1500\)</span>.</p><p>  输出格式：输出一行，表示所需要放置的士兵的最小数量。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  这是一个比较简单的树形<span class="math inline">\(dp\)</span>。</p><p>  对于一棵树的<span class="math inline">\(x\)</span>节点来说，如果它不放士兵的话，那么它的每一个子节点<span class="math inline">\(y_i\)</span>都需要放士兵，如果它放士兵的话，那么它的任意一个子节点<span class="math inline">\(y_i\)</span>，可能放士兵也可以不妨士兵。所以我们就得到了动态转移方程： <span class="math display">\[\begin{cases}f[u][1]+=\min(f[v][0],f[v][1])\\f[u][0]+=f[v][1] \end{cases}v\in Son(u)\]</span></p><p>  <span class="math inline">\(f[i][1]\)</span>表示在以<span class="math inline">\(i\)</span>为根的子树中，如果<span class="math inline">\(i\)</span>节点放士兵，所需要放置的最小士兵数量，<span class="math inline">\(f[i][0]\)</span>表示在以<span class="math inline">\(i\)</span>为根的子树中，如果<span class="math inline">\(i\)</span>节点不放士兵，所需要放置的最小士兵数量；并且开始的时候，<span class="math inline">\(f[i][1]=1,f[i][0]=0\)</span>.</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt, n, vis[MAXN], f[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> a, b, c;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        f[u][<span class="number">1</span>] += min(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">0</span>] += f[v][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            vec[i].clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%c%c%d%c"</span>, &amp;u, &amp;a, &amp;b, &amp;cnt, &amp;c);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; u &lt;&lt; " " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">                <span class="comment">//cout &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line">                vec[u].push_back(v);</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                root = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; "\t" &lt;&lt; 1 &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4038&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{UVA - 1292 Strategic game}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  &lt;span class=&quot;math inline&quot;&gt;\(\text{Bob}\)&lt;/span&gt;在玩一款策略游戏，它需要保卫一个城市，很多道路将城市连起来，整体看起来像一棵树，&lt;span class=&quot;math inline&quot;&gt;\(\text{Bob}\)&lt;/span&gt;希望放置尽可能少的士兵到一些城市，包围连接这个城市的道路，士兵只能放在城市上即树的节点上，他可以保护与这个节点相邻的边。&lt;/p&gt;
&lt;p&gt;  输入格式：多组测试样例，每个测试样例的第一行一个整数&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，表示城市个数，之后&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;行每行输入一个城市的信息&lt;code&gt;x:(number) a1,a2...&lt;/code&gt;，表示与&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;城市直接连接的城市有&lt;span class=&quot;math inline&quot;&gt;\(number\)&lt;/span&gt;个，分别为&lt;span class=&quot;math inline&quot;&gt;\(a_1,a_2,...,a_{number}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(0\leq n\leq 1500\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行，表示所需要放置的士兵的最小数量。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu-P1122] 最大子树和</title>
    <link href="https://yuggu.github.io/2019/09/12/Luogu-P1122-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%A0%91%E5%92%8C/"/>
    <id>https://yuggu.github.io/2019/09/12/Luogu-P1122-最大子树和/</id>
    <published>2019-09-12T12:06:19.000Z</published>
    <updated>2019-09-20T11:27:27.115Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链接">链接</h4><p><a href="https://www.luogu.org/problem/P1122" target="_blank" rel="noopener"><span class="math inline">\(\text{Luogu - P1122 最大子树和}\)</span></a></p><h4 id="题意">题意</h4><p>  这里有一株花卉，上面共<span class="math inline">\(n\)</span>朵花，共<span class="math inline">\(n-1\)</span>条枝干将花儿连在一起，每朵花都有一个美丽指数，数越大说明花越漂亮，也有美丽指数为负的，现在你需要取修剪这株花卉，修剪意味：去掉其中一条枝条，这样就得到了两株，然后丢掉其中一株，继续修剪；最后还剩下一株花，现在你需要修剪最初的花卉，使得最终剩下的一株花卉上所有花朵的美丽指数之和最大。</p><p>  输入格式：第一行一个整数<span class="math inline">\(n\)</span>，<span class="math inline">\(n\)</span>表示初始花卉上花朵的数量，第二行<span class="math inline">\(n\)</span>个整数，其中第<span class="math inline">\(i\)</span>个表示第<span class="math inline">\(i\)</span>朵花的美丽指数，接下来<span class="math inline">\(n-1\)</span>行，每行两个整数<span class="math inline">\(a、b\)</span>，表示存在一条连接第<span class="math inline">\(a\)</span>朵花和第<span class="math inline">\(b\)</span>朵花的枝条。</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 16000\)</span>.</p><p>  输出格式：输出一行，修剪后得到的美丽指数之和的最大值，保证绝对值不超过2147483647. <a id="more"></a></p><h4 id="分析">分析</h4><p>  开始，我们需要考虑作为树形<span class="math inline">\(dp\)</span>的树根是谁。</p><p>  后来发现不需要考虑这个问题</p><p><img src="https://img-blog.csdnimg.cn/20190912194718103.png" width="300"></p><p>  对于如图的一棵树，我们最后得到的结果是方框中的部分，左下角的2和右下角的3以及右上角的3都被切掉了。那么我们可以考虑在<span class="math inline">\(dp\)</span>的过程中进行切的操作。</p><p>  使用<span class="math inline">\(f[i]\)</span>，表示在以<span class="math inline">\(i\)</span>为根的子树中进行修剪的操作能获得花卉所有花朵美丽指数之和的最大值，其中保留根<span class="math inline">\(i\)</span>，那么显然，无论以谁为根进行修剪，在修剪过程中，总有以某个结点为子树根能获得最大的美丽指数之和，当我们搜索到一个节点<span class="math inline">\(x\)</span>，我们遍历它的子树<span class="math inline">\(y_i\)</span>，我们已经获得了他的子树的所有结果，那么我们显然可以考虑把<span class="math inline">\(y_i\)</span>的子树部分的答案，切掉或者不切掉，如果它的子树的答案是负的，那么我们显然是不能选它的，只有为正时才选它。所以有： <span class="math display">\[f[u]+=\max(0,f[v])\space v\in Son(u)\]</span></p><h4 id="代码">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, va[MAXN], sz[MAXN];</span><br><span class="line">ll res, f[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[u] = va[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        f[u] += max(<span class="number">1l</span>l * <span class="number">0</span>, f[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    res = max(res, f[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;va[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        vec[a].push_back(b);</span><br><span class="line">        vec[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;链接&quot;&gt;链接&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P1122&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{Luogu - P1122 最大子树和}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题意&quot;&gt;题意&lt;/h4&gt;
&lt;p&gt;  这里有一株花卉，上面共&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;朵花，共&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;条枝干将花儿连在一起，每朵花都有一个美丽指数，数越大说明花越漂亮，也有美丽指数为负的，现在你需要取修剪这株花卉，修剪意味：去掉其中一条枝条，这样就得到了两株，然后丢掉其中一株，继续修剪；最后还剩下一株花，现在你需要修剪最初的花卉，使得最终剩下的一株花卉上所有花朵的美丽指数之和最大。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行一个整数&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;表示初始花卉上花朵的数量，第二行&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个整数，其中第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个表示第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;朵花的美丽指数，接下来&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;行，每行两个整数&lt;span class=&quot;math inline&quot;&gt;\(a、b\)&lt;/span&gt;，表示存在一条连接第&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;朵花和第&lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;朵花的枝条。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 16000\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行，修剪后得到的美丽指数之和的最大值，保证绝对值不超过2147483647.
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu-P2015] 二叉苹果树</title>
    <link href="https://yuggu.github.io/2019/09/12/Luogu-P2015-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/"/>
    <id>https://yuggu.github.io/2019/09/12/Luogu-P2015-二叉苹果树/</id>
    <published>2019-09-12T05:10:51.000Z</published>
    <updated>2019-09-14T11:24:06.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://www.luogu.org/problem/P2015" target="_blank" rel="noopener"><span class="math inline">\(\text{Luogu-P2015 二叉苹果树}\)</span></a></p><h3 id="题意">题意</h3><p>  有一棵苹果树，若树枝分叉，则一定分2叉，即没有只有一个子节点的节点，这棵树共<span class="math inline">\(n\)</span>个节点，编号为1-<span class="math inline">\(n\)</span>，树根为1。我们用一根树枝两端连接的节点的编号表示一根树枝的位置，下面是一个有四个树枝的树； <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2   5</span><br><span class="line"> \ / </span><br><span class="line">  3   4</span><br><span class="line">   \ /</span><br><span class="line">    1</span><br></pre></td></tr></table></figure></p><p>  现在它的枝条太多了，需要剪枝，但是每个树枝上都长有一些苹果，给定需要保留的树枝数量，求最多能留住多少苹果。</p><p>  输入格式：第一行两个整数<span class="math inline">\(n,q\)</span>，<span class="math inline">\(n\)</span>表示树的节点数，<span class="math inline">\(q\)</span>表示需要保留的树枝数量，接下来<span class="math inline">\(n-1\)</span>行描述树枝的信息，每行三个数，前两个是它连接的结点，第三个是这跟树枝上苹果的数量，每根树枝上的苹果不超过30000个。</p><p>  数据范围：<span class="math inline">\(1\leq q\leq n,1&lt; n\leq 100\)</span>.</p><p>  输出格式：输出一行，最多能留住的苹果的个数。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  这是一个树形背包的经典入门题。</p><p>  设<span class="math inline">\(dp[x][t]\)</span>表示在以<span class="math inline">\(x\)</span>为根的子树中选取<span class="math inline">\(t\)</span>个树枝，能获得的最多的苹果，<span class="math inline">\(x\)</span>有两个子节点，如果沿一个子节点<span class="math inline">\(a\)</span>中选了<span class="math inline">\(k\)</span>个树枝(<span class="math inline">\(k\)</span>个包括<span class="math inline">\(x\)</span>与<span class="math inline">\(a\)</span>之间的这个树枝)，那么另沿着一个子节点<span class="math inline">\(b\)</span>则一定选了<span class="math inline">\(t-k-1\)</span>个树枝(不包括<span class="math inline">\(b\)</span>与<span class="math inline">\(x\)</span>之间的这个树枝)，则动态转移方程为： <span class="math display">\[f[u][i]=\max_{0\leq j \leq i}(f[u][i],f[u][i−j−1]+f[v][j]+a[u][v])\]</span></p><p>  细节见程序。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, f[<span class="number">105</span>][<span class="number">105</span>], a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = q; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++)&#123;</span><br><span class="line">                f[u][j] = max(f[u][j], f[u][j - k - <span class="number">1</span>] + f[v][k] + a[u][v]);</span><br><span class="line">                <span class="comment">//cout &lt;&lt; u &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; f[u][j] &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        vec[u].push_back(v);</span><br><span class="line">        vec[v].push_back(u);</span><br><span class="line">        a[u][v] += w;</span><br><span class="line">        a[v][u] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; i &lt;&lt; " " &lt;&lt; f[i][1] &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[<span class="number">1</span>][q] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2015&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{Luogu-P2015 二叉苹果树}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  有一棵苹果树，若树枝分叉，则一定分2叉，即没有只有一个子节点的节点，这棵树共&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个节点，编号为1-&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，树根为1。我们用一根树枝两端连接的节点的编号表示一根树枝的位置，下面是一个有四个树枝的树； &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2   5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; \ / &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  3   4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   \ /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  现在它的枝条太多了，需要剪枝，但是每个树枝上都长有一些苹果，给定需要保留的树枝数量，求最多能留住多少苹果。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行两个整数&lt;span class=&quot;math inline&quot;&gt;\(n,q\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;表示树的节点数，&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;表示需要保留的树枝数量，接下来&lt;span class=&quot;math inline&quot;&gt;\(n-1\)&lt;/span&gt;行描述树枝的信息，每行三个数，前两个是它连接的结点，第三个是这跟树枝上苹果的数量，每根树枝上的苹果不超过30000个。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq q\leq n,1&amp;lt; n\leq 100\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行，最多能留住的苹果的个数。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形背包" scheme="https://yuggu.github.io/tags/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu-P2014] 选课</title>
    <link href="https://yuggu.github.io/2019/09/12/Luogu-P2014-%E9%80%89%E8%AF%BE/"/>
    <id>https://yuggu.github.io/2019/09/12/Luogu-P2014-选课/</id>
    <published>2019-09-12T03:57:27.000Z</published>
    <updated>2019-09-14T11:24:17.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://www.luogu.org/problem/P2014" target="_blank" rel="noopener"><span class="math inline">\(\text{Luogu-P2014 选课}\)</span></a></p><h3 id="题意">题意</h3><p>  这里有<span class="math inline">\(n\)</span>个课程，你需要从它们中选出一些来学习，然而有些课程必须在某些课程之前学习，如高等数学总是在其他课程之前学习。每门课程有个学分，对于一门课必须先修它的先修课才能再修它，你需要从这些课程里选择m门课程学习，问它能获得的最大学分。</p><p>  输入格式：第一行两个整数<span class="math inline">\(n,m\)</span>用空格隔开，接下来<span class="math inline">\(n\)</span>行，第<span class="math inline">\(i+1\)</span>包含两个整数<span class="math inline">\(k\)</span>和<span class="math inline">\(s\)</span>，<span class="math inline">\(k\)</span>表示第<span class="math inline">\(i\)</span>门课的直接先修课，<span class="math inline">\(s\)</span>表示第<span class="math inline">\(i\)</span>门课的学分，<span class="math inline">\(k=0\)</span>表示没有直接先修课。</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 300,1\leq m\leq 300,1\leq k\leq n,1\leq s\leq 20\)</span>.</p><p>  输出格式：输出一行，选<span class="math inline">\(m\)</span>门课的最大得分。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  这是一个树形背包的经典入门题。</p><p>  没门课的先修课最多只有一个，所以课与课之前的先修关系构成了一棵树。我们构造一个虚拟节点0，对于那些没有先修课的课程，规定先修课为0，并且选0的学分为0，那么问题就转化成了，从这个以0为根节点的树中，选<span class="math inline">\(m+1\)</span>门课。</p><p>  设<span class="math inline">\(dp[x][t]\)</span>表示在以<span class="math inline">\(x\)</span>为根的子树中选取<span class="math inline">\(t\)</span>门课，能获得的最大学分，对于<span class="math inline">\(x\)</span>的每个子节点<span class="math inline">\(y_i\)</span>，我们可以在以<span class="math inline">\(y_i\)</span>为根的子树中选修若干门课<span class="math inline">\(c_i\)</span>，在满足<span class="math inline">\(\sum c_i=t-1\)</span>的基础上获得尽量多的学分。</p><p>  这即是一个分组背包，物品组数为<span class="math inline">\(x\)</span>子节点<span class="math inline">\(y_i\)</span>的个数，每组物品共<span class="math inline">\(t-1\)</span>个，背包体积为<span class="math inline">\(t-1\)</span>，第<span class="math inline">\(i\)</span>组第<span class="math inline">\(j\)</span>个物品体积为<span class="math inline">\(j\)</span>。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, f[<span class="number">305</span>][<span class="number">305</span>], s[<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec[<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = s[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++)</span><br><span class="line">                f[u][j] = max(f[u][j], f[u][j - k] + f[v][k]);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; s[i];</span><br><span class="line">        vec[k].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[<span class="number">0</span>][m + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{Luogu-P2014 选课}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  这里有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个课程，你需要从它们中选出一些来学习，然而有些课程必须在某些课程之前学习，如高等数学总是在其他课程之前学习。每门课程有个学分，对于一门课必须先修它的先修课才能再修它，你需要从这些课程里选择m门课程学习，问它能获得的最大学分。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行两个整数&lt;span class=&quot;math inline&quot;&gt;\(n,m\)&lt;/span&gt;用空格隔开，接下来&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;行，第&lt;span class=&quot;math inline&quot;&gt;\(i+1\)&lt;/span&gt;包含两个整数&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;表示第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;门课的直接先修课，&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;表示第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;门课的学分，&lt;span class=&quot;math inline&quot;&gt;\(k=0\)&lt;/span&gt;表示没有直接先修课。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 300,1\leq m\leq 300,1\leq k\leq n,1\leq s\leq 20\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行，选&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;门课的最大得分。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="树形dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形背包" scheme="https://yuggu.github.io/tags/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[2019银川网络赛-L] Continuous Intervals</title>
    <link href="https://yuggu.github.io/2019/09/10/2019%E9%93%B6%E5%B7%9D%E7%BD%91%E7%BB%9C%E8%B5%9B-L-Continuous-Intervals/"/>
    <id>https://yuggu.github.io/2019/09/10/2019银川网络赛-L-Continuous-Intervals/</id>
    <published>2019-09-10T13:00:39.000Z</published>
    <updated>2019-09-14T11:29:05.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41384" target="_blank" rel="noopener"><span class="math inline">\(\text{2019银川网络赛-L.Continuous Intervals}\)</span></a></p><h3 id="题意">题意</h3><p>  给定一个长度为<span class="math inline">\(n\)</span>的正整数序列<span class="math inline">\(a\)</span>，对于一个<span class="math inline">\([l,r]\)</span>区间内排序后，区间内任意相邻两数的差的绝对值都小于1，这样的区间有多少个。</p><p>  输入格式：第一行一个<span class="math inline">\(t\)</span>，表示<span class="math inline">\(t\)</span>个样例，之后每个样例的第一行输入一个数<span class="math inline">\(n\)</span>，第二行<span class="math inline">\(n\)</span>个数表示序列<span class="math inline">\(a\)</span>。</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 10^6,1\leq a_i\leq 10^9\)</span>.</p><p>  输出格式：对于每个查询操作，输出一行一个结果<code>Case #x: y</code>，表示第<span class="math inline">\(x\)</span>个样例的结果是<span class="math inline">\(y\)</span>。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  排序后的区间任意相邻两数的差小于等于1，<span class="math inline">\(max、min\)</span>为区间最大值、最小值，<span class="math inline">\(cnt\)</span>为区间数的种类，那么显然的，任意一个区间都有<span class="math inline">\(max-min-cnt\geq -1\)</span>，而对于此题来说即是要求满足<span class="math inline">\(max-min-cnt= -1\)</span>的区间的个数，我们可以枚举<span class="math inline">\(r\)</span>，求满足条件的<span class="math inline">\(l\)</span>的个数。</p><p>  我们可以用线段树动态的维护<span class="math inline">\(max-min-cnt\)</span>的最小值，以及这个最小值的个数；</p><p>  当枚举<span class="math inline">\(r\)</span>的过程中，我们需要考虑当前这个数<span class="math inline">\(a[x]\)</span>，对于<span class="math inline">\(max、min、cnt\)</span>产生的影响，即当<span class="math inline">\(a[x]\)</span>作为区间最大值，作为区间最小值所影响到的区间，以及<span class="math inline">\(a[x]\)</span>上一次出现到<span class="math inline">\(x\)</span>位置的区间内对<span class="math inline">\(cnt\)</span>的影响。</p><p>  使用两个单调栈能够求出<span class="math inline">\(a[x]\)</span>作为区间最大值，作为区间最小值所影响到的区间，在这个区间内进行修改<span class="math inline">\(max-min-cnt\)</span>，加上<span class="math inline">\(a[x]\)</span>带来的影响</p><p>  <a href="https://blog.csdn.net/Cassie_zkq/article/details/100388082" target="_blank" rel="noopener">https://blog.csdn.net/Cassie_zkq/article/details/100388082</a>这篇博客讲的比较清楚。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="comment">//#define MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b ? a % b + b : a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin),</span></span><br><span class="line">    <span class="comment">// p1 == p2) ? EOF : *p1++) char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">                f = <span class="number">-1</span>;</span><br><span class="line">            c = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace fastIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment_Tree &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r, minm, lazy, sum;</span><br><span class="line">    &#125; tree[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lmin = tree[x &lt;&lt; <span class="number">1</span>].minm, rmin = tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minm;</span><br><span class="line">        <span class="keyword">int</span> lsum = tree[x &lt;&lt; <span class="number">1</span>].sum, rsum = tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">        tree[x].minm = <span class="built_in">std</span>::min(lmin, rmin);</span><br><span class="line">        <span class="keyword">if</span> (lmin == rmin)</span><br><span class="line">            tree[x].sum = lsum + rsum;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lmin &lt; rmin)</span><br><span class="line">            tree[x].sum = lsum;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tree[x].sum = rsum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lz = tree[x].lazy;</span><br><span class="line">        tree[x &lt;&lt; <span class="number">1</span>].lazy += lz, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += lz;</span><br><span class="line">        tree[x &lt;&lt; <span class="number">1</span>].minm += lz, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minm += lz;</span><br><span class="line">        tree[x].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        tree[x].l = l, tree[x].r = r;</span><br><span class="line">        tree[x].minm = <span class="number">0</span>, tree[x].lazy = <span class="number">0</span>, tree[x].sum = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l1 = tree[x].l, r1 = tree[x].r;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= l1 &amp;&amp; r1 &lt;= r) &#123;</span><br><span class="line">            tree[x].minm += val;</span><br><span class="line">            tree[x].lazy += val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l1 + r1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        push_down(x);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            update(x &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">            update(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">        push_up(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*inline int query(int x, int l, int r) &#123;</span></span><br><span class="line"><span class="comment">        int le = tree[x].l, ri = tree[x].r;</span></span><br><span class="line"><span class="comment">        if (l &lt;= le &amp;&amp; ri &lt;= r) &#123;</span></span><br><span class="line"><span class="comment">            return tree[x].max;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        int mid  = (le + ri) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">        int maxm = 0;</span></span><br><span class="line"><span class="comment">        if (l &lt;= mid)</span></span><br><span class="line"><span class="comment">            maxm = max(maxm, query(x &lt;&lt; 1, l, r));</span></span><br><span class="line"><span class="comment">        if (r &gt; mid)</span></span><br><span class="line"><span class="comment">            maxm = max(maxm, query(x &lt;&lt; 1 | 1, l, r));</span></span><br><span class="line"><span class="comment">        return maxm;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;  <span class="comment">// namespace segment_Tree</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> st1[<span class="number">100005</span>], st2[<span class="number">100005</span>], t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        t1 = <span class="number">0</span>, t2 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pos;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span> (t1 &amp;&amp; a[i] &gt; a[st1[t1]]) &#123;</span><br><span class="line">                update(<span class="number">1</span>, st1[t1 - <span class="number">1</span>] + <span class="number">1</span>, st1[t1], a[i] - a[st1[t1]]);</span><br><span class="line">                t1--;</span><br><span class="line">            &#125;</span><br><span class="line">            st1[++t1] = i;</span><br><span class="line">            <span class="keyword">while</span> (t2 &amp;&amp; a[i] &lt; a[st2[t2]]) &#123;</span><br><span class="line">                update(<span class="number">1</span>, st2[t2 - <span class="number">1</span>] + <span class="number">1</span>, st2[t2], a[st2[t2]] - a[i]);</span><br><span class="line">                t2--;</span><br><span class="line">            &#125;</span><br><span class="line">            st2[++t2] = i;</span><br><span class="line">            update(<span class="number">1</span>, pos[a[i]] + <span class="number">1</span>, i, <span class="number">-1</span>);</span><br><span class="line">            pos[a[i]] = i;</span><br><span class="line">            ans += <span class="number">1l</span>l * tree[<span class="number">1</span>].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, cnt, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019银川网络赛-L.Continuous Intervals}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给定一个长度为&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;的正整数序列&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;，对于一个&lt;span class=&quot;math inline&quot;&gt;\([l,r]\)&lt;/span&gt;区间内排序后，区间内任意相邻两数的差的绝对值都小于1，这样的区间有多少个。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行一个&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;，表示&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;个样例，之后每个样例的第一行输入一个数&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，第二行&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个数表示序列&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 10^6,1\leq a_i\leq 10^9\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：对于每个查询操作，输出一行一个结果&lt;code&gt;Case #x: y&lt;/code&gt;，表示第&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;个样例的结果是&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="线段树" scheme="https://yuggu.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="单调栈" scheme="https://yuggu.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>[2019徐州网络赛-F] so easy</title>
    <link href="https://yuggu.github.io/2019/09/09/2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-F-so-easy/"/>
    <id>https://yuggu.github.io/2019/09/09/2019徐州网络赛-F-so-easy/</id>
    <published>2019-09-09T14:48:48.000Z</published>
    <updated>2019-09-14T11:29:02.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41384" target="_blank" rel="noopener"><span class="math inline">\(\text{2019徐州网络赛-B.so easy}\)</span></a></p><h3 id="题意">题意</h3><p>  现在，从下标1开始每个位置有一个点，需要你进行<span class="math inline">\(q\)</span>次操作，共两种，1. <span class="math inline">\((1,x)\)</span>为删除<span class="math inline">\(x\)</span>位置的点，2. <span class="math inline">\((2,x)\)</span>为查询<span class="math inline">\(x\)</span>的后面(包括<span class="math inline">\(x\)</span>位置)的第一个点的位置。</p><p>  输入格式：第一行输入两个数<span class="math inline">\(n\)</span>和<span class="math inline">\(q\)</span>，之后<span class="math inline">\(q\)</span>行每行一个操作。</p><p>  数据范围：<span class="math inline">\(1\leq x&lt; n&lt;10^9,1\leq q&lt;10^6\)</span></p><p>  输出格式：对于每个查询操作，输出一行一个结果。 <a id="more"></a></p><h3 id="分析">分析</h3><p>  这一题感觉出的不太好，对点离散后线段树或者树状数组都会<span class="math inline">\(\text{T}\)</span>，</p><p>  这题的标答是用并查集做的，初始化数<span class="math inline">\(x\)</span>查询的答案就是<span class="math inline">\(x\)</span>，删除<span class="math inline">\(x\)</span>之后答案就是<span class="math inline">\(find(x+1)\)</span>，使用<span class="math inline">\(unordered\_map\)</span>。</p><p>  这题我是这样做的；开始的时候删除数<span class="math inline">\(x\)</span>，那么使用两个<span class="math inline">\(unordered\_map，l和r\)</span>记录<span class="math inline">\(x\)</span>所在连续的被删除序列的左右端点，第一个删除的数<span class="math inline">\(x\)</span>有<span class="math inline">\(l[x]=x,r[x]=x\)</span>；</p><p>  考虑其他三种不特殊情况，在一个连续的被删除序列的右侧或者左侧，以及在两个连续的被删除序列的中间删除<span class="math inline">\(x\)</span>，那么我们分别讨论这三种情况，来更新<span class="math inline">\(x、x-1、x+1\)</span>以及最左端点（通过<span class="math inline">\(l[x-1]\)</span>获得）和最右端点（通过<span class="math inline">\(r[x+1]\)</span>获得）的<span class="math inline">\(l\)</span>和<span class="math inline">\(r\)</span>，虽然中间有些点没有更新到，但是当查询某个点的时候，我们可以记忆化搜索，或者，我们每次删除后都进行一次路径压缩，查询<span class="math inline">\(x\)</span>的时候可以<span class="math inline">\(O(1)\)</span>查询<span class="math inline">\(x\)</span>所在连续的被删除序列的最右边的那个已经被删除的点，那么这个点的右边一个点一定是没有被删除的。</p><p>  这题不能用<span class="math inline">\(map\)</span>，只能用<span class="math inline">\(unordered\_map\)</span>，不然会<span class="math inline">\(\text{T}\)</span>，或者离散化一下也可以。</p><h3 id="代码">代码</h3><p>我的<span class="math inline">\(\text{AC}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; l,r,f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt;<span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径压缩</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = x;</span><br><span class="line">    <span class="keyword">while</span> (r[t] != t)&#123;</span><br><span class="line">        t = r[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r[x] != t)&#123;</span><br><span class="line">        <span class="keyword">int</span> p = r[x];</span><br><span class="line">        r[x] = t;</span><br><span class="line">        x = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read(), q = read();</span><br><span class="line">    <span class="keyword">int</span> op,x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; q;i++) &#123;</span><br><span class="line">        op = read(), x = read();</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(f.count(x)) <span class="keyword">continue</span>;</span><br><span class="line">            f[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l.count(x - <span class="number">1</span>) &amp;&amp; l.count(x + <span class="number">1</span>)) &#123;</span><br><span class="line">                l[x] = l[x - <span class="number">1</span>];</span><br><span class="line">                r[x] = r[x + <span class="number">1</span>];</span><br><span class="line">                r[x - <span class="number">1</span>] = r[x];</span><br><span class="line">                l[x + <span class="number">1</span>] = l[x];</span><br><span class="line">                r[l[x]] = r[x];</span><br><span class="line">                l[r[x]] = l[x];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(l.count(x - <span class="number">1</span>)) &#123;</span><br><span class="line">                l[x] = l[x - <span class="number">1</span>];</span><br><span class="line">                r[x - <span class="number">1</span>] = x;</span><br><span class="line">                r[l[x]] = r[x] = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(l.count(x + <span class="number">1</span>)) &#123;</span><br><span class="line">                r[x] = r[x + <span class="number">1</span>];</span><br><span class="line">                l[x + <span class="number">1</span>] = x;</span><br><span class="line">                l[r[x]] = l[x] = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l[x] = r[x] = x;</span><br><span class="line">            &#125;</span><br><span class="line">            cr(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!l.count(x)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> t = x;</span><br><span class="line">                <span class="keyword">while</span>(r[t] != t) t = r[t];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(大佬的\text{AC}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span>  <span class="keyword">int</span> maxn =  <span class="number">100010</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,  <span class="keyword">int</span>&gt; fa;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">findfa</span><span class="params">(<span class="keyword">int</span>  x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>  (!fa.count(x))<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span>  fa[x]  =  findfa(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d  %d"</span>,  &amp;n,  &amp;q);</span><br><span class="line"><span class="keyword">int</span> op, x;</span><br><span class="line"><span class="keyword">while</span>  (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d  %d"</span>,  &amp;op,  &amp;x);</span><br><span class="line"><span class="keyword">if</span>  (op ==  <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fa[x]  =  findfa(x +  <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans =  findfa(x);</span><br><span class="line"><span class="keyword">if</span>  (ans &gt; n)ans =  <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019徐州网络赛-B.so easy}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  现在，从下标1开始每个位置有一个点，需要你进行&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;次操作，共两种，1. &lt;span class=&quot;math inline&quot;&gt;\((1,x)\)&lt;/span&gt;为删除&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;位置的点，2. &lt;span class=&quot;math inline&quot;&gt;\((2,x)\)&lt;/span&gt;为查询&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;的后面(包括&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;位置)的第一个点的位置。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行输入两个数&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;，之后&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;行每行一个操作。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq x&amp;lt; n&amp;lt;10^9,1\leq q&amp;lt;10^6\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  输出格式：对于每个查询操作，输出一行一个结果。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="并查集" scheme="https://yuggu.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>一段神奇的cpp代码</title>
    <link href="https://yuggu.github.io/2019/09/09/%E4%B8%80%E6%AE%B5%E7%A5%9E%E5%A5%87%E7%9A%84cpp%E4%BB%A3%E7%A0%81/"/>
    <id>https://yuggu.github.io/2019/09/09/一段神奇的cpp代码/</id>
    <published>2019-09-09T10:48:50.000Z</published>
    <updated>2019-09-09T11:46:42.801Z</updated>
    
    <content type="html"><![CDATA[<p>  这段代码应该涉及到了汇编的内容。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这段代码应该涉及到了汇编的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="汇编" scheme="https://yuggu.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="c++" scheme="https://yuggu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-F] Greedy Sequence</title>
    <link href="https://yuggu.github.io/2019/09/09/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-F-Greedy-Sequence/"/>
    <id>https://yuggu.github.io/2019/09/09/2019南京网络赛-F-Greedy-Sequence/</id>
    <published>2019-09-09T03:13:39.000Z</published>
    <updated>2019-09-20T11:31:18.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41303" target="_blank" rel="noopener"><span class="math inline">\(\text{2019南京网络赛-F.Greedy Sequence}\)</span></a></p><h3 id="题意">题意</h3><p>  给你一个从1到<span class="math inline">\(n\)</span>，<span class="math inline">\(n\)</span>个数的排列，对于<span class="math inline">\(i\in [1,n]\)</span>，你需要构造一个序列<span class="math inline">\(s_i\)</span>，所以你需要构造<span class="math inline">\(n\)</span>个序列。构造的规则如下</p><ol type="1"><li><span class="math inline">\(s_i[1]=i\)</span>；</li><li><span class="math inline">\(s_i\)</span>的长度是<span class="math inline">\(n\)</span>，并且对于每个<span class="math inline">\(j\in [2,n],s_i[j]\leq s_i[j-1]\)</span>；</li><li>对于<span class="math inline">\(s_i[j]\)</span>在序列中的位置是<span class="math inline">\(pos[j]\)</span>，对于任意的<span class="math inline">\(j\geq 2\)</span>，<span class="math inline">\(\left |pos[j]-pos[j-1]\right |\leq k(1\leq 10^5)\)</span>，并且对于任意一个<span class="math inline">\(s_i\)</span>，它的任意一个元素在<span class="math inline">\(a\)</span>中最多出现一次；</li><li>对于<span class="math inline">\(s_i\)</span>，如果它已经将<span class="math inline">\(a\)</span>中满足要求的元素全部选择了，但是它的长度小于<span class="math inline">\(n\)</span>，那么它的其他元素都为0；</li><li>对于任意一个<span class="math inline">\(s_i\)</span>，我们希望它的权值越大越好，(对于任意的两个序列<span class="math inline">\(c,d\)</span>，如果存在<span class="math inline">\(k\)</span>，<span class="math inline">\(1\leq k\leq n,c_i=d_i\space for\space all\space 1\leq i &lt; k,\space and\space c_k&gt;d_k\)</span>，我们则说<span class="math inline">\(c_i\)</span>的权值大于<span class="math inline">\(d_i\)</span>)。 <a id="more"></a></li></ol><p>  输入格式：第一行一个<span class="math inline">\(t\)</span>，代表<span class="math inline">\(t\)</span>组测试样例，每个测试样例第一行<span class="math inline">\(n,k\)</span>，第二行<span class="math inline">\(n\)</span>个数代表序列<span class="math inline">\(a\)</span>.</p><p>  数据范围：<span class="math inline">\(1\leq t\leq 20,1\leq n,k\leq 10^5,1\leq a_i\leq n\)</span>.</p><p>  输出格式：每个测试样例输出一行<span class="math inline">\(n\)</span>个数，第<span class="math inline">\(i\)</span>个数代表序列<span class="math inline">\(s_i\)</span>中的非零元素的个数.</p><h3 id="分析">分析</h3><p>  对于任意的<span class="math inline">\(s_i\)</span>，如果某一次我们选了<span class="math inline">\(a\)</span>中的元素<span class="math inline">\(a[j]\)</span>，那么我们下一次选的数一定是<span class="math inline">\([j-k,j+k]\)</span>中的小于<span class="math inline">\(a[j]\)</span>的最大值，这样做能保证我们的<span class="math inline">\(s_i\)</span>的权值最大以及<span class="math inline">\(s_i\)</span>的非零元素最多；</p><p>  那么对于序列<span class="math inline">\(a\)</span>中的元素<span class="math inline">\(a_i\)</span>，我们就用<span class="math inline">\(set\)</span>维护一个<span class="math inline">\([i-k,i+k]\)</span>的窗口，之后<span class="math inline">\(set\)</span>内二分找到选了<span class="math inline">\(a_i\)</span>之后下一个会选的元素，对于每个<span class="math inline">\(a_i\)</span>，我们都记录下这个值<span class="math inline">\(c_i\)</span>，并且显然的，当选择<span class="math inline">\(a_i\)</span>为s[1]时序列的非零元素个数等于选择<span class="math inline">\(c_i\)</span>为s[1]时序列非零元素个数基础上加1，所以这个我们递推一下就可以了。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, k, a[<span class="number">1000005</span>], c[<span class="number">1000005</span>], pos[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> len[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(len, <span class="number">0</span>, <span class="keyword">sizeof</span>(len));</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            pos[a[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">        s.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            s.insert(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos1 = i - k - <span class="number">1</span>, pos2 = i + k;</span><br><span class="line">            <span class="keyword">if</span>(pos1 &gt; <span class="number">0</span>)s.erase(a[pos1]);</span><br><span class="line">            <span class="keyword">if</span>(pos2 &lt;= n)s.insert(a[pos2]);</span><br><span class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it  = s.lower_bound(a[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != s.begin())c[a[i]] = *--it;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; c[a[i]] &lt;&lt; " " &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            len[i] = len[c[i]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; len[i]&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; len[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019南京网络赛-F.Greedy Sequence}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你一个从1到&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个数的排列，对于&lt;span class=&quot;math inline&quot;&gt;\(i\in [1,n]\)&lt;/span&gt;，你需要构造一个序列&lt;span class=&quot;math inline&quot;&gt;\(s_i\)&lt;/span&gt;，所以你需要构造&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个序列。构造的规则如下&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(s_i[1]=i\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(s_i\)&lt;/span&gt;的长度是&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，并且对于每个&lt;span class=&quot;math inline&quot;&gt;\(j\in [2,n],s_i[j]\leq s_i[j-1]\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;对于&lt;span class=&quot;math inline&quot;&gt;\(s_i[j]\)&lt;/span&gt;在序列中的位置是&lt;span class=&quot;math inline&quot;&gt;\(pos[j]\)&lt;/span&gt;，对于任意的&lt;span class=&quot;math inline&quot;&gt;\(j\geq 2\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(\left |pos[j]-pos[j-1]\right |\leq k(1\leq 10^5)\)&lt;/span&gt;，并且对于任意一个&lt;span class=&quot;math inline&quot;&gt;\(s_i\)&lt;/span&gt;，它的任意一个元素在&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;中最多出现一次；&lt;/li&gt;
&lt;li&gt;对于&lt;span class=&quot;math inline&quot;&gt;\(s_i\)&lt;/span&gt;，如果它已经将&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;中满足要求的元素全部选择了，但是它的长度小于&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，那么它的其他元素都为0；&lt;/li&gt;
&lt;li&gt;对于任意一个&lt;span class=&quot;math inline&quot;&gt;\(s_i\)&lt;/span&gt;，我们希望它的权值越大越好，(对于任意的两个序列&lt;span class=&quot;math inline&quot;&gt;\(c,d\)&lt;/span&gt;，如果存在&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(1\leq k\leq n,c_i=d_i\space for\space all\space 1\leq i &amp;lt; k,\space and\space c_k&amp;gt;d_k\)&lt;/span&gt;，我们则说&lt;span class=&quot;math inline&quot;&gt;\(c_i\)&lt;/span&gt;的权值大于&lt;span class=&quot;math inline&quot;&gt;\(d_i\)&lt;/span&gt;)。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="二分" scheme="https://yuggu.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-B] super_log</title>
    <link href="https://yuggu.github.io/2019/09/06/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-B-super-log/"/>
    <id>https://yuggu.github.io/2019/09/06/2019南京网络赛-B-super-log/</id>
    <published>2019-09-06T04:10:34.000Z</published>
    <updated>2019-09-20T11:31:09.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41299" target="_blank" rel="noopener"><span class="math inline">\(\text{2019南京网络赛-B.super_log}\)</span></a></p><h3 id="题意">题意</h3><p>  有一个分段函数如下： <img src="https://res.jisuanke.com/img/upload/20190826/76e9a143bf8f0ef149a1ef84a9adf72922f8260c.png">   现在需要你找到最小的正整数<span class="math inline">\(x\)</span>，使得<span class="math inline">\(log_{a}^* (x) \ge b\)</span>，由于结果可能会非常大，所以需要你输出<span class="math inline">\(x\)</span>对<span class="math inline">\(m\)</span>取余后的结果。</p><p>  输入格式：共<span class="math inline">\(t\)</span>组测试样例，每组样例有一行，一行三个数<span class="math inline">\(a,b,m\)</span>. <a id="more"></a></p><p>  数据范围：<span class="math inline">\(1\leq a\leq 1000000,0\leq b\leq 1000000\)</span>,<span class="math inline">\(1\leq m\leq 1000000\)</span>.</p><p>  输出格式：每行对应一个样例结果。</p><h3 id="分析">分析</h3><p>  实际上这里是要计算<span class="math inline">\(a^{a^{a^{\dots}}}\%m\)</span>这里共<span class="math inline">\(b\)</span>个<span class="math inline">\(a\)</span>，这是一个幂塔函数，显然是不能够直接计算的。</p><p>  考虑欧拉降幂，如下：</p><p><span class="math display">\[a^b\equiv \begin{cases} a^{b\space \text{mod}\space \phi(m)+\phi(m)} &amp;b\geq \phi(m)\\ a^b&amp;  b&lt;\phi(m) \end{cases}(\text{mod}\space m)\]</span></p><p>  显然直接套用公式即可， <span class="math display">\[a^{a^{a^{\dots}}} = a(a^{a^{a^{\dots}}}\text{mod}\space \phi(m)+\phi(m))(\text{mod}\space m)\]</span></p><p>  从上式可知，我们递归进行即可。</p><p>  如果<span class="math inline">\(a\)</span>是无限的，即乘方塔的层数无限，那么显然欧拉降幂公式里的<span class="math inline">\(b\)</span>(<span class="math inline">\(b\)</span>在这里是<span class="math inline">\(a^{a^{a^{\dots}}}\)</span>)一定是恒大于<span class="math inline">\(\phi(m)\)</span>，如果<span class="math inline">\(a\)</span>的层数是有限的，那么我们在计算过程中就需要对<span class="math inline">\(b\)</span>(<span class="math inline">\(b\)</span>在这里是<span class="math inline">\(a^{a^{a^{\dots}}}\)</span>)与<span class="math inline">\(\phi(m)\)</span>的大小进行判断。</p><p>  并且这里我们不知道最终的<span class="math inline">\(\phi(m)\)</span>是多少，所以需要进行递归计算。具体细节见代码。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2  </span></span><br><span class="line"><span class="comment">//#define MOD 99991  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b?a % b + b :a  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;  </span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)  </span></span><br><span class="line"> <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;  inline int read() &#123;  </span></span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;  </span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();  </span><br><span class="line">        <span class="keyword">return</span> x * f;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">phi</span><span class="params">(ll x)</span> </span>&#123;  </span><br><span class="line">    ll res = x, a = x;  </span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;  </span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">while</span> (a % i == <span class="number">0</span>) a /= i;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) res = res / a * (a - <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">k_pow</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;  </span><br><span class="line">    ll res = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (b) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = MOD(res * a, p);  </span><br><span class="line">        a = MOD(a * a, p);  </span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll a, ll l, ll r, ll m)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (l == r || m == <span class="number">1</span>)<span class="keyword">return</span> MOD(a, m);  </span><br><span class="line">    ll k = phi(m);  </span><br><span class="line">    <span class="keyword">return</span> k_pow(a, f(a, l + <span class="number">1</span>, r, k), m);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> T;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);  </span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;  </span><br><span class="line">        <span class="keyword">int</span> a, b, m;  </span><br><span class="line">        a = read(), b = read(), m = read();  </span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">1</span> % m);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a % m);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f(a, <span class="number">1</span>, b, m) % (<span class="number">1l</span>l * m) );  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019南京网络赛-B.super_log}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  有一个分段函数如下： &lt;img src=&quot;https://res.jisuanke.com/img/upload/20190826/76e9a143bf8f0ef149a1ef84a9adf72922f8260c.png&quot;&gt;   现在需要你找到最小的正整数&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;，使得&lt;span class=&quot;math inline&quot;&gt;\(log_{a}^* (x) \ge b\)&lt;/span&gt;，由于结果可能会非常大，所以需要你输出&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;对&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;取余后的结果。&lt;/p&gt;
&lt;p&gt;  输入格式：共&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;组测试样例，每组样例有一行，一行三个数&lt;span class=&quot;math inline&quot;&gt;\(a,b,m\)&lt;/span&gt;.
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="欧拉降幂" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
    
      <category term="数学" scheme="https://yuggu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="欧拉降幂" scheme="https://yuggu.github.io/tags/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
      <category term="幂塔函数" scheme="https://yuggu.github.io/tags/%E5%B9%82%E5%A1%94%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-A] The beautiful values of the palace</title>
    <link href="https://yuggu.github.io/2019/09/05/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-A-The-beautiful-values-of-the-palace/"/>
    <id>https://yuggu.github.io/2019/09/05/2019南京网络赛-A-The-beautiful-values-of-the-palace/</id>
    <published>2019-09-05T10:47:55.000Z</published>
    <updated>2019-09-20T11:27:39.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链接">链接</h4><p><a href="https://nanti.jisuanke.com/t/41298" target="_blank" rel="noopener"><span class="math inline">\(\text{2019南京网络赛-A.The beautiful values of the palace}\)</span></a></p><h4 id="题意">题意</h4><p>  有一个<span class="math inline">\(n\times n\)</span>的螺旋数字矩阵，<span class="math inline">\(n\)</span>一定是奇数，若边长为5则如下：</p><p><img src="https://res.jisuanke.com/img/upload/20190826/e188ba2f470e2afbf1d21ac4d1887e2f225dd40b.png"></p><p>  这个矩阵内有<span class="math inline">\(m\)</span>个点是有效的（即有一个值为对应螺旋矩阵该位置的值），其他位置都为0。现在有<span class="math inline">\(p\)</span>次查询<span class="math inline">\((x1,y1,x2,y2)\)</span>，询问<span class="math inline">\((x1,y1,)、(x2,y2)\)</span>所围成的矩阵之间的所有数的数位和的和是多少。</p><p>  输入格式：共<span class="math inline">\(t\)</span>组测试样例，每组样例，第一行三个数<span class="math inline">\(n,m,p\)</span>，接下来<span class="math inline">\(m\)</span>行，每行一组坐标<span class="math inline">\((x,y)\)</span>，告诉<span class="math inline">\(m\)</span>个有效点，之后<span class="math inline">\(p\)</span>行，每行一次查询<span class="math inline">\((x1,y1,x2,y2)\)</span>。</p><p>  数据范围：<span class="math inline">\((t\leq 5,n\leq 10^6),(m,p\leq 10^5)\)</span>.</p><p>  输出格式：每行输出一个查询结果。 <a id="more"></a></p><h4 id="分析">分析</h4><p>  螺旋矩阵<span class="math inline">\((x,y)\)</span>位置的数的计算，这里就不解释了。</p><p>  看网上说这就是一个二维偏序问题，个人理解：逆序数的求解应该是算是一个一维偏序问题。对于二维偏序问题可以通过对<span class="math inline">\(x\)</span>来排序，就是一个一维偏序问题了。</p><p>  设<span class="math inline">\(sum(x,y)\)</span>表示以<span class="math inline">\((1,1)\)</span>为左下角，以<span class="math inline">\((x,y)\)</span>为右上角所包含所有数的数位和的和，对于查询<span class="math inline">\((x1,y1,x2,y2)\)</span>即要求 <span class="math display">\[sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1)\]</span></p><p>  我们就可以把这个查询表示成四个三元组（1为加，-1为减） <span class="math display">\[(x2,y2,1),(x1-1,y2,-1),(x2,y1-1,-1),(x1-1,y1-1,1)\]</span></p><p>  之后我们将这些每个查询所表示的四个三元组以及<span class="math inline">\(m\)</span>个有效点的插入在一起按照<span class="math inline">\(x\)</span>来排序（即离线），我们用树状数组来维护<span class="math inline">\(sum(x,y)\)</span>（由于<span class="math inline">\(x\)</span>是升序排列，因此我们只需要使用一个一维数组维护<span class="math inline">\(1-y\)</span>的数的数位和的和），我们遍历所有离线的操作，如果当前操作是插入<span class="math inline">\((x,y)\)</span>，那么我们就在树状数组的<span class="math inline">\(y\)</span>位置插入<span class="math inline">\((x,y)\)</span>位置的数的数位和，对于查询操作细节见代码。</p><h4 id="代码">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll t, n, m, p, c[<span class="number">1000006</span>], res[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll x, y, id, va;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp; a)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x != x)<span class="keyword">return</span> a.x &gt; x;</span><br><span class="line">        <span class="keyword">if</span> (a.y != y)<span class="keyword">return</span> a.y &gt; y;</span><br><span class="line">        <span class="keyword">return</span> a.id &gt; id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ct[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QV</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="comment">//求美丽值</span></span><br><span class="line">    ll mi,ans=<span class="number">0</span>;</span><br><span class="line">    x=n-x+<span class="number">1</span>;y=n-y+<span class="number">1</span>;</span><br><span class="line">    mi=min(x,min(y,min(n-x+<span class="number">1</span>,n-y+<span class="number">1</span>)));</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=y)</span><br><span class="line">        ans=mi*(<span class="number">4</span>*(n<span class="number">-1</span>)<span class="number">-4</span>*mi)+<span class="number">10</span>*mi<span class="number">-4</span>*n<span class="number">-3</span>+x+y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans=mi*(<span class="number">4</span>*n<span class="number">-4</span>*mi)+<span class="number">2</span>*mi+<span class="number">1</span>-x-y;<span class="comment">//模拟过程</span></span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">        res+=(ans%<span class="number">10</span>);ans/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c =getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n + <span class="number">3</span>; i += i &amp; -i)</span><br><span class="line">        c[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i)</span><br><span class="line">        ans += c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    t = read();</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(ct, <span class="number">0</span>, <span class="keyword">sizeof</span>(ct));</span><br><span class="line">        <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(res));</span><br><span class="line">        n = read(), m = read(), p = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">            ct[i].x = read(), ct[i].y = read();</span><br><span class="line">        <span class="keyword">int</span> x1, x2, y1, y2, cnt = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">            x1 = read(), y1 = read(), x2 = read(), y2 = read();</span><br><span class="line">            ct[++cnt].x = x2, ct[cnt].y = y2, ct[cnt].id = i, ct[cnt].va = <span class="number">1</span>;</span><br><span class="line">            ct[++cnt].x = x1 - <span class="number">1</span>, ct[cnt].y = y1 - <span class="number">1</span>, ct[cnt].id = i, ct[cnt].va = <span class="number">1</span>;</span><br><span class="line">            ct[++cnt].x = x1 - <span class="number">1</span>, ct[cnt].y = y2, ct[cnt].id = i, ct[cnt].va = <span class="number">-1</span>;</span><br><span class="line">            ct[++cnt].x = x2, ct[cnt].y = y1 - <span class="number">1</span>, ct[cnt].id = i, ct[cnt].va = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ct + <span class="number">1</span>, ct + <span class="number">1</span> + cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ct[i].id == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> val = QV(ct[i].x, ct[i].y);</span><br><span class="line">                insert(ct[i].y, val);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//ct[i].va为1则是加，为-1则是减</span></span><br><span class="line">                res[ct[i].id] += <span class="number">1l</span>l * ct[i].va * sum(ct[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;链接&quot;&gt;链接&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019南京网络赛-A.The beautiful values of the palace}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题意&quot;&gt;题意&lt;/h4&gt;
&lt;p&gt;  有一个&lt;span class=&quot;math inline&quot;&gt;\(n\times n\)&lt;/span&gt;的螺旋数字矩阵，&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;一定是奇数，若边长为5则如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.jisuanke.com/img/upload/20190826/e188ba2f470e2afbf1d21ac4d1887e2f225dd40b.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;  这个矩阵内有&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个点是有效的（即有一个值为对应螺旋矩阵该位置的值），其他位置都为0。现在有&lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt;次查询&lt;span class=&quot;math inline&quot;&gt;\((x1,y1,x2,y2)\)&lt;/span&gt;，询问&lt;span class=&quot;math inline&quot;&gt;\((x1,y1,)、(x2,y2)\)&lt;/span&gt;所围成的矩阵之间的所有数的数位和的和是多少。&lt;/p&gt;
&lt;p&gt;  输入格式：共&lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;组测试样例，每组样例，第一行三个数&lt;span class=&quot;math inline&quot;&gt;\(n,m,p\)&lt;/span&gt;，接下来&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;行，每行一组坐标&lt;span class=&quot;math inline&quot;&gt;\((x,y)\)&lt;/span&gt;，告诉&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个有效点，之后&lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt;行，每行一次查询&lt;span class=&quot;math inline&quot;&gt;\((x1,y1,x2,y2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\((t\leq 5,n\leq 10^6),(m,p\leq 10^5)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;  输出格式：每行输出一个查询结果。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="树状数组" scheme="https://yuggu.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>[2019宁夏网络赛-F] Moving On</title>
    <link href="https://yuggu.github.io/2019/09/05/2019%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-F-Moving-On/"/>
    <id>https://yuggu.github.io/2019/09/05/2019宁夏网络赛-F-Moving-On/</id>
    <published>2019-09-05T05:09:04.000Z</published>
    <updated>2019-09-20T11:31:34.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41290" target="_blank" rel="noopener"><span class="math inline">\(\text{2019宁夏网络赛-F.Moving On}\)</span></a></p><h3 id="题意">题意</h3><p>  有<span class="math inline">\(n\)</span>个城市，城市<span class="math inline">\(i\)</span>有一个犯罪值<span class="math inline">\(r_i\)</span>，城市u和v之间的距离是<span class="math inline">\(d[i][j]\)</span>(无向图)，现在有<span class="math inline">\(q\)</span>次查询，每次查询询问从城市<span class="math inline">\(u\)</span>到<span class="math inline">\(v\)</span>，在中途经过的任意城市的犯罪值不超过<span class="math inline">\(w\)</span>的情况下(中途城市不包括<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>)的最短路径是多少。 <a id="more"></a></p><p>  输入格式：共<span class="math inline">\(t\)</span>组样例，每个测试样例的第一行<span class="math inline">\(n,q\)</span>，代表<span class="math inline">\(n\)</span>个城市，共<span class="math inline">\(q\)</span>次查询，接下来一行<span class="math inline">\(n\)</span>个整数<span class="math inline">\(r_1,r_2...r_n\)</span>，接下来是一个<span class="math inline">\(n\times n\)</span>的矩阵<span class="math inline">\(d\)</span>，接下来<span class="math inline">\(q\)</span>行代表<span class="math inline">\(q\)</span>次查询，每行三个数<span class="math inline">\(u,v,w\)</span>.</p><p>  数据范围：<span class="math inline">\(t&lt;50,1≤ri_​≤10^5,1≤d_{i,j}​≤10^5(ij),d_{i,i}​=0,d_{i,j}=d_{j,i},1\leq u,v\leq n,1\leq w\leq 10^5\)</span>.</p><p>  输出格式：每个测试样例的第一行输出<strong>Case #x:</strong>，x代表第x个测试样例，接下来的每一行输出一个询问结果。</p><h3 id="分析">分析</h3><p>  题目给出了<span class="math inline">\(n\)</span>个点，整个图是一个稠密图，并且有<span class="math inline">\(q\)</span>次查询，即使每次查询都使用复杂度为<span class="math inline">\(\text{O((N+M)logN)}\)</span>的堆优化的<span class="math inline">\(\text{Dijstra}\)</span>也会超时。</p><p>  这里使用<span class="math inline">\(\text{floyd}\)</span>，对于<span class="math inline">\(\text{floyd}\)</span>求最短路来说，<span class="math inline">\(f[k][i][j]\)</span>表示从<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>中途经过<span class="math inline">\(k\)</span>的最短路，那么我们可以把城市按照犯罪值<span class="math inline">\(r[i]\)</span>升序排列，那么<span class="math inline">\(f[k][i][j]\)</span>则就是从<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>中途经过犯罪值前<span class="math inline">\(k\)</span>小城市（意思是经过前<span class="math inline">\(k\)</span>小城市中的一部分）的最短路，那么我们需要求出所有的答案，我们的<span class="math inline">\(f[k][i][j]\)</span>可以通过<code>从i到j中途经过犯罪值前k-1小城市（同上）的最短路</code>以及<code>从i到k和从k到j中途经过前k-1小城市（同上）的最短路的和</code>，这二者更新得到。</p><p>  之后对于每个询问<span class="math inline">\((u,v,w)\)</span>，二分找到满足犯罪值小于等于<span class="math inline">\(w\)</span>的犯罪值最大的城市编号<span class="math inline">\(k\)</span>，<span class="math inline">\(f[k][u][v]\)</span>即是查询结果。</p><p>  1. 当图是个稠密图，并且询问多次两点之间最短路的时候可以使用Floyd算法； 2. 注意使用Floyd的任何变形；</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, q, u, v, w;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">roberry</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> va, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> roberry &amp; a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.va &gt; va;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;r[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> l1, <span class="keyword">int</span> r1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l1 + <span class="number">1</span>&lt; r1) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l1 + r1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r[mid].va &lt;= w)l1 = mid;</span><br><span class="line">        <span class="keyword">else</span> r1 = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cnt);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;r[i].va);</span><br><span class="line">            r[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(r + <span class="number">1</span>, r + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);    </span><br><span class="line">                dp[<span class="number">0</span>][i][j] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> p = r[i].id;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                    dp[i][j][k] = min(dp[i - <span class="number">1</span>][j][k], dp[i - <span class="number">1</span>][j][p] + dp[i - <span class="number">1</span>][p][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[find(w, <span class="number">0</span>, n + <span class="number">1</span>)][u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019宁夏网络赛-F.Moving On}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城市，城市&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;有一个犯罪值&lt;span class=&quot;math inline&quot;&gt;\(r_i\)&lt;/span&gt;，城市u和v之间的距离是&lt;span class=&quot;math inline&quot;&gt;\(d[i][j]\)&lt;/span&gt;(无向图)，现在有&lt;span class=&quot;math inline&quot;&gt;\(q\)&lt;/span&gt;次查询，每次查询询问从城市&lt;span class=&quot;math inline&quot;&gt;\(u\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt;，在中途经过的任意城市的犯罪值不超过&lt;span class=&quot;math inline&quot;&gt;\(w\)&lt;/span&gt;的情况下(中途城市不包括&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt;)的最短路径是多少。
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Floyd" scheme="https://yuggu.github.io/tags/Floyd/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[2019宁夏网络赛-A] Maximum Element In A Stack</title>
    <link href="https://yuggu.github.io/2019/09/04/2019%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-A-Maximum-Element-In-A-Stack/"/>
    <id>https://yuggu.github.io/2019/09/04/2019宁夏网络赛-A-Maximum-Element-In-A-Stack/</id>
    <published>2019-09-04T08:30:21.000Z</published>
    <updated>2019-09-20T11:31:28.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://nanti.jisuanke.com/t/41285" target="_blank" rel="noopener"><span class="math inline">\(\text{2019宁夏网络赛-A.Maximum Element In A Stack}\)</span></a></p><h3 id="题意">题意</h3><p>  给你一个空的<span class="math inline">\(\text{stack}\)</span>，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。</p><p>  输入规格即数据范围：第一行一个<span class="math inline">\(\text{T(T&lt;50)}\)</span>，下面每行一组测试样例，包含七个整数<span class="math inline">\(n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq p,q,m\leq 10^{9}),SA,SB,SC(10^{4}\leq SA,SB,SC\leq 10^{6})\)</span>，其中<span class="math inline">\(n\)</span>是操作的数量，其中关于入栈出栈操作部分代码已给出，如下： <a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于每个测试样例，输出一行<code>Case #x: y</code>，x代表第x个测试样例，y等于<span class="math inline">\(\oplus^n_{i=1} (i \cdot a_i)\)</span>，<span class="math inline">\(a_i​\)</span>是第<span class="math inline">\(i\)</span>次操作后的最大值。</p><h3 id="分析">分析</h3><p>  关键目标是求出，每次出栈入栈之后的最大值，如果没有出栈操作，仅仅只有入栈操作，那么我们需要一个res以及一个栈s1，在每次入栈元素x之后，使用它更新一下最大值res，但是这里出现了出栈的操作；</p><p>  那么考虑一个出栈操作前后的最大值变化，如果出栈元素不是最大值，那么最大值不变，如果出栈元素是最大值，那么出栈后最大值为没出栈前的次大值，那么我们考虑使用一个单调的栈<span class="math inline">\(s2\)</span>（栈底到栈顶递增）模拟最大值变化，栈<span class="math inline">\(s1\)</span>模拟入栈出栈操作；如果当前操作是入栈元素<span class="math inline">\(x\)</span>，并且<span class="math inline">\(x\)</span>大于等于栈顶元素，那么就让<span class="math inline">\(x\)</span>同时入栈<span class="math inline">\(s1、s2\)</span>，若小于，则让<span class="math inline">\(x\)</span>入栈<span class="math inline">\(s1\)</span>，如果当前操作是出栈操作，比较<span class="math inline">\(s1\)</span>栈顶元素与<span class="math inline">\(s2\)</span>栈顶元素，若相等，说明当前最大元素即为<span class="math inline">\(s1\)</span>栈顶元素，那么同时让<span class="math inline">\(s1\)</span>与<span class="math inline">\(s2\)</span>栈顶元素出栈，不相等则，让<span class="math inline">\(s1\)</span>栈顶元素出栈，当前最大值即为<span class="math inline">\(s2\)</span>栈顶元素。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line">    <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">ll res,cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">5000006</span>], b[<span class="number">5000006</span>];</span><br><span class="line">ll i1, i2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PUSH</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    b[++i2] = x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= a[i1])</span><br><span class="line">        a[++i1] = x;</span><br><span class="line">    res ^= (cnt * a[i1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">POP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(i2 &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i2] == a[i1])</span><br><span class="line">            i2--, i1--;</span><br><span class="line">        <span class="keyword">else</span> i2--;</span><br><span class="line">        res ^= (cnt * a[i1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= t; k++) &#123;</span><br><span class="line">        i1 = i2 = cnt = res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        gen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, k, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41285&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{2019宁夏网络赛-A.Maximum Element In A Stack}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你一个空的&lt;span class=&quot;math inline&quot;&gt;\(\text{stack}\)&lt;/span&gt;，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。&lt;/p&gt;
&lt;p&gt;  输入规格即数据范围：第一行一个&lt;span class=&quot;math inline&quot;&gt;\(\text{T(T&amp;lt;50)}\)&lt;/span&gt;，下面每行一组测试样例，包含七个整数&lt;span class=&quot;math inline&quot;&gt;\(n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq p,q,m\leq 10^{9}),SA,SB,SC(10^{4}\leq SA,SB,SC\leq 10^{6})\)&lt;/span&gt;，其中&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;是操作的数量，其中关于入栈出栈操作部分代码已给出，如下：
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="模拟" scheme="https://yuggu.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
</feed>
