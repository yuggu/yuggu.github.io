<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2019-07-20T11:00:04.331Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ - 1651 Multiplication Puzzle</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/</id>
    <published>2019-07-20T10:59:22.000Z</published>
    <updated>2019-07-20T11:00:04.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=1651" target="_blank" rel="noopener">$\text{POJ - 1651}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp; 给你一个长度为$n$的序列$a$，现在你将要把序列$a$中除开头和结尾外的所有元素都删除掉， 你每次删除一个数$a<em>i$时，你将会得到的分数为$a</em>{i-1}<em>a_i</em>a_{i+1}$，你需要获得最少的分数，问这个分数最小为多少。<br>&emsp;&emsp;比如对于序列${10,1,50,20,5}$，你依次删除$50、20、1$，得到的分数分别为$1<em>50</em>20、1<em>20</em>5、10<em>1</em>5$，总共为1150，这样你就能获得最少的分数。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，依旧是枚举区间长度与起点，求出小区间的最优决策，然后得到大区间的解。状态转移方程为：<script type="math/tex">dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+a[i]*a[k]*a[j])</script><br>&emsp;&emsp;$dp[i][j]$即为区间$[i,j]$所能获得的最小分数。<br>&emsp;&emsp;另外，如果是获得最大分数，只需要将数组初始化为0即可。<br>&emsp;&emsp;区间$dp$一般基本套路即是枚举区间长度与起点，然后求接小区间解，进而合并得到大区间的解，关键是转移方程。</p><h3 id="区间-dp-基本模板"><a href="#区间-dp-基本模板" class="headerlink" title="区间$dp$基本模板"></a>区间$dp$基本模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>;len&lt;=n;len++)&#123;<span class="comment">//枚举长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j+len&lt;=n+<span class="number">1</span>;j++)&#123;<span class="comment">//枚举起点，ends&lt;=n</span></span><br><span class="line">            <span class="keyword">int</span> ends = j+len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = j;i&lt;ends;i++)&#123;<span class="comment">//枚举分割点，更新小区间最优解</span></span><br><span class="line">                dp[j][ends] = min(dp[j][ends],dp[j][i]+dp[i+<span class="number">1</span>][ends]+something);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dp[<span class="number">130</span>][<span class="number">130</span>], a[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i],dp[i][i] = dp[i - <span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]+ a[i] * a[k] * a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1651&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>POJ - 2955 Brackets</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/</id>
    <published>2019-07-20T07:00:19.000Z</published>
    <updated>2019-07-20T09:43:32.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=2955" target="_blank" rel="noopener">$\text{POJ - 2955}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：</p><p>&emsp;&ensp;$1$.&ensp;空的括号序列是合法的；<br>&emsp;&ensp;$2$.&ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；<br>&emsp;&ensp;$3$.&ensp;如果$a、b$是合法的，那么$ab$也是合法的；<br>&emsp;&ensp;$4$.&ensp;其他括号序列都是不合法的；<br> <a id="more"></a></p><p>&emsp;&emsp;括号序列长度$\text N$，$1\leq \text{N}\leq100$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，对于某个序列，如$[xxx]oooo$，它被分成两部分，$xxx$和$oooo$；<br>&emsp;&emsp;设$dp[i][j]$表示$[i,j]$之间的最长合法括号子序列的长度，那么如果$[i+1,j]$内没有与$i$匹配的括号，则$dp[i][j]=dp[i+1][j]$，若存在一个$k$与之匹配，那么$dp[i][j]=\max{dp[i+1][j],dp[i+1][k-1]+dp[k+1][j]+2}$($i$与$k$匹配)，区间长度从小到大枚举，最终$dp[1][\text{N}]$即是答案。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"end"</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> n = s.size();</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n ;len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> ((s[i - <span class="number">1</span>] == <span class="string">'('</span> &amp;&amp; s[k - <span class="number">1</span>] ==<span class="string">')'</span>) || (s[i - <span class="number">1</span>] == <span class="string">'['</span> &amp;&amp; s[k - <span class="number">1</span>] == <span class="string">']'</span>))</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i + <span class="number">1</span>][k - <span class="number">1</span>] + dp[k + <span class="number">1</span>][j] + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 2955}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;ensp;$1$.&amp;ensp;空的括号序列是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$2$.&amp;ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；&lt;br&gt;&amp;emsp;&amp;ensp;$3$.&amp;ensp;如果$a、b$是合法的，那么$ab$也是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$4$.&amp;ensp;其他括号序列都是不合法的；&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu - P3379] 最近公共祖先</title>
    <link href="https://yuggu.github.io/2019/07/19/Luogu-P3379-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://yuggu.github.io/2019/07/19/Luogu-P3379-最近公共祖先/</id>
    <published>2019-07-19T14:36:54.000Z</published>
    <updated>2019-07-20T07:59:57.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3379" target="_blank" rel="noopener">$\text{Luogu - P3379}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;裸的$\text{LCA}$，这里先给出$\text{Tarjan}$的写法，实际上这里用$\text{Tarjan}$是不太好的，一开始没加入读入优化，有些数据过大直接$\text{TLE}$了，加了之后才$\text{AC}$，倍增和$\text{ST}$表之后再补。</p></blockquote><h3 id="关于-text-Tarjan"><a href="#关于-text-Tarjan" class="headerlink" title="关于$\text{Tarjan}$"></a>关于$\text{Tarjan}$</h3><blockquote><p>&emsp;&emsp;$\text{Tarjan}$的实现是这样的:首先沿着根节点$dfs$访问与它相邻的节点，并标记这个点，这样当访问完某个子树的某个节点之后，用数组标记它的父节点，当还没有向上回溯的时候，开始遍历查询(读入的时候把询问存起来，正所谓离线)，查询与当前子树的根节点即当前节点(假设当前节点为$u$)有关的询问$(u,v)$，如果与当前节点(即$u$)查询有关的查询的另一个节点(即$v$)已经在之前$dfs$过程中被访问过了，那么说明这个查询的$lca$就是节点$v$所在子树的根节点，因为你是$dfs$到$v$，然后$dfs$到$u$的，在你从$v$到$u$的这个过程中是肯定经过$lca$的；<br>&emsp;&emsp;<br>&emsp;&emsp;注意，虽然说这里是一个子树，但他并没有形成集合上的树(就是假如用$f[i]$存这颗树，但这个形成树的过程就是$dfs$到叶子节点，然后开始向上回溯的时候开始建立联系开始的，你一开始从根节点向下遍历的时候，实际上是不存在的，仅仅是一个图而不是树，建议模拟一下，画个图，把$f[i]$的具体变化看一下)，只是存在边的联系，在访问完整个图后，才有了树；<br>&emsp;&emsp;建立画个图照着代码模拟一下；</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,next,lca;</span><br><span class="line">&#125;Edge;</span><br><span class="line"><span class="comment">//e用来存边，query存查询</span></span><br><span class="line">Edge e[<span class="number">2</span>*maxn],query[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt,head[maxn],head1[maxn],cnt1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[cnt].u=u;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    e[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">    e[cnt].u=v;</span><br><span class="line">    e[cnt].v=u;</span><br><span class="line"><span class="comment">/*e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    e[cnt].next=head[v];</span><br><span class="line">    head[v]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用来存query即存查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    query[cnt1].u=u;</span><br><span class="line">    query[cnt1].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    query[cnt1].next=head1[u];</span><br><span class="line">    head1[u]=cnt1++;</span><br><span class="line">    query[cnt1].u=v;</span><br><span class="line">    query[cnt1].v=u;</span><br><span class="line"><span class="comment">/*  e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    query[cnt1].next=head1[v];</span><br><span class="line">    head1[v]=cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span>&amp;&amp;c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,f[maxn],vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    f[x]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            f[v]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[x];i!=<span class="number">-1</span>;i=query[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=query[i].v;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            query[i].lca=find(v);</span><br><span class="line">            query[i^<span class="number">1</span>].lca=f[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// std::ios::sync_with_stdio(false);</span></span><br><span class="line">    n=read(),m=read(),s=read();</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(head1,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head1));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        add(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        addp(u,v);</span><br><span class="line">    &#125; </span><br><span class="line">    tarjan(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;query[i].lca&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3379&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{Luogu - P3379}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/LCA/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>[HDU - 1874] 畅通工程续</title>
    <link href="https://yuggu.github.io/2019/07/19/HDU-1874-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD/"/>
    <id>https://yuggu.github.io/2019/07/19/HDU-1874-畅通工程续/</id>
    <published>2019-07-19T14:09:44.000Z</published>
    <updated>2019-07-19T14:34:17.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="noopener">$\text{HDU - 1874}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;求单源最短路径，这里给出$\text{Dijkstra}$和$\text{Bellman_ford}$算法的两种实现模板。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (int)1e9+7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,s,t,u,v,in;</span><br><span class="line"><span class="comment">//dis存储最短距离，book用来标记某一点是否已确定其最短路径并存入dis里，cost存储两点是否有边及边的权值</span></span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">205</span>],book[<span class="number">205</span>],cost[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="comment">//初始化dis与book</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">dis[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从s出发到其他所有点的最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">in = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> minn = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp; minn &gt; dis[i]) &#123;</span><br><span class="line">minn = dis[i];</span><br><span class="line">in=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有更新，说明全部点的最短路已找到并保存</span></span><br><span class="line"><span class="keyword">if</span> (minn == INF)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//book[in]=1来标记in这个点的最短路径已找到并存在DIS[I]里</span></span><br><span class="line">book[in] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//如果dis[i]没有被确定保存的已是最短路径并且I与in之间存在边连接并且可已更新dis数组</span></span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp;cost[i][in]!=INF&amp;&amp; dis[i] &gt;dis[in] + cost[i][in]) &#123;</span><br><span class="line">dis[i] = dis[in] + cost[i][in];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</span><br><span class="line"><span class="comment">//需要将cost初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">200</span>; j++)</span><br><span class="line">cost[i][j] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u&gt;&gt;v&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(cost[u][v]&gt;x)</span><br><span class="line">cost[v][u] = cost[u][v]=x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (dis[t] == INF ? <span class="number">-1</span> : dis[t] )&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1874&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{HDU - 1874}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[51nod - 1021] 石子归并</title>
    <link href="https://yuggu.github.io/2019/07/19/51nod-1021-%E7%9F%B3%E5%AD%90%E5%BD%92%E5%B9%B6/"/>
    <id>https://yuggu.github.io/2019/07/19/51nod-1021-石子归并/</id>
    <published>2019-07-19T12:48:55.000Z</published>
    <updated>2019-07-19T14:33:18.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1021" target="_blank" rel="noopener">$\text{51nod - 1021}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;有$N$堆石子排成一排，其中第$i$堆石子的质量为$A_i$，每次都可以选择其中相邻的两堆石子合并成一堆，形成的新石子堆的重量以及消耗的体力都是两堆石子的重量之和。求把全部$N$堆石子合成一堆最少需要消耗多少体力。$1\leq N\leq 300$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一个区间$dp$入门题目。<br>&emsp;&emsp;若最初的第$l$堆石子和第$r$堆石子被合并成一堆，则说明$l$~$r$之间的每堆石子也已经被合并，这样$l$和$r$才有可能相邻。因此，在任意时刻，任意一堆石子均可以用一个闭区间$[l,\ r]$来描述，表示这堆石子是由最初的第$l$~$r$堆石子合并而成的，其重量为$\sum<em>{i=l}^r A_i$。另外一定存在一个整数$k(l\leq k&lt;r)$，在这堆石子形成之前，现有第$l$~$k$堆石子（闭区间$[l,\ r]$）被合并成一堆，第$k+1$~$r$堆石子（闭区间$[k+1,\ r]$）被合并成一堆，然后这两堆石子才合并成$[l,\ r]$。<br>&emsp;&emsp;对应到动态规划中，就意味着两个长度较小的区间上的信息向一个更长的区间发生了转移，划分点$k$就是转移的决策，自然地，应该把区间$len$作为$DP$的阶段，区间长度可以由左右端点表示出，我们可以使用左右端点表示$DP$的状态。<br>&emsp;&emsp;$dp[l,\ r]$表示把最初的第$l$堆到第$r$堆合并到一堆，需要消耗的最少体力。状态转移方程如下：$$dp[l,\ r]=\displaystyle \min</em>{l\leq k&lt;r}{dp[l,\ k]+dp[k+1,\ r]}+\sum<em>{i=l}^rA_i$$<br>&emsp;&emsp;$dp[l][l]=A_l$，其余为$\infty$，最终结果为$dp[1,\ N]$，对于$\sum</em>{i=l}^rA_i$可用前缀和计算。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, dp[<span class="number">305</span>][<span class="number">305</span>], A[<span class="number">450</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">A[i] = A[i - <span class="number">1</span>] + x;</span><br><span class="line">dp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++) &#123;</span><br><span class="line"><span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">dp[l][r] = min(dp[l][r], dp[l][k] + dp[k + <span class="number">1</span>][r] + A[r] - A[l - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.51nod.com/Challenge/Problem.html#problemId=1021&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{51nod - 1021}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有$N$堆石子排成一排，其中第$i$堆石子的质量为$A_i$，每次都可以选择其中相邻的两堆石子合并成一堆，形成的新石子堆的重量以及消耗的体力都是两堆石子的重量之和。求把全部$N$堆石子合成一堆最少需要消耗多少体力。$1\leq N\leq 300$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>背包模板</title>
    <link href="https://yuggu.github.io/2019/07/18/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/"/>
    <id>https://yuggu.github.io/2019/07/18/背包模板/</id>
    <published>2019-07-18T11:53:31.000Z</published>
    <updated>2019-07-19T14:02:53.996Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;01背包模板，复杂度$O(V*N)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= w[i]; j--)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一个常数优化如下<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> bound = max(V - sum&#123;w[i]...w[n]&#125;, v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= bound, j--)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;完全背包模板，复杂度$O(V*N)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= V; j++)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;二进制拆分多重背包模板，复杂度$O(V*\sum log(p[i]))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = min(number[i], V / w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; num &gt; <span class="number">0</span>; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; num) k = num;</span><br><span class="line">        num -= k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= w[i] * k; j--)</span><br><span class="line">            f[j] = max(f[j], f[j - w[i] * k] + v[i] * k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;单调队列优化多重背包模板，复杂度$O(V*N)$，外层还需要嵌套一个$1…n$的循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p：某类物品数量，w：某类物品花费，v：某类物品价值，V:商品总价值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiPack</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> w, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123; <span class="comment">//j为w的所有组</span></span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = j, i = <span class="number">0</span>; k &lt;= V / <span class="number">2</span>; k += w, i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = f[k] - i * v;</span><br><span class="line">            <span class="keyword">while</span> (head &lt;= tail <span class="keyword">and</span> r &gt;= q[tail].v) tail--;</span><br><span class="line">            q[++tail] = node(i, r);</span><br><span class="line">            <span class="keyword">while</span> (q[head].id &lt; i - p) head++; <span class="comment">//需要的物品数目</span></span><br><span class="line">            f[k] = q[head].v + i * v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;01背包模板，复杂度$O(V*N)$&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;​&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = V; j &amp;gt;= w[i]; j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f[j] = max(f[j], f[j - w[i]] + v[i]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一个常数优化如下&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="背包" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E8%83%8C%E5%8C%85/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>连接不了https://account.jetbrains.com/ 网站或者idea通过帐号激活失败</title>
    <link href="https://yuggu.github.io/2019/06/05/%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86https-account-jetbrains-com-%E7%BD%91%E7%AB%99%E6%88%96%E8%80%85idea%E9%80%9A%E8%BF%87%E5%B8%90%E5%8F%B7%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5/"/>
    <id>https://yuggu.github.io/2019/06/05/连接不了https-account-jetbrains-com-网站或者idea通过帐号激活失败/</id>
    <published>2019-06-05T04:11:58.000Z</published>
    <updated>2019-06-05T04:25:52.200Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;使用学生邮箱申请jetbrains时，发现进不去<a href="https://account.jetbrains.com/" target="_blank" rel="noopener">https://account.jetbrains.com/</a> 发现不是被墙的原因，最后发现可能是以前破解idea时使用注册码时修改了hosts文件。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/hosts</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><p>&emsp;进入C:\Windows\System32\drivers\etc，打开hosts文件将<code>0.0.0.0 account.jetbrains.com</code>注释掉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;使用学生邮箱申请jetbrains时，发现进不去&lt;a href=&quot;https://account.jetbrains.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://account.jetbrains.com/&lt;/a&gt; 发现不是被墙的原因，最后发现可能是以前破解idea时使用注册码时修改了hosts文件。&lt;/p&gt;
&lt;h4 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h4&gt;&lt;h5 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim/etc/hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="jetbrains" scheme="https://yuggu.github.io/tags/jetbrains/"/>
    
  </entry>
  
  <entry>
    <title>java basis</title>
    <link href="https://yuggu.github.io/2019/05/21/java-basis/"/>
    <id>https://yuggu.github.io/2019/05/21/java-basis/</id>
    <published>2019-05-21T12:23:53.000Z</published>
    <updated>2019-06-05T02:41:55.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><hr><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ol><li>Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random rand= <span class="keyword">new</span> Random(<span class="number">47</span>);<span class="comment">//seed: 47</span></span><br><span class="line"><span class="keyword">int</span> []num=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line"> num[i]=rand.nextInt(<span class="number">100</span>);<span class="comment">//bound: 100</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li>Math.random(),该方法是产生0和1之间（包括0，单不包括1）的一个随机double值。</li></ol><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h4><p>&emsp;这是一种从Java SE5开始的新的更简洁的for语法用于数组与容器，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"><span class="keyword">float</span> f[]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">f[i]=rand.nextFloat();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x : f)</span><br><span class="line">System.out.print(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c ： <span class="string">"An African Swallow"</span>.toCharArray())</span><br><span class="line">System.out.print(c+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">10</span>))<span class="comment">//0..9</span></span><br><span class="line">printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">5</span>,<span class="number">10</span>))<span class="comment">//5..9,range(5,20,3),5..20 step 3</span></span><br><span class="line">printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br></pre></td></tr></table></figure></p><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><h5 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h5><p>&emsp;对象序列化的定义是，将对象转态转化为字节流的过程，可以将其保存到磁盘文件或通过网络发送到任何其他程序，从字节流创建对象的相反的过程称为反序列化，并且创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。（这里可能是这个意思，比如在Java上将数据序列化存入文件中，而用C#又可以将文件中字节流反序列化为原来的数据）</p><p>&emsp;简单的说，把对象转换为字节序列的过程称为对象的序列化。把字节序列恢复为对象的过程称为对象的反序列化。</p><h5 id="具体体现"><a href="#具体体现" class="headerlink" title="具体体现"></a>具体体现</h5><p>&emsp;首先需要使用Serializable关键字实现接口；注意对于存在类的继承关系的接口实现，只需实现父类的接口即可；</p><ol><li>序列化：创建对象输出流，包装一个某种类型的目标输入流，如文件输入流，然后通过对象输入流的writeObject()方法写对象。</li><li>反序列化：创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流，然后通过对象输入流的readObject()方法读取对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//父类序列化</span></span><br><span class="line">    String gender,address,tel,id;</span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//...方法实现省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Assistant</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assistant</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以覆盖形式写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">         oos.writeObject(person);</span><br><span class="line">         oos.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以追加形式多次写入。对象序列化不能向普通文件一样直接追加对象。</p><p>&emsp;在new&ensp;ObjectOutputStream对象的时候，会执行它的构造方法，在构造方法中有一个writeStreamHeader();语句会被执行，这个方法的功能就是在文件中写入文件头。如果你写的方法在一个文件中重复new了ObjectOutputStream对象，则每次执行构造函数的时候都会执行这个方法写上一个文件头。Java默认的对象序列化是每次写入对象都会写入一点头aced 0005（占4个字节），然后每次读取都读完头然后在读内容。解决方法就是先判断文件是否存在。如果不存在，就先创建文件。然后写了第一个对象，也写入了头aced 0005。追加的情况就是当判断文件存在时，把那个4个字节的头aced 0005截取掉，然后在把对象写入到文件。这样就实现了对象序列化的追加。（需要注意的是，并非是每次序列化追加写入都需要减掉4字节，而是每次创建对象流的时候需要减）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> pos=<span class="number">0</span>;<span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">            Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(file.length()&gt;<span class="number">0</span>)</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">            ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="comment">//此处是为了进行序列化内容的追加，而非覆盖</span></span><br><span class="line">                pos = fos.getChannel().position() - <span class="number">4</span>;</span><br><span class="line">                fos.getChannel().truncate(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            Person person=<span class="keyword">new</span> Person();</span><br><span class="line">            person.setId(i);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            &#125;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h5><blockquote><p>transient关键字标识的变量意味着不会被序列化。</p></blockquote><h5 id="输入流的几种常见形式"><a href="#输入流的几种常见形式" class="headerlink" title="输入流的几种常见形式"></a>输入流的几种常见形式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Scanner input_1=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner input_2=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line">        BufferedReader input_3=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/* 读取 */</span></span><br><span class="line">            String path=<span class="string">"D:\\1.txt"</span>;</span><br><span class="line">            File file=<span class="keyword">new</span> File(path);</span><br><span class="line">            InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String line=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 写入*/</span></span><br><span class="line">            File f=<span class="keyword">new</span> File(<span class="string">"D:\\2.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">                f.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(f));</span><br><span class="line">            bw.write(<span class="string">"将这句话写入文件\r\n"</span>);<span class="comment">// \r\n为换行</span></span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型与集合"><a href="#泛型与集合" class="headerlink" title="泛型与集合"></a>泛型与集合</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>&emsp;简单的说迭代器是用来帮助访问集合中的每个元素。所有的集合类（Set、Sequence、Queue，除了Map）都实现了迭代接口Iterable，Iterable接口只有一个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;T&gt;itreator();</span><br></pre></td></tr></table></figure></p><p>&emsp;它返回一个在一组T类型元素上的迭代器，Iterator是一个接口类型，它的方法如下。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">hasNext()</td><td style="text-align:center">如果仍有元素可以迭代，则返回true</td></tr><tr><td style="text-align:center">E next()</td><td style="text-align:center">返回迭代的下一个元素</td></tr><tr><td style="text-align:center">remove()</td><td style="text-align:center">迭代器指向的集合中移除迭代器返回的最后一个元素(可选操作)</td></tr></tbody></table></div><p>&emsp;下面给出利用迭代器访问元素的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;Acount&gt;itreator=accounts.itreator();</span><br><span class="line">Account account=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(itreator.hasNext())&#123;</span><br><span class="line">    account=itreator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;集合实例名为accounts，包含的都是Accout类型的对象。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ol><li>list是有序，可以通过整数索引（从0开始）访问列表中的元素。</li><li>列表通常允许重复的元素。</li><li>list接口提供了特殊的迭代器，称为ListIterator，除了允许Iterator接口提供的正常操作外，该迭代器还允许元素插入和替换，以及双向访问。</li><li>某些实现List接口的列表类，对是否允许null出现在列表中有着不同的规定。</li></ol><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>&emsp;ArrayList是基于数组的，在初始化ArrayList时，会构建空数组，ArrayList是无序的，是按添加顺序的进行排列，但是他有sort方法。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt;arraylist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>&emsp;对于赋值右段的”&lt;&gt;”，编译器可以自动推断出其应具备的类型。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="成员变量与方法"><a href="#成员变量与方法" class="headerlink" title="成员变量与方法"></a>成员变量与方法</h4><ol><li>Java的main方法一样要写在public修饰的类里，<blockquote><p>main方法是JVM（java虚拟机）自动调用</p><p>JVM调用main方法的位置自然不会在某个类中、或某个包中，因此只有当main方法在公有级别上时，才对JVM可见，所以mian方法需要public修饰，</p><p>main方法所在的类也需要public修饰符。</p><p>另外由于main方法是所有程序的入口，也就是main被调用时没有任何对象创建，不通过对象调用某一方法，只有将该方法定义为静态方法，所以main方法是一个静态方法，既需要static修饰。</p><p>JVM对于java程序已经是最底层，由它调用的方法的返回值已经没有任何地方可去，因此，main方法返回值为空，既需用void修饰。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink&quot; title=&quot;随机数&quot;&gt;&lt;/a&gt;随机数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Random rand= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//seed: 47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; []num=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; num[i]=rand.nextInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//bound: 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="https://yuggu.github.io/categories/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/categories/java/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://yuggu.github.io/tags/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux basis</title>
    <link href="https://yuggu.github.io/2019/05/07/linux-basis/"/>
    <id>https://yuggu.github.io/2019/05/07/linux-basis/</id>
    <published>2019-05-07T10:36:56.000Z</published>
    <updated>2019-05-21T12:57:07.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vi与Vim"><a href="#Vi与Vim" class="headerlink" title="Vi与Vim"></a>Vi与Vim</h2><hr><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。</p><h4 id="为何要学vim"><a href="#为何要学vim" class="headerlink" title="为何要学vim"></a>为何要学vim</h4><ul><li><p>vim可视作vi的高级版本；</p></li><li><p>所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；</p></li><li><p>很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；</p><a id="more"></a></li><li><p>vim具有程序编辑的能力，可以主动地以字体颜色辨别语法的正确性，方便程序设计；</p></li><li><p>程序简单，编辑速度块；</p></li></ul><h4 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h4><p>&emsp;<strong>vi分三种模式，一般命令模式、编辑模式、命令行模式。</strong></p><ul><li><p>一般命令模式:以vi打开一个文件即进入该模式，可以进行光标的移动、搜索和替换、删除字符、删除整列、复制整列、粘贴整列，但是不能进行编辑文件内容；</p></li><li><p>编辑模式:按下[i,I,o,O,a,A,r,R]中任意一个则可以从一般命令模式进入编辑模式，之后左下角会出现”INSERT”或”REPLACE”字样，若返回一般命令模式则需按下ESC。</p></li><li><p>命令行模式:输入[:/?]三个中的任一个就可以将光标移动到最下面的一行，你可以进行读取、保存、批量替换字符、退出vi、显示行号等操作。</p></li></ul><h4 id="简易执行"><a href="#简易执行" class="headerlink" title="简易执行"></a>简易执行</h4><p>&emsp;<strong>vi建立文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ /bin/vi welcome.txt</span><br><span class="line"># 在一些操作系统中，由于一般账号默认vi已经被vim替换了，因此需要输入绝对路径来执行才可以。</span><br></pre></td></tr></table></figure></p><p>&emsp;<strong>关于vi或vim的保存与退出</strong><br>&emsp;如果welcome.txt的权限为-r—r—r—，当前登录用户为dmtsai，我们使用vim对此文件内容进行修改，我们然后退出，执行<a href="write&ensp;and&ensp;quit">:wq</a>，但是该文件权限不允许dmtsai进行写入，我们就可以使用[:wq!]进行强制写入。但是需要注意，强制写入是在你的权限可以改变的情况下才成立的，即文件所有者dmtsai可以修改自己权限r—为rw-。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vi与Vim&quot;&gt;&lt;a href=&quot;#Vi与Vim&quot; class=&quot;headerlink&quot; title=&quot;Vi与Vim&quot;&gt;&lt;/a&gt;Vi与Vim&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。&lt;/p&gt;
&lt;h4 id=&quot;为何要学vim&quot;&gt;&lt;a href=&quot;#为何要学vim&quot; class=&quot;headerlink&quot; title=&quot;为何要学vim&quot;&gt;&lt;/a&gt;为何要学vim&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vim可视作vi的高级版本；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yuggu.github.io/categories/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/categories/linux/vim/"/>
    
    
      <category term="linux" scheme="https://yuggu.github.io/tags/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://yuggu.github.io/2019/05/01/Test/"/>
    <id>https://yuggu.github.io/2019/05/01/Test/</id>
    <published>2019-05-01T12:03:24.000Z</published>
    <updated>2019-05-21T12:59:52.268Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article for test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an article for test.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="https://yuggu.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yuggu.github.io/2019/05/01/hello-world/"/>
    <id>https://yuggu.github.io/2019/05/01/hello-world/</id>
    <published>2019-05-01T11:39:59.087Z</published>
    <updated>2019-05-21T12:58:15.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
