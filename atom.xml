<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2019-09-04T08:32:31.696Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[2019宁夏网络赛-A] Maximum Element In A Stack</title>
    <link href="https://yuggu.github.io/2019/09/04/2019%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-A-Maximum-Element-In-A-Stack/"/>
    <id>https://yuggu.github.io/2019/09/04/2019宁夏网络赛-A-Maximum-Element-In-A-Stack/</id>
    <published>2019-09-04T08:30:21.000Z</published>
    <updated>2019-09-04T08:32:31.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41285" target="_blank" rel="noopener">$\text{2019宁夏网络赛-A.Maximum Element In A Stack}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个空的$\text{stack}$，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。</p><p>&emsp;&emsp;输入规格即数据范围：第一行一个$\text{T(T<50)}$，下面每行一组测试样例，包含七个整数$n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq ,p,q,m 10^{9}),sa,sb,sc(10^4 sa,sb,sc 10^6)$，其中$n$是操作的数量，其中关于入栈出栈操作部分代码已给出，如下： <a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></50)}$，下面每行一组测试样例，包含七个整数$n(1\leq></p><p>&emsp;&emsp;对于每个测试样例，输出一行<code>Case #x: y</code>，x代表第x个测试样例，y等于$\oplus^n_{i=1} (i \cdot a_i)$，$a_i​$是第$i$次操作后的最大值。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;关键目标是求出，每次出栈入栈之后的最大值，如果没有出栈操作，仅仅只有入栈操作，那么我们需要一个res以及一个栈s1，在每次入栈元素x之后，使用它更新一下最大值res，但是这里出现了出栈的操作；</p><p>&emsp;&emsp;那么考虑一个出栈操作前后的最大值变化，如果出栈元素不是最大值，那么最大值不变，如果出栈元素是最大值，那么出栈后最大值为没出栈前的次大值，那么我们考虑使用一个单调的栈s2（栈底到栈顶递增）模拟最大值变化，栈s1模拟入栈出栈操作；如果当前操作是入栈元素x，并且x大于等于栈顶元素，那么就让x同时入栈s1、s2，若小于，则让x入栈s1，如果当前操作是出栈操作，比较s1栈顶元素与s2栈顶元素，若相等，说明当前最大元素即为s1栈顶元素，那么同时让s1与s2栈顶元素出栈，不相等则，让s1栈顶元素出栈，当前最大值即为s2栈顶元素。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line">    <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">ll res,cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">5000006</span>], b[<span class="number">5000006</span>];</span><br><span class="line">ll i1, i2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PUSH</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    b[++i2] = x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= a[i1])</span><br><span class="line">        a[++i1] = x;</span><br><span class="line">    res ^= (cnt * a[i1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">POP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(i2 &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i2] == a[i1])</span><br><span class="line">            i2--, i1--;</span><br><span class="line">        <span class="keyword">else</span> i2--;</span><br><span class="line">        res ^= (cnt * a[i1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= t; k++) &#123;</span><br><span class="line">        i1 = i2 = cnt = res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        gen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, k, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41285&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019宁夏网络赛-A.Maximum Element In A Stack}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个空的$\text{stack}$，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;输入规格即数据范围：第一行一个$\text{T(T&lt;50)}$，下面每行一组测试样例，包含七个整数$n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq ,p,q,m 10^{9}),sa,sb,sc(10^4 sa,sb,sc 10^6)$，其中$n$是操作的数量，其中关于入栈出栈操作部分代码已给出，如下：
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="模拟" scheme="https://yuggu.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫基础</title>
    <link href="https://yuggu.github.io/2019/08/29/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <id>https://yuggu.github.io/2019/08/29/Python爬虫基础/</id>
    <published>2019-08-29T07:35:24.000Z</published>
    <updated>2019-09-04T05:58:55.518Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h4><p>&emsp;网络爬虫可以按照指定的规则（网络爬虫的算法）自动浏览或抓取网络中的信息，通过Python可以很轻松地编写爬虫程序或者是脚本。<br>&emsp;如百度的爬虫，它的名字叫做百度蜘蛛，它是百度搜索引擎的一个自动程序。它每天都会在海量的互联网信息中进行爬取，收集并整理互联网上的网页、图片视频等信息。然后当用户在搜索引擎中输入对应的关键字时，百度将从收集的网络信息中找出相关的内容，按照一定的顺序将信息呈现给用户。</p><h4 id="网络爬虫的基本原理"><a href="#网络爬虫的基本原理" class="headerlink" title="网络爬虫的基本原理"></a>网络爬虫的基本原理</h4><a id="more"></a><p>一个通用的网络爬虫基本工作流程如下；<br><img src="https://img-blog.csdnimg.cn/2019070220415970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>获取初始的URL，该URL地址是用户自己指定的初始爬取的网页；</li><li>爬取对应URL地址的网页时，获取新的URL地址；</li><li>将新的URL地址放入URL队列中；</li><li>从URL队列中读取新的URL，然后依据新的URL爬取网页，同时从新的网页中获取新的URL地址，重复上述的爬取过程。</li><li>设置停止条件，即在满足停止条件时，停止爬取。<h4 id="网络爬虫的网络请求"><a href="#网络爬虫的网络请求" class="headerlink" title="网络爬虫的网络请求"></a>网络爬虫的网络请求</h4>&emsp;下面给出三种Python实现HTTP网络请求最常见的3中方式：urllib、urllib3、requests.</li><li><p>urllib模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求获取百度网页内容</span></span><br><span class="line"><span class="keyword">import</span> urllib.request<span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 打开指定需要爬取的网页</span></span><br><span class="line">response=urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">html=response.read()</span><br><span class="line">print(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求实现获取网页信息</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment"># 将数据用urlencode编码处理后，再使用encoding设置为utf-8编码</span></span><br><span class="line">data=bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>:<span class="string">'hello'</span>&#125;),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 打开指定需要爬取的网页</span></span><br><span class="line">response=urllib.request.urlopen(<span class="string">"http://httpbin.org/post"</span>,data=data)</span><br><span class="line">html=response.read()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure></li><li><p>urllib3模块，它用于http客户端的python库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get实现发送网络请求</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="comment"># 创建poolmanager对象，用于处理与线程池的连接以及线程安全的所有细节</span></span><br><span class="line">http=urllib3.PoolManager()</span><br><span class="line"><span class="comment"># 对索要爬取的对象发送请求</span></span><br><span class="line">response=http.request(<span class="string">'get'</span>,<span class="string">'http://blog.csdn.net'</span>)</span><br><span class="line">print(response.data)</span><br><span class="line"><span class="comment"># # post实现获取网络信息的内容</span></span><br><span class="line">response=http.request(<span class="string">'post'</span>,<span class="string">'http://httpbin.org/post'</span>,fields=&#123;<span class="string">'hello'</span>:<span class="string">'world'</span>&#125;)</span><br><span class="line">print(response.data)</span><br></pre></td></tr></table></figure></li><li><p>requests模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response=requests.get(<span class="string">'http://blog.csdn.net'</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.url)</span><br><span class="line">print(response.headers)</span><br><span class="line">print(response.headers)</span><br><span class="line">print(response.history)</span><br><span class="line">print(response.cookies)</span><br><span class="line">print(response.encoding)</span><br><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data=&#123;<span class="string">'world'</span>:<span class="string">'hello'</span>&#125;</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response=requests.get(<span class="string">'http://httpbin.org/post'</span>,data=data)</span><br><span class="line">print(response.content)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h4><p>&emsp;requests是python的第三方模块，它也是目前公认的爬取网页最好的python第三方库，它很简洁，它的信息可以从<code>http://www.python-request.org</code>获取；<br>&emsp;Requests库的get()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=requests.get(url)</span><br></pre></td></tr></table></figure></p><p>&emsp;它构造一个向服务器请求资源的Request，返回一个包含服务器资源的Response对象，response包含了网页爬虫爬取返回的所有内容；完整形式如下<br><code>requests.get(url,params=None,**kwargs)</code><br>&emsp;params为常用参数，**kwargs为其他控制访问访问参数；<br>&emsp;下面给出requests的get方法的源代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, params=None, **kwargs)</span>:</span></span><br><span class="line">kwargs.setdefault(<span class="string">'allow_redirects'</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> request(<span class="string">'get'</span>,url,params=params,**kwargs)</span><br></pre></td></tr></table></figure></p><p>&emsp;我们发现，它的实现用到了requests的request方法，实际上，requests库提供了7个方法，然而包含get的其他六个类似方法的实现，都用到了request方法，<br>&emsp;response的status_code用来检测请求的状态码，如果状态码是200说明访问成功，而非200则表明访问失败；response的常用属性如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">r.status_code</td><td style="text-align:left">http请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td style="text-align:left">r.text</td><td style="text-align:left">http响应内容的字符串形式，即url对应的内容</td></tr><tr><td style="text-align:left">r.encoding</td><td style="text-align:left">从http header中猜测的响应内容编码方式</td></tr><tr><td style="text-align:left">r.apparent_encoding</td><td style="text-align:left">从内容中分析出的响应内容编码方式</td></tr><tr><td style="text-align:left">r.content</td><td style="text-align:left">http响应内容的二进制形式</td></tr></tbody></table></div><p>&emsp;其中，r.encoding是从http的header中猜测内容编码方式，它不是向r.apparent_encoding一样根据内容进行分析编码方式，它相对来说是不准确的，我们要获取网页内容时，我们将它们输出到控制台上，有时编码不正确，可能会获取中文的乱码，所以我们一般需要看encoding与apparent_encoding是否相同；</p><p>request方法<br><code>requests.request(method,url,**kwargs)</code><br>method：请求方式<br><code>r=requests.request(&#39;GET&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;HEAD&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;POST&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;PUT&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;PATCH&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;delete&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;OPTIONS&#39;,url,**kwargs)</code><br>r=requests.request(‘GET’,url,**kwargs)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kv=&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">'GET'</span>,<span class="string">'http://python123.io/ws'</span>,params=kv)</span><br><span class="line">print(r.url)</span><br><span class="line"><span class="comment"># -&gt;http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure></p><p>&emsp;它添加了一个字典，被添加到url中，服务器接受这些参数，并根据这些参数筛选一些数据；<br>&emsp;对于**kwargs来说，它有13种：<br><code>pagrams,data,json,headers,cookies,auth,files,timeout,proxies,allow_redirects,stream,vertify,cert</code></p><h4 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态不是200，引发HTTPError异常,然后抛出</span></span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text        </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url=<span class="string">"http://blog.csdn.net"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h4 id="网络爬虫引用的问题"><a href="#网络爬虫引用的问题" class="headerlink" title="网络爬虫引用的问题"></a>网络爬虫引用的问题</h4><p>&emsp;网络爬虫的尺寸</p><div class="table-container"><table><thead><tr><th style="text-align:left">规模</th><th style="text-align:left">爬取对象</th></tr></thead><tbody><tr><td style="text-align:left">小规模，数据量小，爬取速度不敏感，Requests库&gt;90%</td><td style="text-align:left">爬取网页，玩转网页</td></tr><tr><td style="text-align:left">中规模，数据规模较大，爬取速度敏感，Scrapy库</td><td style="text-align:left">爬取网站，爬取系列网站</td></tr><tr><td style="text-align:left">大规模，搜索引擎，爬取速度关键，如百度、Google，定制开发</td><td style="text-align:left">爬取全网</td></tr></tbody></table></div><p>&emsp;带来的问题</p><ul><li>服务器骚扰：服务器默认按人数约定访问能力，爬虫的访问速度比人快的多，将带来对服务器的额外开销；</li><li>法律风险：服务器上的数据有产权归属，爬虫爬取数据进行牟利将带来法律风险；</li><li>隐私泄露：爬虫可以爬取一些网站上的私人信息，它可以破解简单的访问控制能力，获得保护数据从而泄露个人隐私；</li></ul><h4 id="Robot协议"><a href="#Robot协议" class="headerlink" title="Robot协议"></a>Robot协议</h4><p>&emsp;Robot协议是来告知网络爬虫，该网站哪些页面可以爬取，哪些不可爬取，它在网站的根目下，有些网站没有Robot协议，代表任何爬虫可以爬取任何数据；<br>&emsp;如京东：<code>https://www.jd.com/.robots.txt</code><br>&emsp;它包含两部分User-Agent表示哪些爬虫，Disallowe代表不可爬取的资源；<br>&emsp;网络爬虫自动或人工识别robots.txt，在进行内容爬取；网络其实可以不遵守Robots协议，但是存在法律风险</p><h4 id="请求headers处理"><a href="#请求headers处理" class="headerlink" title="请求headers处理"></a>请求headers处理</h4><p>&emsp;有时在请求一个网页内容时，无论发现是get还是post以及其他请求，都会出现status_code非200的错误，这种错误多为服务器拒绝了您的访问，那是因为这些网页为了防止恶意采集信息，采用了反爬虫设置，即浏览器根据请求的头部信息判断这个请求是浏览器还是一段爬虫程序发送来的；这时候可以通过模拟浏览器的头部信息来访问；如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kv=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125; </span><br><span class="line">response=requests.get(<span class="string">'http://www.amazon.cn/'</span>,headers=kv)</span><br><span class="line">response.encoding=response.apparent_encoding</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h4 id="搜索引擎关键词提交接口"><a href="#搜索引擎关键词提交接口" class="headerlink" title="搜索引擎关键词提交接口"></a>搜索引擎关键词提交接口</h4><p>百度的关键词接口<br><code>http://www.baidu.com/s?wd=keyword</code><br>360的关键词接口<br><code>http://www.so.com/s?q=keyword</code><br>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">kv=&#123;<span class="string">'wd'</span>:<span class="string">'Python'</span>&#125;</span><br><span class="line">r=requests.get(<span class="string">'http://www.baidu.com/s'</span>,params=kv)</span><br><span class="line">print(r.request.url)</span><br><span class="line"><span class="comment"># -&gt;http://www.baidu.com/s?wd=Python</span></span><br></pre></td></tr></table></figure></p><h4 id="网络图片的爬取"><a href="#网络图片的爬取" class="headerlink" title="网络图片的爬取"></a>网络图片的爬取</h4><p><code>https://wx4.sinaimg.cn/mw690/8d05b653ly1g4n0elm7axj20j60b475b.jpg</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">path=<span class="string">'D://abc.jpg'</span>  <span class="comment"># 保存在D盘下，以abc.jpg命名</span></span><br><span class="line">url=<span class="string">'https://wx4.sinaimg.cn/mw690/8d05b653ly1g4n0elm7axj20j60b475b.jpg'</span></span><br><span class="line"><span class="comment"># 以原文件名命名</span></span><br><span class="line"><span class="comment"># roo='D://'</span></span><br><span class="line"><span class="comment"># path=root+url.split('/')[-1]</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line"><span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></p><p>&emsp;首先打开一个文件，将url返回的内容写到这个路径中，r.content返回的是二进制形式;<br>&emsp;类似的还有视频，动画、音频文件等等的爬取</p><h4 id="IP地址查询"><a href="#IP地址查询" class="headerlink" title="IP地址查询"></a>IP地址查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://m.ip138.com/ip.asp?ip="</span></span><br><span class="line">r.requests.get(url+<span class="string">'202.204.80.112'</span>)</span><br><span class="line">r.encoding=r.apparent_coding</span><br><span class="line">print(r.text[<span class="number">-500</span>:])</span><br></pre></td></tr></table></figure><h4 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h4><h5 id="BeautifulSoup的使用-1"><a href="#BeautifulSoup的使用-1" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 第一个参数是html，第二个是解析器</span></span><br><span class="line">soup=BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html,parser'</span>)</span><br></pre></td></tr></table></figure><p>在一个html文件中，对应一个标签树，而一个标签树对应一个BeautifulSoup类，即一个BeautifuLSoup对应应一个HTML/XML文档的全部内容；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup=BeautifulSoup(<span class="string">'&lt;html&gt;data&lt;/html&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup2=BeautifulSoup(open(<span class="string">'D://demo.html'</span>),<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure></p><p>获取一个html网页源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># print(soup.contents)</span></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure></p><h5 id="BeautifulSoup库解析器"><a href="#BeautifulSoup库解析器" class="headerlink" title="BeautifulSoup库解析器"></a>BeautifulSoup库解析器</h5><p><img src="https://img-blog.csdnimg.cn/20190704132455969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="BeautifulSoup类的基本元素"><a href="#BeautifulSoup类的基本元素" class="headerlink" title="BeautifulSoup类的基本元素"></a>BeautifulSoup类的基本元素</h5><p><img src="https://img-blog.csdnimg.cn/20190704132526378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>这里需要注意的是，对于beautiful.tag来说，比如soup.a它是只返回html中的第一个a标签内的内容</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">tag=soup.a</span><br><span class="line">print(tag)</span><br><span class="line">print(tag.name)             <span class="comment"># a标签的名字</span></span><br><span class="line">print(tag.parent.name)      <span class="comment"># a标签的父亲</span></span><br><span class="line">print(tag.parent.parent.name)<span class="comment"># a的父亲的父亲</span></span><br><span class="line">print(tag.attrs)</span><br><span class="line">print(tag.attrs[<span class="string">'class'</span>])</span><br><span class="line">print(tag.attrs[<span class="string">'href'</span>])</span><br><span class="line">print(type(tag))            <span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line">print(tag.string)</span><br><span class="line">print(soup.p.string)</span><br><span class="line">print(type(soup.p.string))  <span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line">newsoup=BeautifulSoup(<span class="string">'&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">print(newsoup.b.string)</span><br><span class="line">print(type(newsoup.b.string))   <span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></span><br><span class="line">print(newsoup.p.string)</span><br><span class="line">print(type(newsoup.p.string))   <span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># -&gt;&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span></span><br><span class="line"><span class="comment"># -&gt;a</span></span><br><span class="line"><span class="comment"># -&gt;p</span></span><br><span class="line"><span class="comment"># -&gt;body</span></span><br><span class="line"><span class="comment"># -&gt;&#123;'href': 'http://www.icourse163.org/course/BIT-268001', 'class': ['py1'], 'id': 'link1'&#125;</span></span><br><span class="line"><span class="comment"># -&gt;['py1']</span></span><br><span class="line"><span class="comment"># -&gt;http://www.icourse163.org/course/BIT-268001</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;Basic Python</span></span><br><span class="line"><span class="comment"># -&gt;The demo python introduces several python courses.</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;This is a comment</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.Comment'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;This is not a comment</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.NavigableString'&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190704141033714.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190704141223913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure></p><h4 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190704141612578.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:<span class="comment"># a为一种标签类型，对先辈标签遍历</span></span><br><span class="line"><span class="keyword">if</span> parent <span class="keyword">is</span> Node:</span><br><span class="line">print(parent)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(parent.name)</span><br><span class="line"><span class="comment"># -&gt;p</span></span><br><span class="line"><span class="comment"># -&gt;body</span></span><br><span class="line"><span class="comment"># -&gt;html</span></span><br><span class="line"><span class="comment"># -&gt;[document]</span></span><br></pre></td></tr></table></figure></p><h5 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h5><p><img src="https://img-blog.csdnimg.cn/20190704141749574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="平行遍历发生在同一个父节点下的个节点间"><a href="#平行遍历发生在同一个父节点下的个节点间" class="headerlink" title="平行遍历发生在同一个父节点下的个节点间"></a><code>平行遍历发生在同一个父节点下的个节点间</code></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:<span class="comment"># 遍历后序节点</span></span><br><span class="line">print(sibling)</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:<span class="comment"># 遍历前续节点</span></span><br><span class="line">print(sibling)</span><br></pre></td></tr></table></figure><h5 id="爬取天猫Ipad商品信息"><a href="#爬取天猫Ipad商品信息" class="headerlink" title="爬取天猫Ipad商品信息"></a>爬取天猫Ipad商品信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span> :</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        reponse = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> reponse.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> reponse.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInf</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern =re.compile(<span class="string">'&lt;div class="product.*?&lt;a href="(.*?)".*?&lt;/b&gt;(.*?)&lt;/em&gt;.*?title="(.*?)".*?&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?&lt;/div&gt;'</span>, re.S)</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'href'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'price'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'shop'</span>:item[<span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'3.txt'</span>, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(content, ensure_ascii = <span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url =<span class="string">'https://list.tmall.com/search_product.htm?q=ipad&amp;type=p&amp;vmarket=&amp;spm=875.7931836%2FB.a2227oh.d100&amp;from=mallfp..pc_1_searchbutton'</span></span><br><span class="line">    html = getHtml(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> getInf(html):</span><br><span class="line">        print(item)</span><br><span class="line">        writeFile(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这里自己第一次亲自，根据html，写出了正则表达式。<br>待续···</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是网络爬虫&quot;&gt;&lt;a href=&quot;#什么是网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;什么是网络爬虫&quot;&gt;&lt;/a&gt;什么是网络爬虫&lt;/h4&gt;&lt;p&gt;&amp;emsp;网络爬虫可以按照指定的规则（网络爬虫的算法）自动浏览或抓取网络中的信息，通过Python可以很轻松地编写爬虫程序或者是脚本。&lt;br&gt;&amp;emsp;如百度的爬虫，它的名字叫做百度蜘蛛，它是百度搜索引擎的一个自动程序。它每天都会在海量的互联网信息中进行爬取，收集并整理互联网上的网页、图片视频等信息。然后当用户在搜索引擎中输入对应的关键字时，百度将从收集的网络信息中找出相关的内容，按照一定的顺序将信息呈现给用户。&lt;/p&gt;
&lt;h4 id=&quot;网络爬虫的基本原理&quot;&gt;&lt;a href=&quot;#网络爬虫的基本原理&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫的基本原理&quot;&gt;&lt;/a&gt;网络爬虫的基本原理&lt;/h4&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yuggu.github.io/categories/Python/"/>
    
      <category term="爬虫" scheme="https://yuggu.github.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://yuggu.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yuggu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据库之范式</title>
    <link href="https://yuggu.github.io/2019/08/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E8%8C%83%E5%BC%8F/"/>
    <id>https://yuggu.github.io/2019/08/28/数据库之范式/</id>
    <published>2019-08-28T10:06:16.000Z</published>
    <updated>2019-08-28T10:09:15.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库之范式"><a href="#数据库之范式" class="headerlink" title="数据库之范式"></a>数据库之范式</h3><hr><p>&emsp;&emsp;范式来自英文$\text{Normal form}$，简称$\text{NF}$。设计关系<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">数据库</a>时，遵从不同的规范<a href="https://baike.baidu.com/item/%E8%A6%81%E6%B1%82/3598753" target="_blank" rel="noopener">要求</a>，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入、删除和更新操作异常。反之则是乱七八糟。<br><a id="more"></a><br>&emsp;&emsp;在介绍范式之前先介绍一些必要的概念。</p><h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>&emsp;&emsp;在一个关系模式R(U)下，X、Y是U的子集。若对于R(U)的任意一个关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，即由X可唯一确定Y，则有X函数确定Y或Y函数依赖于X，记作X→Y。</p><p>&emsp;&emsp;若X→Y，并且对于X的任意一个真子集Z，都得不到Y函数依赖于X，则有Y对于X完全函数依赖，否则成Y对X部分函数依赖。若X→Y（Y→X不成立），且Y→Z，则有Z对X传递函数依赖。<br>(以下范式均按照个人理解给出阐述)</p><h4 id="码"><a href="#码" class="headerlink" title="码"></a>码</h4><p>&emsp;&emsp;候选码码是可以唯一标识关系的属性或属性组（又称为码），可从候选码中任选一个当作主码，而包含在任意一个码中的属性称为主属性，不包含在任意一个码中的属性称非主属性。</p><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>&emsp;&emsp;即$\text{1NF}$在关系模型中，对于数据库中的每一列均是不能再分割的。</p><html><table>    <tr>        <td rowspan="2" colspan="1"><b>商品编号</b></td>        <td rowspan="2" colspan="1"><b>商品名</b></td>        <td rowspan="1" colspan="2"><b>销售</b></td>        </tr>    <tr>        <td><b>数量/个</b></td>        <td><b>单价/元<b></b></b></td>    </tr>    <tr>        <td>1</td>        <td>牙膏</td>        <td>20</td>        <td>10</td>    </tr>    <tr>        <td>2</td>        <td>矿泉水</td>        <td>50</td>        <td>2</td>    </tr></table></html><p>&emsp;&emsp;如该关系即不满足第一范式，销售属性可再分，修改后如下。修改后即满足第一范式。</p><div class="table-container"><table><thead><tr><th>商品编号</th><th>商品名</th><th>销售数量/个</th><th>销售单价/元</th></tr></thead><tbody><tr><td>1</td><td>牙膏</td><td>20</td><td>10</td></tr><tr><td>2</td><td>矿泉水</td><td>50</td><td>2</td></tr></tbody></table></div><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>&emsp;&emsp;即$\text{2NF}$，$\text{2NF}$在$\text{1NF}$的基础上消除了非主属性对于码的部分函数依赖；如关系R(A,B,C,D)，其中(A,B)→C、A→D，那么(A,B)可以唯一标识整个关系，所以(A,B)即是码，且存在非主属性D对于码(A,B)的部分函数依赖，所以它不满足第二范式，满足第一范式，所以为$\text{1NF}$。</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>&emsp;&emsp;即$\text{3NF}$，$\text{2NF}$在$\text{2NF}$的基础上消除了非主属性对于码的传递函数依赖；如关系R(A,B,C)，其中A→B，B→C，则码为A，存在非主属性C对于码A的传递函数依赖，所以它不满足第三范式，且满足$\text{2NF}$，所以为$\text{2NF}$。</p><h4 id="text-BC-范式"><a href="#text-BC-范式" class="headerlink" title="$\text{BC}$范式"></a>$\text{BC}$范式</h4><p>&emsp;&emsp;即$\text{BCNF}$，$\text{BCNF}$在$\text{3NF}$的基础上消除了主属性对于码的传递函数依赖和部分函数依赖；如关系R(A,B,C)，其中(A,B)→C，且C→A，那么显然的(A,B)、(C,B)是码，那么A、B、C均是主属性，存在主属性C对于码(A,B)的依赖，且它满足$\text{3NF}$，所以它是$\text{3NF}$。</p><p><strong>待续···</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库之范式&quot;&gt;&lt;a href=&quot;#数据库之范式&quot; class=&quot;headerlink&quot; title=&quot;数据库之范式&quot;&gt;&lt;/a&gt;数据库之范式&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;范式来自英文$\text{Normal form}$，简称$\text{NF}$。设计关系&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据库&lt;/a&gt;时，遵从不同的规范&lt;a href=&quot;https://baike.baidu.com/item/%E8%A6%81%E6%B1%82/3598753&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;要求&lt;/a&gt;，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入、删除和更新操作异常。反之则是乱七八糟。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://yuggu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="范式" scheme="https://yuggu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%8C%83%E5%BC%8F/"/>
    
    
      <category term="数据库" scheme="https://yuggu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="范式" scheme="https://yuggu.github.io/tags/%E8%8C%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu - P1352] 没有上司的舞会</title>
    <link href="https://yuggu.github.io/2019/07/23/Luogu-P1352-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/"/>
    <id>https://yuggu.github.io/2019/07/23/Luogu-P1352-没有上司的舞会/</id>
    <published>2019-07-23T14:39:30.000Z</published>
    <updated>2019-07-23T14:44:21.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1352" target="_blank" rel="noopener">$\text{Luogu - P1352}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;$\text{Ural}$大学有$N$名职员，编号$1\dots N$，它们的关系是一棵以校长为根的树，父节点即是子结点的直接上司。每个职员有一个快乐指数$H_i$。现在这里有一场宴会，但是没有职员愿意和直接上司一起参会，在此条件下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，输出这个最大值。</p><p>&emsp;&emsp;数据范围：$1\le N \le 6000,-128\le H_i\le 127$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;在树上设计动态规划算法时，一般以结点从深到浅（子树从小到大）的顺序作为$\text{DP}$的阶段，$\text{DP}$的状态表示时，第一维通常为结点编号（表示以该节点为根的子树），而第二维为从子树中选出的满足某种条件的结点的个数，第三维为选择或者不选择当前结点（所以它有$0$和$1$两种取值），有时第二维或者第三维可以省略。大多时候采用递归形式实现树形动态规划（所以$dfs$这时很好用），对于每个结点，先递归在它的每个子节点上$dp$，回溯时，从子结点向结点x进行状态转移。<br>&emsp;&emsp;对于本题来说，以使用$dp[i][0]$表示从以$i$为根中的子树中选择一部分结点，并且$i$不选，$dp[i][1]$表示选$i$；<br>&emsp;&emsp;如果结点$x$不选，那么它的子节点可以选也可以不选，则有</p><script type="math/tex; mode=display">dp[x][0]=\displaystyle \sum_{y\in Son(x)}\max\{dp[y][0],dp[y][1]\}</script><p>&emsp;&emsp;$Son(x)$表示$x$的子节点集合，如果$x$选，那么它的子节点一定不能选，则有：</p><script type="math/tex; mode=display">dp[x][1]=H_x+\displaystyle \sum_{y\in Son(x)}dp[y][0]</script><p>&emsp;&emsp;此题我们还需要找出这棵树的根。另外，树形$dp$是一种很优美的动态规划。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line">    <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, r[<span class="number">6009</span>], vis[<span class="number">6009</span>], f[<span class="number">6009</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[<span class="number">6009</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = r[u];</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        f[u][<span class="number">0</span>] += max(f[v][<span class="number">1</span>], f[v][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        vis[a] = <span class="number">1</span>;</span><br><span class="line">        vec[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{Luogu - P1352}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;$\text{Ural}$大学有$N$名职员，编号$1\dots N$，它们的关系是一棵以校长为根的树，父节点即是子结点的直接上司。每个职员有一个快乐指数$H_i$。现在这里有一场宴会，但是没有职员愿意和直接上司一起参会，在此条件下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，输出这个最大值。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\le N \le 6000,-128\le H_i\le 127$.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[CodeForces - 607B] Zuma</title>
    <link href="https://yuggu.github.io/2019/07/23/CF-607B-Zuma/"/>
    <id>https://yuggu.github.io/2019/07/23/CF-607B-Zuma/</id>
    <published>2019-07-23T05:47:49.000Z</published>
    <updated>2019-07-23T05:48:58.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hihocoder.com/problemset/problem/1323" target="_blank" rel="noopener">$\text{CodeForces - 607B}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;这是一个类似于祖玛的游戏，你有一个长度为$\text{N}$的序列$c$，序列中一个联通块可以消去（即删除，类似消一消，只能一个联通块一个联通块的消去），一个联通块即是一个连续的子序列，且该子序列是回文的，一个联通块被消去就不存在了，问最少需要消几次。</p><p>&emsp;&emsp;数据范围：$1\le N \le 500,1\le c_i\le N$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；这道题的原型是括号序列；<br>&emsp;&emsp;对于一个序列，对于它的区间长度为$len$的阶段，区间长度小于$len$的阶段的所有状态，我们已经求出来了，之后对于阶段$len$，我们枚举起始点$i、j$，对于区间$[i,j]$，需要枚举划分点$k$，如果找到满足$c[i]==c[k]$的$k$，那么就有$dp[i][j]=\min{dp[i][j],dp[i][k]+dp[k+1][j]}$，另外我们还需要考虑一种特殊情况，对于区间长度为$2$，如果是回文串，我们需要额外判断一下。<br>&emsp;&emsp;对于初始状态$dp[i][i]=0$，其他为$\infty$.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">509</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i], dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> (a[i] == a[k])</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][k - <span class="number">1</span>] + dp[k + <span class="number">1</span>][j] + (i + <span class="number">1</span> == k));</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hihocoder.com/problemset/problem/1323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{CodeForces - 607B}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是一个类似于祖玛的游戏，你有一个长度为$\text{N}$的序列$c$，序列中一个联通块可以消去（即删除，类似消一消，只能一个联通块一个联通块的消去），一个联通块即是一个连续的子序列，且该子序列是回文的，一个联通块被消去就不存在了，问最少需要消几次。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\le N \le 500,1\le c_i\le N$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[hihoCoder - 1323] 回文字符串</title>
    <link href="https://yuggu.github.io/2019/07/23/HC-1323-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://yuggu.github.io/2019/07/23/HC-1323-回文字符串/</id>
    <published>2019-07-23T05:01:21.000Z</published>
    <updated>2019-07-23T05:02:43.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hihocoder.com/problemset/problem/1323" target="_blank" rel="noopener">$\text{hihoCoder - 1323}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给定一个字符串$\text S$ ，最少需要几次增删改操作可以把$\text S$变成一个回文字符串？一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。输出最少的操作次数。</p><p>&emsp;&emsp;数据范围：字符串$\text S$。$\text S$的长度不超过$100$, 只包含$\text{A-Z}$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；也是经典的最少操作次数变成回文串的问题；对于<br>&emsp;&emsp;$dp[i][j]$表示$[i,j]$区间的子串变成回文串最少操作次数，对于一个串$bab$，我们已经知道区间长度为$2$的所有状态，对于区间长度为$3$的阶段，此时$s[i]==s[j]$，那么显然有$dp[i][j]=dp[i+1][j-1]$，对于一个串$bba$，此时$s[i]!=s[j]$，此时来说，我们只需要修改$s[i]$为$s[j]$或者修改$s[j]$为$s[i]$即可，所以我们有$dp[i][j]=\min{dp[i+1][j]+1,dp[i][j-1]+1}$。<br>&emsp;&emsp;初始状态$dp[i][i]=0$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, max;</span><br><span class="line">&#125; tree[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].max = max(tree[x &lt;&lt; <span class="number">1</span>].max, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = max(tree[x].max, val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)update(x &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line"><span class="keyword">else</span> update(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> le = tree[x].l, ri = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= le &amp;&amp; ri &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> maxm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">10005</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i &amp;&amp; j &lt;= m; j++)</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i][<span class="number">0</span>], dp[i - j][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hihocoder.com/problemset/problem/1323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{hihoCoder - 1323}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给定一个字符串$\text S$ ，最少需要几次增删改操作可以把$\text S$变成一个回文字符串？一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。输出最少的操作次数。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：字符串$\text S$。$\text S$的长度不超过$100$, 只包含$\text{A-Z}$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 3661] Running</title>
    <link href="https://yuggu.github.io/2019/07/23/POJ-3661-Running/"/>
    <id>https://yuggu.github.io/2019/07/23/POJ-3661-Running/</id>
    <published>2019-07-23T04:24:44.000Z</published>
    <updated>2019-07-23T04:53:55.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=3661" target="_blank" rel="noopener">$\text{POJ - 3661}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;$\text{Bessie}$在一个直赛道上跑步，他需要跑$\text{N}$分钟，其中第$i$分钟他能跑$d_i$米，同时他还有一个最大疲劳值$M$，开始的时候它的疲劳值为$0$，跑步的时候每一分钟他都可以选择跑与不跑，如果跑的话，他的疲劳值就会增加$1$，如果选择休息，他的疲劳值就会下降，但是他只能等疲劳值下降到$0$才能再次跑，现在你需要求出$\text N$分钟之后，他的疲劳值为$0$时他能跑的最大距离是多少。</p><p>&emsp;&emsp;数据范围：$1\leq \text{M} \leq 500$，$1\le d_i\le 1000$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;$dp[i][j]$表示跑完$i$分钟，疲劳值为$j$时所能跑的最大距离；那么对于一个状态$dp[i][j]$，他有可能从两种状态转移过来，一种是第$i$分钟跑了，对于这种状态有$dp[i][j]=dp[i-1][j-1]+a[i]$，另一种情况是没跑，对于没跑的情况，有可能$i-1$分钟也没跑，第$i$分钟没跑也只是一个中间状态，这样就无法求解，所以我们需要考虑$dp[i][0]$，$dp[i][0]$一定是由$dp[i-j][j]$转移而来的（对于休息的情况，直接考虑开始休息和结束休息，中间不考虑）；<br>&emsp;&emsp;即对于第$i$分钟休息和跑的情况分开考虑。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, max;</span><br><span class="line">&#125; tree[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].max = max(tree[x &lt;&lt; <span class="number">1</span>].max, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = max(tree[x].max, val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)update(x &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line"><span class="keyword">else</span> update(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> le = tree[x].l, ri = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= le &amp;&amp; ri &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> maxm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">10005</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i &amp;&amp; j &lt;= m; j++)</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i][<span class="number">0</span>], dp[i - j][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3661&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 3661}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;$\text{Bessie}$在一个直赛道上跑步，他需要跑$\text{N}$分钟，其中第$i$分钟他能跑$d_i$米，同时他还有一个最大疲劳值$M$，开始的时候它的疲劳值为$0$，跑步的时候每一分钟他都可以选择跑与不跑，如果跑的话，他的疲劳值就会增加$1$，如果选择休息，他的疲劳值就会下降，但是他只能等疲劳值下降到$0$才能再次跑，现在你需要求出$\text N$分钟之后，他的疲劳值为$0$时他能跑的最大距离是多少。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{M} \leq 500$，$1\le d_i\le 1000$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 3280] Cheapest Palindrome</title>
    <link href="https://yuggu.github.io/2019/07/23/POJ-3280-Cheapest-Palindrome/"/>
    <id>https://yuggu.github.io/2019/07/23/POJ-3280-Cheapest-Palindrome/</id>
    <published>2019-07-23T03:39:24.000Z</published>
    <updated>2019-07-23T04:53:55.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=3280" target="_blank" rel="noopener">$\text{POJ - 3280}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个长度为$\text{M}$的由小写字母组成的字符串$s$，你希望通过插入字符或者删除字符的操作来得到一个回文串，你希望操作次数最少；同时对于$26$种字符中的字符$i$，有对应的删除该字符需要的花费$cost_1$和插入该字符需要的$cost_2$，所以你希望通过插入和删除操作并且花费尽量少的钱来获取一个回文串。</p><p>&emsp;&emsp;数据范围：$1\leq \text{M} \leq 500$，$0\le cost\le 10000$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;通过对字符串的插入、删除、修改来获取一<br>个回文串，然后求最少次数，这是一类比较典型且常见的区间$dp$题目；<br>&emsp;&emsp;区间$dp$即是小区间状态到大区间状态的合并或者说转移，一般我们都会枚举小区间，然后枚举起始点；<br>&emsp;&emsp;如对于一个串$aba$，假设区间长度为$2$的阶段的所有状态我们已经求出来了，那么此时区间长度为$3$，对于这个串来说，我们肯定需要看它的两个短点$i$与$j$，$s[i]==s[j]$，我们就得出了$dp[i][j]=dp[i+1][j-1]$，这是很显然的；那么对于一个串$aab$，如果我们也已经求出来了它的区间长度为$2$的状态，那么此时对于区间长度为$3$的状态，我们观察它的$s[i]!=s[j]$，如果同时把这两个字符都给删掉或者给两个字符均插入一个匹配的字符，那么这显然是糟糕的选择，所以我们不能这样做；最终我们可以得出$dp[i][j]=min(dp[i+1][j]+cost[i],dp[i][j-1]+cost[j])$<br>&emsp;&emsp;对于价格来说，其实都是一样的，不论插入和删除本质上都是一样的，所以我们仅需要考虑价格即可，对于每个字符，使用价格低的操作，初始状态$dp[i][i]=0$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">300</span>], dp[<span class="number">2005</span>][<span class="number">2004</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">char</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; x &gt;&gt; y;</span><br><span class="line">a[t] = min(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= m; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = INF;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[j - <span class="number">1</span>])</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][j] + a[s[i - <span class="number">1</span>]]);</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][j - <span class="number">1</span>] + a[s[j - <span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3280&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 3280}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个长度为$\text{M}$的由小写字母组成的字符串$s$，你希望通过插入字符或者删除字符的操作来得到一个回文串，你希望操作次数最少；同时对于$26$种字符中的字符$i$，有对应的删除该字符需要的花费$cost_1$和插入该字符需要的$cost_2$，所以你希望通过插入和删除操作并且花费尽量少的钱来获取一个回文串。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{M} \leq 500$，$0\le cost\le 10000$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[LightOJ - 1422] Halloween Costumes</title>
    <link href="https://yuggu.github.io/2019/07/22/LightOJ-1422-Halloween-Costumes/"/>
    <id>https://yuggu.github.io/2019/07/22/LightOJ-1422-Halloween-Costumes/</id>
    <published>2019-07-22T05:34:12.000Z</published>
    <updated>2019-07-22T07:32:31.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://vjudge.net/problem/LightOJ-1422" target="_blank" rel="noopener">$\text{LightOJ - 1422}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;这里有$n$次宴会，每个宴会有一个特定的编号，每个宴会需要一件特定衣服，$n$次宴会有顺序，衣服可以套着穿，一件衣服脱下后不能在穿，问最少需要买多少件衣服，如宴会为1、2、1、2，开始买衣服1，然后买衣服2，第三个宴会为1，此时身上是有宴会1的衣服的，不过外面还有一件宴会2的衣服，所以需要脱掉衣服2，第四个宴会为2，此时需要再买一件；<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；从左往右考虑，对于一件衣服，可以选择脱与不脱，贪心的考虑肯定是不脱较好，这题需要从右往左进行枚举；<br>&emsp;&emsp;对于区间$dp$来说，是枚举区间长度，及起始点的，然后找划分点作为决策；对于区间$[l,r]$我们需要求它的最少需要购买的衣服，我们此时肯定需要去看$[l+1,r]$的状态（如看区间$[l+1,r]$有没有出现$l$这件衣服，如果有，我们可能会思考是不是不需要再多购买一件了，类似这样的想法），所以我们就需要在$[l+1,r]$区间内寻找划分点$k(a[l]==a[k])$作为状态转移决策，就有了动态转移方程$dp[i][j]=min(dp[i][j],dp[i+1][k]+dp[k+1][j])(a[i]==a[k])$.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, dp[<span class="number">130</span>][<span class="number">130</span>], a[<span class="number">130</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; " ";</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> (a[k] == a[i])</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][k] + dp[k + <span class="number">1</span>][j]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++cnt, dp[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/LightOJ-1422&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{LightOJ - 1422}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里有$n$次宴会，每个宴会有一个特定的编号，每个宴会需要一件特定衣服，$n$次宴会有顺序，衣服可以套着穿，一件衣服脱下后不能在穿，问最少需要买多少件衣服，如宴会为1、2、1、2，开始买衣服1，然后买衣服2，第三个宴会为1，此时身上是有宴会1的衣服的，不过外面还有一件宴会2的衣服，所以需要脱掉衣服2，第四个宴会为2，此时需要再买一件；&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[CF - 1132F] Clear the String</title>
    <link href="https://yuggu.github.io/2019/07/21/CF-1132F-Clear-the-String/"/>
    <id>https://yuggu.github.io/2019/07/21/CF-1132F-Clear-the-String/</id>
    <published>2019-07-21T08:19:40.000Z</published>
    <updated>2019-07-22T07:33:49.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/1132/F" target="_blank" rel="noopener">$\text{CF - 1132F}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个长度为$\text{N}$的由小写字母组成的字符串$s$，你需要对它进行删除操作，你每次可以删除一个连续的、只含一种字母的子串，现在问你最少需要多少次可以把它含有的字符全部删除掉。<br>&emsp;&emsp;数据范围：$1\leq \text{N} \leq 500$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;首先$dp[i][j]$表示把$[i, j]$的字符全部删除需要进行的最少操作次数，正常情况下，我们需要枚举区间长度、起点及终点；对于一个区间$[l,r]$,，如果$s[l]==s[r]$，那么$dp[l][r]$，一定等于$dp[l+1][r]$、$dp[l][r-1]$二者中较小者，如果$s[l]!=s[r]$，我们就需要枚举划分点作为转移决策，有转移方程：$dp[i][j]=\displaystyle \min_{i\leq k &lt; j}{dp[i][k]+dp[k+1][j]}$。<br>&emsp;&emsp;对于$dp[i][j]$的初值应该初始化为$i-j+1$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, dp[<span class="number">504</span>][<span class="number">503</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[j - <span class="number">1</span>])</span><br><span class="line">dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/1132/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{CF - 1132F}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个长度为$\text{N}$的由小写字母组成的字符串$s$，你需要对它进行删除操作，你每次可以删除一个连续的、只含一种字母的子串，现在问你最少需要多少次可以把它含有的字符全部删除掉。&lt;br&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{N} \leq 500$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 1651] Multiplication Puzzle</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/</id>
    <published>2019-07-20T10:59:22.000Z</published>
    <updated>2019-07-22T07:34:00.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=1651" target="_blank" rel="noopener">$\text{POJ - 1651}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp; 给你一个长度为$n$的序列$a$，现在你将要把，序列$a$中除开头和结尾外的所有元素都删除掉,你每次删除一个数$a_i$时，你将会得到的分数为$a_{i-1}*$$a_i*a_{i+1}$，你需要获得最少的分数，问这个分数最小为多少。<br>&emsp;&emsp;比如对于序列${10,1,50,20,5}$，你依次删除$50、20、1$，得到的分数分别为$1*50*20、1*20*5、10*1*5$，总共为$1150$，这样你就能获得最少的分数。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，依旧是枚举区间长度与起点，求出小区间的最优决策，然后得到大区间的解。状态转移方程为：<script type="math/tex">dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+a[i]*a[k]*a[j])</script><br>&emsp;&emsp;$dp[i][j]$即为区间$[i,j]$所能获得的最小分数。<br>&emsp;&emsp;另外，如果是获得最大分数，只需要将数组初始化为0即可。<br>&emsp;&emsp;区间$dp$一般基本套路即是枚举区间长度与起点，然后求接小区间解，进而合并得到大区间的解，关键是转移方程。</p></blockquote><h3 id="区间-dp-基本模板"><a href="#区间-dp-基本模板" class="headerlink" title="区间$dp$基本模板"></a>区间$dp$基本模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>;len&lt;=n;len++)&#123;<span class="comment">//枚举长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j+len&lt;=n+<span class="number">1</span>;j++)&#123;<span class="comment">//枚举起点，ends&lt;=n</span></span><br><span class="line">            <span class="keyword">int</span> ends = j+len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = j;i&lt;ends;i++)&#123;<span class="comment">//枚举分割点，更新小区间最优解</span></span><br><span class="line">                dp[j][ends] = min(dp[j][ends],dp[j][i]+dp[i+<span class="number">1</span>][ends]+something);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dp[<span class="number">130</span>][<span class="number">130</span>], a[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i],dp[i][i] = dp[i - <span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]+ a[i] * a[k] * a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1651&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 1651}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp; 给你一个长度为$n$的序列$a$，现在你将要把，序列$a$中除开头和结尾外的所有元素都删除掉,你每次删除一个数$a_i$时，你将会得到的分数为$a_{i-1}*$$a_i*a_{i+1}$，你需要获得最少的分数，问这个分数最小为多少。&lt;br&gt;&amp;emsp;&amp;emsp;比如对于序列${10,1,50,20,5}$，你依次删除$50、20、1$，得到的分数分别为$1*50*20、1*20*5、10*1*5$，总共为$1150$，这样你就能获得最少的分数。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 2955] Brackets</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/</id>
    <published>2019-07-20T07:00:19.000Z</published>
    <updated>2019-07-23T02:55:09.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=2955" target="_blank" rel="noopener">$\text{POJ - 2955}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：</p><p>&emsp;&ensp;$1$.&ensp;空的括号序列是合法的；<br>&emsp;&ensp;$2$.&ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；<br>&emsp;&ensp;$3$.&ensp;如果$a、b$是合法的，那么$ab$也是合法的；<br>&emsp;&ensp;$4$.&ensp;其他括号序列都是不合法的；<br> <a id="more"></a></p><p>&emsp;&emsp;括号序列长度$\text N$，$1\leq \text{N}\leq100$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，对于某个序列，如$[xxx]oooo$，它被分成两部分，$xxx$和$oooo$；<br>&emsp;&emsp;设$dp[i][j]$表示$[i,j]$之间的最长合法括号子序列的长度，那么如果$[i+1,j]$内没有与$i$匹配的括号，则$dp[i][j]=dp[i+1][j]$，若存在一个$k$与之匹配，那么$dp[i][j]=\max{dp[i+1][j],dp[i+1][k-1]+dp[k+1][j]+2}$($i$与$k$匹配)，区间长度从小到大枚举，最终$dp[1][\text{N}]$即是答案。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"end"</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> n = s.size();</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n ;len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> ((s[i - <span class="number">1</span>] == <span class="string">'('</span> &amp;&amp; s[k - <span class="number">1</span>] ==<span class="string">')'</span>) || (s[i - <span class="number">1</span>] == <span class="string">'['</span> &amp;&amp; s[k - <span class="number">1</span>] == <span class="string">']'</span>))</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i + <span class="number">1</span>][k - <span class="number">1</span>] + dp[k + <span class="number">1</span>][j] + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 2955}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;ensp;$1$.&amp;ensp;空的括号序列是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$2$.&amp;ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；&lt;br&gt;&amp;emsp;&amp;ensp;$3$.&amp;ensp;如果$a、b$是合法的，那么$ab$也是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$4$.&amp;ensp;其他括号序列都是不合法的；&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu - P3379] 最近公共祖先</title>
    <link href="https://yuggu.github.io/2019/07/19/Luogu-P3379-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://yuggu.github.io/2019/07/19/Luogu-P3379-最近公共祖先/</id>
    <published>2019-07-19T14:36:54.000Z</published>
    <updated>2019-07-20T07:59:57.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3379" target="_blank" rel="noopener">$\text{Luogu - P3379}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;裸的$\text{LCA}$，这里先给出$\text{Tarjan}$的写法，实际上这里用$\text{Tarjan}$是不太好的，一开始没加入读入优化，有些数据过大直接$\text{TLE}$了，加了之后才$\text{AC}$，倍增和$\text{ST}$表之后再补。</p></blockquote><h3 id="关于-text-Tarjan"><a href="#关于-text-Tarjan" class="headerlink" title="关于$\text{Tarjan}$"></a>关于$\text{Tarjan}$</h3><blockquote><p>&emsp;&emsp;$\text{Tarjan}$的实现是这样的:首先沿着根节点$dfs$访问与它相邻的节点，并标记这个点，这样当访问完某个子树的某个节点之后，用数组标记它的父节点，当还没有向上回溯的时候，开始遍历查询(读入的时候把询问存起来，正所谓离线)，查询与当前子树的根节点即当前节点(假设当前节点为$u$)有关的询问$(u,v)$，如果与当前节点(即$u$)查询有关的查询的另一个节点(即$v$)已经在之前$dfs$过程中被访问过了，那么说明这个查询的$lca$就是节点$v$所在子树的根节点，因为你是$dfs$到$v$，然后$dfs$到$u$的，在你从$v$到$u$的这个过程中是肯定经过$lca$的；<br>&emsp;&emsp;<br>&emsp;&emsp;注意，虽然说这里是一个子树，但他并没有形成集合上的树(就是假如用$f[i]$存这颗树，但这个形成树的过程就是$dfs$到叶子节点，然后开始向上回溯的时候开始建立联系开始的，你一开始从根节点向下遍历的时候，实际上是不存在的，仅仅是一个图而不是树，建议模拟一下，画个图，把$f[i]$的具体变化看一下)，只是存在边的联系，在访问完整个图后，才有了树；<br>&emsp;&emsp;建立画个图照着代码模拟一下；</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,next,lca;</span><br><span class="line">&#125;Edge;</span><br><span class="line"><span class="comment">//e用来存边，query存查询</span></span><br><span class="line">Edge e[<span class="number">2</span>*maxn],query[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt,head[maxn],head1[maxn],cnt1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[cnt].u=u;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    e[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">    e[cnt].u=v;</span><br><span class="line">    e[cnt].v=u;</span><br><span class="line"><span class="comment">/*e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    e[cnt].next=head[v];</span><br><span class="line">    head[v]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用来存query即存查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    query[cnt1].u=u;</span><br><span class="line">    query[cnt1].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    query[cnt1].next=head1[u];</span><br><span class="line">    head1[u]=cnt1++;</span><br><span class="line">    query[cnt1].u=v;</span><br><span class="line">    query[cnt1].v=u;</span><br><span class="line"><span class="comment">/*  e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    query[cnt1].next=head1[v];</span><br><span class="line">    head1[v]=cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span>&amp;&amp;c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,f[maxn],vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    f[x]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            f[v]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[x];i!=<span class="number">-1</span>;i=query[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=query[i].v;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            query[i].lca=find(v);</span><br><span class="line">            query[i^<span class="number">1</span>].lca=f[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// std::ios::sync_with_stdio(false);</span></span><br><span class="line">    n=read(),m=read(),s=read();</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(head1,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head1));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        add(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        addp(u,v);</span><br><span class="line">    &#125; </span><br><span class="line">    tarjan(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;query[i].lca&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3379&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{Luogu - P3379}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/LCA/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>[HDU - 1874] 畅通工程续</title>
    <link href="https://yuggu.github.io/2019/07/19/HDU-1874-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD/"/>
    <id>https://yuggu.github.io/2019/07/19/HDU-1874-畅通工程续/</id>
    <published>2019-07-19T14:09:44.000Z</published>
    <updated>2019-07-19T14:34:17.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="noopener">$\text{HDU - 1874}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;求单源最短路径，这里给出$\text{Dijkstra}$和$\text{Bellman_ford}$算法的两种实现模板。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (int)1e9+7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,s,t,u,v,in;</span><br><span class="line"><span class="comment">//dis存储最短距离，book用来标记某一点是否已确定其最短路径并存入dis里，cost存储两点是否有边及边的权值</span></span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">205</span>],book[<span class="number">205</span>],cost[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="comment">//初始化dis与book</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">dis[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从s出发到其他所有点的最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">in = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> minn = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp; minn &gt; dis[i]) &#123;</span><br><span class="line">minn = dis[i];</span><br><span class="line">in=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有更新，说明全部点的最短路已找到并保存</span></span><br><span class="line"><span class="keyword">if</span> (minn == INF)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//book[in]=1来标记in这个点的最短路径已找到并存在DIS[I]里</span></span><br><span class="line">book[in] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//如果dis[i]没有被确定保存的已是最短路径并且I与in之间存在边连接并且可已更新dis数组</span></span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp;cost[i][in]!=INF&amp;&amp; dis[i] &gt;dis[in] + cost[i][in]) &#123;</span><br><span class="line">dis[i] = dis[in] + cost[i][in];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</span><br><span class="line"><span class="comment">//需要将cost初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">200</span>; j++)</span><br><span class="line">cost[i][j] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u&gt;&gt;v&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(cost[u][v]&gt;x)</span><br><span class="line">cost[v][u] = cost[u][v]=x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (dis[t] == INF ? <span class="number">-1</span> : dis[t] )&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1874&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{HDU - 1874}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[51nod - 1021] 石子归并</title>
    <link href="https://yuggu.github.io/2019/07/19/51nod-1021-%E7%9F%B3%E5%AD%90%E5%BD%92%E5%B9%B6/"/>
    <id>https://yuggu.github.io/2019/07/19/51nod-1021-石子归并/</id>
    <published>2019-07-19T12:48:55.000Z</published>
    <updated>2019-07-23T05:48:59.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1021" target="_blank" rel="noopener">$\text{51nod - 1021}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;有$N$堆石子排成一排，其中第$i$堆石子的质量为$A_i$，每次都可以选择其中相邻的两堆石子合并成一堆，形成的新石子堆的重量以及消耗的体力都是两堆石子的重量之和。求把全部$N$堆石子合成一堆最少需要消耗多少体力。$1\leq N\leq 300$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一个区间$dp$入门题目。<br>&emsp;&emsp;若最初的第$l$堆石子和第$r$堆石子被合并成一堆，则说明$l$~$r$之间的每堆石子也已经被合并，这样$l$和$r$才有可能相邻。因此，在任意时刻，任意一堆石子均可以用一个闭区间$[l, r]$来描述，表示这堆石子是由最初的第$l$~$r$堆石子合并而成的，其重量为$\sum_{i=l}^r A_i$。另外一定存在一个整数$k(l\leq k&lt;r)$，在这堆石子形成之前，现有第$l$~$k$堆石子（闭区间$[l, r]$）被合并成一堆，第$k+1$~$r$堆石子（闭区间$[k+1, r]$）被合并成一堆，然后这两堆石子才合并成$[l, r]$。<br>&emsp;&emsp;对应到动态规划中，就意味着两个长度较小的区间上的信息向一个更长的区间发生了转移，划分点$k$就是转移的决策，自然地，应该把区间$len$作为$DP$的阶段，区间长度可以由左右端点表示出，我们可以使用左右端点表示$DP$的状态。<br>&emsp;&emsp;$dp[l, r]$表示把最初的第$l$堆到第$r$堆合并到一堆，需要消耗的最少体力。状态转移方程如下：<script type="math/tex">dp[l,\ r]=\displaystyle \min_{l\leq k<r}\{dp[l,\ k]+dp[k+1,\ r]\}+\sum_{i=l}^rA_i</script><br>&emsp;&emsp;$dp[l][l]=A_l$，其余为$\infty$，最终结果为$dp[1, N]$，对于$\sum_{i=l}^rA_i$可用前缀和计算。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, dp[<span class="number">305</span>][<span class="number">305</span>], A[<span class="number">450</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">A[i] = A[i - <span class="number">1</span>] + x;</span><br><span class="line">dp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++) &#123;</span><br><span class="line"><span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">dp[l][r] = min(dp[l][r], dp[l][k] + dp[k + <span class="number">1</span>][r] + A[r] - A[l - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.51nod.com/Challenge/Problem.html#problemId=1021&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{51nod - 1021}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有$N$堆石子排成一排，其中第$i$堆石子的质量为$A_i$，每次都可以选择其中相邻的两堆石子合并成一堆，形成的新石子堆的重量以及消耗的体力都是两堆石子的重量之和。求把全部$N$堆石子合成一堆最少需要消耗多少体力。$1\leq N\leq 300$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>背包模板</title>
    <link href="https://yuggu.github.io/2019/07/18/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/"/>
    <id>https://yuggu.github.io/2019/07/18/背包模板/</id>
    <published>2019-07-18T11:53:31.000Z</published>
    <updated>2019-07-19T14:02:53.996Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;01背包模板，复杂度$O(V*N)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= w[i]; j--)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一个常数优化如下<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> bound = max(V - sum&#123;w[i]...w[n]&#125;, v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= bound, j--)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;完全背包模板，复杂度$O(V*N)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= V; j++)</span><br><span class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;二进制拆分多重背包模板，复杂度$O(V*\sum log(p[i]))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = min(number[i], V / w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; num &gt; <span class="number">0</span>; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; num) k = num;</span><br><span class="line">        num -= k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= w[i] * k; j--)</span><br><span class="line">            f[j] = max(f[j], f[j - w[i] * k] + v[i] * k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;单调队列优化多重背包模板，复杂度$O(V*N)$，外层还需要嵌套一个$1…n$的循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p：某类物品数量，w：某类物品花费，v：某类物品价值，V:商品总价值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiPack</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> w, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123; <span class="comment">//j为w的所有组</span></span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = j, i = <span class="number">0</span>; k &lt;= V / <span class="number">2</span>; k += w, i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = f[k] - i * v;</span><br><span class="line">            <span class="keyword">while</span> (head &lt;= tail <span class="keyword">and</span> r &gt;= q[tail].v) tail--;</span><br><span class="line">            q[++tail] = node(i, r);</span><br><span class="line">            <span class="keyword">while</span> (q[head].id &lt; i - p) head++; <span class="comment">//需要的物品数目</span></span><br><span class="line">            f[k] = q[head].v + i * v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;01背包模板，复杂度$O(V*N)$&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;​&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = V; j &amp;gt;= w[i]; j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f[j] = max(f[j], f[j - w[i]] + v[i]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一个常数优化如下&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="背包" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E8%83%8C%E5%8C%85/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>连接不了https://account.jetbrains.com/ 网站或者idea通过帐号激活失败</title>
    <link href="https://yuggu.github.io/2019/06/05/%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86https-account-jetbrains-com-%E7%BD%91%E7%AB%99%E6%88%96%E8%80%85idea%E9%80%9A%E8%BF%87%E5%B8%90%E5%8F%B7%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5/"/>
    <id>https://yuggu.github.io/2019/06/05/连接不了https-account-jetbrains-com-网站或者idea通过帐号激活失败/</id>
    <published>2019-06-05T04:11:58.000Z</published>
    <updated>2019-06-05T04:25:52.200Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;使用学生邮箱申请jetbrains时，发现进不去<a href="https://account.jetbrains.com/" target="_blank" rel="noopener">https://account.jetbrains.com/</a> 发现不是被墙的原因，最后发现可能是以前破解idea时使用注册码时修改了hosts文件。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/hosts</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><p>&emsp;进入C:\Windows\System32\drivers\etc，打开hosts文件将<code>0.0.0.0 account.jetbrains.com</code>注释掉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;使用学生邮箱申请jetbrains时，发现进不去&lt;a href=&quot;https://account.jetbrains.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://account.jetbrains.com/&lt;/a&gt; 发现不是被墙的原因，最后发现可能是以前破解idea时使用注册码时修改了hosts文件。&lt;/p&gt;
&lt;h4 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h4&gt;&lt;h5 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim/etc/hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="jetbrains" scheme="https://yuggu.github.io/tags/jetbrains/"/>
    
  </entry>
  
  <entry>
    <title>java basis</title>
    <link href="https://yuggu.github.io/2019/05/21/java-basis/"/>
    <id>https://yuggu.github.io/2019/05/21/java-basis/</id>
    <published>2019-05-21T12:23:53.000Z</published>
    <updated>2019-07-22T07:32:34.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><hr><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ol><li>Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random rand= <span class="keyword">new</span> Random(<span class="number">47</span>);<span class="comment">//seed: 47</span></span><br><span class="line"><span class="keyword">int</span> []num=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">     num[i]=rand.nextInt(<span class="number">100</span>);<span class="comment">//bound: 100</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li>Math.random(),该方法是产生0和1之间（包括0，单不包括1）的一个随机double值。</li></ol><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h4><p>&emsp;这是一种从Java SE5开始的新的更简洁的for语法用于数组与容器，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"><span class="keyword">float</span> f[]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">  f[i]=rand.nextFloat();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x : f)</span><br><span class="line">  System.out.print(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c ： <span class="string">"An African Swallow"</span>.toCharArray())</span><br><span class="line">  System.out.print(c+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">10</span>))<span class="comment">//0..9</span></span><br><span class="line">  printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">5</span>,<span class="number">10</span>))<span class="comment">//5..9,range(5,20,3),5..20 step 3</span></span><br><span class="line">  printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br></pre></td></tr></table></figure></p><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><h5 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h5><p>&emsp;对象序列化的定义是，将对象转态转化为字节流的过程，可以将其保存到磁盘文件或通过网络发送到任何其他程序，从字节流创建对象的相反的过程称为反序列化，并且创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。（这里可能是这个意思，比如在Java上将数据序列化存入文件中，而用C#又可以将文件中字节流反序列化为原来的数据）</p><p>&emsp;简单的说，把对象转换为字节序列的过程称为对象的序列化。把字节序列恢复为对象的过程称为对象的反序列化。</p><h5 id="具体体现"><a href="#具体体现" class="headerlink" title="具体体现"></a>具体体现</h5><p>&emsp;首先需要使用Serializable关键字实现接口；注意对于存在类的继承关系的接口实现，只需实现父类的接口即可；</p><ol><li>序列化：创建对象输出流，包装一个某种类型的目标输入流，如文件输入流，然后通过对象输入流的writeObject()方法写对象。</li><li>反序列化：创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流，然后通过对象输入流的readObject()方法读取对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//父类序列化</span></span><br><span class="line">    String gender,address,tel,id;</span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//...方法实现省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Assistant</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assistant</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以覆盖形式写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">         oos.writeObject(person);</span><br><span class="line">         oos.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以追加形式多次写入。对象序列化不能向普通文件一样直接追加对象。</p><p>&emsp;在new&ensp;ObjectOutputStream对象的时候，会执行它的构造方法，在构造方法中有一个writeStreamHeader();语句会被执行，这个方法的功能就是在文件中写入文件头。如果你写的方法在一个文件中重复new了ObjectOutputStream对象，则每次执行构造函数的时候都会执行这个方法写上一个文件头。Java默认的对象序列化是每次写入对象都会写入一点头aced 0005（占4个字节），然后每次读取都读完头然后在读内容。解决方法就是先判断文件是否存在。如果不存在，就先创建文件。然后写了第一个对象，也写入了头aced 0005。追加的情况就是当判断文件存在时，把那个4个字节的头aced 0005截取掉，然后在把对象写入到文件。这样就实现了对象序列化的追加。（需要注意的是，并非是每次序列化追加写入都需要减掉4字节，而是每次创建对象流的时候需要减）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> pos=<span class="number">0</span>;<span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">            Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(file.length()&gt;<span class="number">0</span>)</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">            ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="comment">//此处是为了进行序列化内容的追加，而非覆盖</span></span><br><span class="line">                pos = fos.getChannel().position() - <span class="number">4</span>;</span><br><span class="line">                fos.getChannel().truncate(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            Person person=<span class="keyword">new</span> Person();</span><br><span class="line">            person.setId(i);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            &#125;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h5><blockquote><p>transient关键字标识的变量意味着不会被序列化。</p></blockquote><h5 id="输入流的几种常见形式"><a href="#输入流的几种常见形式" class="headerlink" title="输入流的几种常见形式"></a>输入流的几种常见形式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Scanner input_1=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner input_2=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line">        BufferedReader input_3=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/* 读取 */</span></span><br><span class="line">            String path=<span class="string">"D:\\1.txt"</span>;</span><br><span class="line">            File file=<span class="keyword">new</span> File(path);</span><br><span class="line">            InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String line=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 写入*/</span></span><br><span class="line">            File f=<span class="keyword">new</span> File(<span class="string">"D:\\2.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">                f.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(f));</span><br><span class="line">            bw.write(<span class="string">"将这句话写入文件\r\n"</span>);<span class="comment">// \r\n为换行</span></span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型与集合"><a href="#泛型与集合" class="headerlink" title="泛型与集合"></a>泛型与集合</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>&emsp;简单的说迭代器是用来帮助访问集合中的每个元素。所有的集合类（Set、Sequence、Queue，除了Map）都实现了迭代接口Iterable，Iterable接口只有一个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;T&gt;itreator();</span><br></pre></td></tr></table></figure></p><p>&emsp;它返回一个在一组T类型元素上的迭代器，Iterator是一个接口类型，它的方法如下。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">hasNext()</td><td style="text-align:center">如果仍有元素可以迭代，则返回true</td></tr><tr><td style="text-align:center">E next()</td><td style="text-align:center">返回迭代的下一个元素</td></tr><tr><td style="text-align:center">remove()</td><td style="text-align:center">迭代器指向的集合中移除迭代器返回的最后一个元素(可选操作)</td></tr></tbody></table></div><p>&emsp;下面给出利用迭代器访问元素的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;Acount&gt;itreator=accounts.itreator();</span><br><span class="line">Account account=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(itreator.hasNext())&#123;</span><br><span class="line">    account=itreator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;集合实例名为accounts，包含的都是Accout类型的对象。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ol><li>list是有序，可以通过整数索引（从0开始）访问列表中的元素。</li><li>列表通常允许重复的元素。</li><li>list接口提供了特殊的迭代器，称为ListIterator，除了允许Iterator接口提供的正常操作外，该迭代器还允许元素插入和替换，以及双向访问。</li><li>某些实现List接口的列表类，对是否允许null出现在列表中有着不同的规定。</li></ol><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>&emsp;ArrayList是基于数组的，在初始化ArrayList时，会构建空数组，ArrayList是无序的，是按添加顺序的进行排列，但是他有sort方法。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt;arraylist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>&emsp;对于赋值右段的”&lt;&gt;”，编译器可以自动推断出其应具备的类型。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="成员变量与方法"><a href="#成员变量与方法" class="headerlink" title="成员变量与方法"></a>成员变量与方法</h4><ol><li>Java的main方法一样要写在public修饰的类里，<blockquote><p>main方法是JVM（java虚拟机）自动调用</p><p>JVM调用main方法的位置自然不会在某个类中、或某个包中，因此只有当main方法在公有级别上时，才对JVM可见，所以mian方法需要public修饰，</p><p>main方法所在的类也需要public修饰符。</p><p>另外由于main方法是所有程序的入口，也就是main被调用时没有任何对象创建，不通过对象调用某一方法，只有将该方法定义为静态方法，所以main方法是一个静态方法，既需要static修饰。</p><p>JVM对于java程序已经是最底层，由它调用的方法的返回值已经没有任何地方可去，因此，main方法返回值为空，既需用void修饰。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink&quot; title=&quot;随机数&quot;&gt;&lt;/a&gt;随机数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Random rand= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//seed: 47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; []num=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     num[i]=rand.nextInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//bound: 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="https://yuggu.github.io/categories/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/categories/java/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://yuggu.github.io/tags/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux basis</title>
    <link href="https://yuggu.github.io/2019/05/07/linux-basis/"/>
    <id>https://yuggu.github.io/2019/05/07/linux-basis/</id>
    <published>2019-05-07T10:36:56.000Z</published>
    <updated>2019-07-23T02:55:25.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vi与Vim"><a href="#Vi与Vim" class="headerlink" title="Vi与Vim"></a>Vi与Vim</h2><hr><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。</p><h4 id="为何要学vim"><a href="#为何要学vim" class="headerlink" title="为何要学vim"></a>为何要学vim</h4><ul><li><p>vim可视作vi的高级版本；</p></li><li><p>所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；</p></li><li><p>很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；</p><a id="more"></a></li><li><p>vim具有程序编辑的能力，可以主动地以字体颜色辨别语法的正确性，方便程序设计；</p></li><li><p>程序简单，编辑速度块；</p></li></ul><h4 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h4><p>&emsp;<strong>vi分三种模式，一般命令模式、编辑模式、命令行模式。</strong></p><ul><li><p>一般命令模式:以vi打开一个文件即进入该模式，可以进行光标的移动、搜索和替换、删除字符、删除整列、复制整列、粘贴整列，但是不能进行编辑文件内容；</p></li><li><p>编辑模式:按下[i,I,o,O,a,A,r,R]中任意一个则可以从一般命令模式进入编辑模式，之后左下角会出现”INSERT”或”REPLACE”字样，若返回一般命令模式则需按下ESC。</p></li><li><p>命令行模式:输入[:/?]三个中的任一个就可以将光标移动到最下面的一行，你可以进行读取、保存、批量替换字符、退出vi、显示行号等操作。</p></li></ul><h4 id="简易执行"><a href="#简易执行" class="headerlink" title="简易执行"></a>简易执行</h4><p>&emsp;<strong>vi建立文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ /bin/vi welcome.txt</span><br><span class="line"># 在一些操作系统中，由于一般账号默认vi已经被vim替换了，因此需要输入绝对路径来执行才可以。</span><br></pre></td></tr></table></figure></p><p>&emsp;<strong>关于vi或vim的保存与退出</strong><br>&emsp;如果welcome.txt的权限为-r—r—r—，当前登录用户为dmtsai，我们使用vim对此文件内容进行修改，我们然后退出，执行<a href="write&ensp;and&ensp;quit">:wq</a>，但是该文件权限不允许dmtsai进行写入，我们就可以使用[:wq!]进行强制写入。但是需要注意，强制写入是在你的权限可以改变的情况下才成立的，即文件所有者dmtsai可以修改自己权限r—为rw-。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vi与Vim&quot;&gt;&lt;a href=&quot;#Vi与Vim&quot; class=&quot;headerlink&quot; title=&quot;Vi与Vim&quot;&gt;&lt;/a&gt;Vi与Vim&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。&lt;/p&gt;
&lt;h4 id=&quot;为何要学vim&quot;&gt;&lt;a href=&quot;#为何要学vim&quot; class=&quot;headerlink&quot; title=&quot;为何要学vim&quot;&gt;&lt;/a&gt;为何要学vim&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vim可视作vi的高级版本；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yuggu.github.io/categories/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/categories/linux/vim/"/>
    
    
      <category term="linux" scheme="https://yuggu.github.io/tags/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://yuggu.github.io/2019/05/01/Test/"/>
    <id>https://yuggu.github.io/2019/05/01/Test/</id>
    <published>2019-05-01T12:03:24.000Z</published>
    <updated>2019-05-21T12:59:52.268Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article for test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an article for test.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="https://yuggu.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
