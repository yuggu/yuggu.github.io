<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2019-06-05T02:41:55.283Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java basis</title>
    <link href="https://yuggu.github.io/2019/05/21/java-basis/"/>
    <id>https://yuggu.github.io/2019/05/21/java-basis/</id>
    <published>2019-05-21T12:23:53.000Z</published>
    <updated>2019-06-05T02:41:55.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><hr><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ol><li>Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random rand= <span class="keyword">new</span> Random(<span class="number">47</span>);<span class="comment">//seed: 47</span></span><br><span class="line"><span class="keyword">int</span> []num=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line"> num[i]=rand.nextInt(<span class="number">100</span>);<span class="comment">//bound: 100</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li>Math.random(),该方法是产生0和1之间（包括0，单不包括1）的一个随机double值。</li></ol><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h4><p>&emsp;这是一种从Java SE5开始的新的更简洁的for语法用于数组与容器，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"><span class="keyword">float</span> f[]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">f[i]=rand.nextFloat();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x : f)</span><br><span class="line">System.out.print(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c ： <span class="string">"An African Swallow"</span>.toCharArray())</span><br><span class="line">System.out.print(c+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">10</span>))<span class="comment">//0..9</span></span><br><span class="line">printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : range(<span class="number">5</span>,<span class="number">10</span>))<span class="comment">//5..9,range(5,20,3),5..20 step 3</span></span><br><span class="line">printnb(c+<span class="string">" "</span>);</span><br><span class="line">print();</span><br></pre></td></tr></table></figure></p><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><h5 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h5><p>&emsp;对象序列化的定义是，将对象转态转化为字节流的过程，可以将其保存到磁盘文件或通过网络发送到任何其他程序，从字节流创建对象的相反的过程称为反序列化，并且创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。（这里可能是这个意思，比如在Java上将数据序列化存入文件中，而用C#又可以将文件中字节流反序列化为原来的数据）</p><p>&emsp;简单的说，把对象转换为字节序列的过程称为对象的序列化。把字节序列恢复为对象的过程称为对象的反序列化。</p><h5 id="具体体现"><a href="#具体体现" class="headerlink" title="具体体现"></a>具体体现</h5><p>&emsp;首先需要使用Serializable关键字实现接口；注意对于存在类的继承关系的接口实现，只需实现父类的接口即可；</p><ol><li>序列化：创建对象输出流，包装一个某种类型的目标输入流，如文件输入流，然后通过对象输入流的writeObject()方法写对象。</li><li>反序列化：创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流，然后通过对象输入流的readObject()方法读取对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//父类序列化</span></span><br><span class="line">    String gender,address,tel,id;</span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//...方法实现省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Assistant</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assistant</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以覆盖形式写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">         oos.writeObject(person);</span><br><span class="line">         oos.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;序列化并以追加形式多次写入。对象序列化不能向普通文件一样直接追加对象。</p><p>&emsp;在new&ensp;ObjectOutputStream对象的时候，会执行它的构造方法，在构造方法中有一个writeStreamHeader();语句会被执行，这个方法的功能就是在文件中写入文件头。如果你写的方法在一个文件中重复new了ObjectOutputStream对象，则每次执行构造函数的时候都会执行这个方法写上一个文件头。Java默认的对象序列化是每次写入对象都会写入一点头aced 0005（占4个字节），然后每次读取都读完头然后在读内容。解决方法就是先判断文件是否存在。如果不存在，就先创建文件。然后写了第一个对象，也写入了头aced 0005。追加的情况就是当判断文件存在时，把那个4个字节的头aced 0005截取掉，然后在把对象写入到文件。这样就实现了对象序列化的追加。（需要注意的是，并非是每次序列化追加写入都需要减掉4字节，而是每次创建对象流的时候需要减）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssistantInformationInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> pos=<span class="number">0</span>;<span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">            Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            File file=<span class="keyword">new</span> File(<span class="string">"D://t1.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(file.length()&gt;<span class="number">0</span>)</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">            ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="comment">//此处是为了进行序列化内容的追加，而非覆盖</span></span><br><span class="line">                pos = fos.getChannel().position() - <span class="number">4</span>;</span><br><span class="line">                fos.getChannel().truncate(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            Person person=<span class="keyword">new</span> Person();</span><br><span class="line">            person.setId(i);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            &#125;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h5><blockquote><p>transient关键字标识的变量意味着不会被序列化。</p></blockquote><h5 id="输入流的几种常见形式"><a href="#输入流的几种常见形式" class="headerlink" title="输入流的几种常见形式"></a>输入流的几种常见形式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Scanner input_1=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner input_2=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line">        BufferedReader input_3=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/* 读取 */</span></span><br><span class="line">            String path=<span class="string">"D:\\1.txt"</span>;</span><br><span class="line">            File file=<span class="keyword">new</span> File(path);</span><br><span class="line">            InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String line=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 写入*/</span></span><br><span class="line">            File f=<span class="keyword">new</span> File(<span class="string">"D:\\2.txt"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">                f.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(f));</span><br><span class="line">            bw.write(<span class="string">"将这句话写入文件\r\n"</span>);<span class="comment">// \r\n为换行</span></span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型与集合"><a href="#泛型与集合" class="headerlink" title="泛型与集合"></a>泛型与集合</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>&emsp;简单的说迭代器是用来帮助访问集合中的每个元素。所有的集合类（Set、Sequence、Queue，除了Map）都实现了迭代接口Iterable，Iterable接口只有一个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;T&gt;itreator();</span><br></pre></td></tr></table></figure></p><p>&emsp;它返回一个在一组T类型元素上的迭代器，Iterator是一个接口类型，它的方法如下。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">hasNext()</td><td style="text-align:center">如果仍有元素可以迭代，则返回true</td></tr><tr><td style="text-align:center">E next()</td><td style="text-align:center">返回迭代的下一个元素</td></tr><tr><td style="text-align:center">remove()</td><td style="text-align:center">迭代器指向的集合中移除迭代器返回的最后一个元素(可选操作)</td></tr></tbody></table></div><p>&emsp;下面给出利用迭代器访问元素的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Itreator&lt;Acount&gt;itreator=accounts.itreator();</span><br><span class="line">Account account=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(itreator.hasNext())&#123;</span><br><span class="line">    account=itreator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;集合实例名为accounts，包含的都是Accout类型的对象。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ol><li>list是有序，可以通过整数索引（从0开始）访问列表中的元素。</li><li>列表通常允许重复的元素。</li><li>list接口提供了特殊的迭代器，称为ListIterator，除了允许Iterator接口提供的正常操作外，该迭代器还允许元素插入和替换，以及双向访问。</li><li>某些实现List接口的列表类，对是否允许null出现在列表中有着不同的规定。</li></ol><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>&emsp;ArrayList是基于数组的，在初始化ArrayList时，会构建空数组，ArrayList是无序的，是按添加顺序的进行排列，但是他有sort方法。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt;arraylist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>&emsp;对于赋值右段的”&lt;&gt;”，编译器可以自动推断出其应具备的类型。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="成员变量与方法"><a href="#成员变量与方法" class="headerlink" title="成员变量与方法"></a>成员变量与方法</h4><ol><li>Java的main方法一样要写在public修饰的类里，<blockquote><p>main方法是JVM（java虚拟机）自动调用</p><p>JVM调用main方法的位置自然不会在某个类中、或某个包中，因此只有当main方法在公有级别上时，才对JVM可见，所以mian方法需要public修饰，</p><p>main方法所在的类也需要public修饰符。</p><p>另外由于main方法是所有程序的入口，也就是main被调用时没有任何对象创建，不通过对象调用某一方法，只有将该方法定义为静态方法，所以main方法是一个静态方法，既需要static修饰。</p><p>JVM对于java程序已经是最底层，由它调用的方法的返回值已经没有任何地方可去，因此，main方法返回值为空，既需用void修饰。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink&quot; title=&quot;随机数&quot;&gt;&lt;/a&gt;随机数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Random使用，bound即上界，seed即随机数种子，代表时间，多次执行程序，Random产生的序列始终是一个序列。（网上又说以47为随机数种子产生随机数的随即率最大，对这句话不是很理解）&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Random rand= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//seed: 47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; []num=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; num[i]=rand.nextInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//bound: 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="https://yuggu.github.io/categories/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/categories/java/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://yuggu.github.io/tags/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux basis</title>
    <link href="https://yuggu.github.io/2019/05/07/linux-basis/"/>
    <id>https://yuggu.github.io/2019/05/07/linux-basis/</id>
    <published>2019-05-07T10:36:56.000Z</published>
    <updated>2019-05-21T12:57:07.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vi与Vim"><a href="#Vi与Vim" class="headerlink" title="Vi与Vim"></a>Vi与Vim</h2><hr><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。</p><h4 id="为何要学vim"><a href="#为何要学vim" class="headerlink" title="为何要学vim"></a>为何要学vim</h4><ul><li><p>vim可视作vi的高级版本；</p></li><li><p>所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；</p></li><li><p>很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；</p><a id="more"></a></li><li><p>vim具有程序编辑的能力，可以主动地以字体颜色辨别语法的正确性，方便程序设计；</p></li><li><p>程序简单，编辑速度块；</p></li></ul><h4 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h4><p>&emsp;<strong>vi分三种模式，一般命令模式、编辑模式、命令行模式。</strong></p><ul><li><p>一般命令模式:以vi打开一个文件即进入该模式，可以进行光标的移动、搜索和替换、删除字符、删除整列、复制整列、粘贴整列，但是不能进行编辑文件内容；</p></li><li><p>编辑模式:按下[i,I,o,O,a,A,r,R]中任意一个则可以从一般命令模式进入编辑模式，之后左下角会出现”INSERT”或”REPLACE”字样，若返回一般命令模式则需按下ESC。</p></li><li><p>命令行模式:输入[:/?]三个中的任一个就可以将光标移动到最下面的一行，你可以进行读取、保存、批量替换字符、退出vi、显示行号等操作。</p></li></ul><h4 id="简易执行"><a href="#简易执行" class="headerlink" title="简易执行"></a>简易执行</h4><p>&emsp;<strong>vi建立文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ /bin/vi welcome.txt</span><br><span class="line"># 在一些操作系统中，由于一般账号默认vi已经被vim替换了，因此需要输入绝对路径来执行才可以。</span><br></pre></td></tr></table></figure></p><p>&emsp;<strong>关于vi或vim的保存与退出</strong><br>&emsp;如果welcome.txt的权限为-r—r—r—，当前登录用户为dmtsai，我们使用vim对此文件内容进行修改，我们然后退出，执行<a href="write&ensp;and&ensp;quit">:wq</a>，但是该文件权限不允许dmtsai进行写入，我们就可以使用[:wq!]进行强制写入。但是需要注意，强制写入是在你的权限可以改变的情况下才成立的，即文件所有者dmtsai可以修改自己权限r—为rw-。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vi与Vim&quot;&gt;&lt;a href=&quot;#Vi与Vim&quot; class=&quot;headerlink&quot; title=&quot;Vi与Vim&quot;&gt;&lt;/a&gt;Vi与Vim&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;vi及vim是linux下的文本编辑器，其他的还有emacs、pico、joe等。&lt;/p&gt;
&lt;h4 id=&quot;为何要学vim&quot;&gt;&lt;a href=&quot;#为何要学vim&quot; class=&quot;headerlink&quot; title=&quot;为何要学vim&quot;&gt;&lt;/a&gt;为何要学vim&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vim可视作vi的高级版本；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的Unix-like都有内置的vi文本编辑器，其他的文本编辑器则不一定会存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多软件的编辑接口都会主动调用vi(crontab、visudo、edquota等)；&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yuggu.github.io/categories/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/categories/linux/vim/"/>
    
    
      <category term="linux" scheme="https://yuggu.github.io/tags/linux/"/>
    
      <category term="vim" scheme="https://yuggu.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://yuggu.github.io/2019/05/01/Test/"/>
    <id>https://yuggu.github.io/2019/05/01/Test/</id>
    <published>2019-05-01T12:03:24.000Z</published>
    <updated>2019-05-21T12:59:52.268Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article for test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an article for test.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="https://yuggu.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yuggu.github.io/2019/05/01/hello-world/"/>
    <id>https://yuggu.github.io/2019/05/01/hello-world/</id>
    <published>2019-05-01T11:39:59.087Z</published>
    <updated>2019-05-21T12:58:15.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
