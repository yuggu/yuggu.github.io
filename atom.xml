<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2020-06-06T11:14:11.281Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么要学习</title>
    <link href="https://yuggu.github.io/2020/06/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yuggu.github.io/2020/06/06/为什么要学习/</id>
    <published>2020-06-06T11:07:37.000Z</published>
    <updated>2020-06-06T11:14:11.281Z</updated>
    
    <content type="html"><![CDATA[<center><strong>我们为什么要学习</strong></center><p>  我们为什么要学习，相信这是每个人从幼儿园开始就纠缠一生的问题；有的人觉得不需要学习，所以辍学了；有的人想明白了，所以走上了学霸的道路；然而更多的人没想明白，但也没办法，只是被迫学习，效果一般，而且还学的很痛苦，相信我们都遇见过这些人；说到为什么要学习这个问题，相信不同的人会给出不同的答案；第一种人，由于父母的要求不得不被迫学习；第二年种，想要上学的目的是，拥有更好的学历；第三种则是因为兴趣而学习，想要学习到更有趣的知识，想要见识到更美丽、令人惊叹的景色；对于我们每个人来说，我们都拥有一个属于自己的答案；</p><p>  小时候，班主任经常会在讲台上与我们声嘶力竭地互动：“你们学习是给我学的吗？”“不是！”“是给你爸妈学的吗”“不是！”“那是给谁学的？”“自己！”天长日久，成了一套固定模式，记住了“学习”是为了自己，但并不知道为了自己的什么。后来懂点事了，母亲经常教导我：“好好学习，有了出息，才不被人欺负。”开始也听不进去，说的多了，也就记住了学习是为了有出息，为了出人头地。</p><p>  在我读大学之前，初中、高中，我一直是处于一种浑浑噩噩的状态，当时的我只有对数学这一门学科上心，别的科目大概就是不管不顾的态度；来到了大学，因为一次转机，来到计算机专业；在这里，我见识到了自己喜欢的东西，见识到了很优秀的同学，结识了优秀而有趣、幽默的一些同学、学长，见识到了更美丽的知识，找到了属于自己的美丽的景色；在我看来，真正意义上的学习，是会开始自己去思考任何一件事情，从而变得思想上的独立，潜移默化地让自己拥有独立的人格品质和自己的一套行为作风，在那一霎那，我们就开始了蜕变，整个世界在我们眼中就变得不一样了；我们对任何事情都保持一种轻松的态度；我现在认为我是属于那第三类人，我也希望我自己能够一直保持这样一种态度；</p><p>  首先什么是学习，我认为，通俗意义上的学习就是通过各种渠道方式认识、了解到我们之前不熟悉或不知道的知识，依次来能够使我们的身心素质得到提高、使我们更加强大；学习的渠道有很多；上课、看书、网课、浏览博客等等都是学习；现在社会学习的方式太多了； 学习有什么用呢？</p><p>  首先，最浅显的，我们通过学习了解了之前所不曾了解的知识，也就是掌握了知识点，可以拿RPG游戏做例子，学习对我们来说就是打怪练级的过程，知识就是装备，我们的装备越全我们当然就越厉害、越强大；</p><p>  之后，我们通过这些知识，可以实现之前没有掌握这些知识之前做不到的思考，或者修正我们之前的错误的思考，从而得到成长；最后，我们通过自己的思考结果，能更好的认识这个世界，以此引导我们的行为，根据我们的需要更好的改造世界。 有个前辈这样和我说过：“我的人生三大价值观依次是自由、独立思考、终身学习，但实际上践行的顺序完全是相反的，只有通过终身学习我才能做到独立思考，只有做到独立思考我才能实现某种意义上的自由。”</p><p>  当我们刚刚呱呱坠地之日起，就用手去抓、摸周围的事物，去感知事物的硬度、温度。尽管那时我们的眼睛尚未睁开，但我们开始了最原始的，也是速度最快的，内容最丰富的学习。我想，假如我们没有这些简单的学习方式，那么人类永远就只能停留在婴孩时代，这是一个无法想象也不可能去想象的场景。这样的话，人类会脆弱得连一只苍蝇、一只蚂蚁都不可能打败。学习是人得一种责任。</p><p>  学习还是一种权利，人还有获得自我发展，实现人生价值的权力。有人会说这根本不是权力。假如这样认为的话，我们就完全失去了作为一个生命体的存在的意义。</p><p>  学习还是人的一种基本需要。这种需要就像吃饭、穿衣、喝水一样，是人的一种生存的必需，这个是显然的；当然，学习的方式是多种多样的，层次不同的，也有高尚和低劣的学习。如孝悌的学习、诚信的学习、学习方法的学习、知识技能的学习、法纪法规的学习等等。否则，知识匮乏、法纪观念淡薄、做事不计后果，必然要出大问题。可以这样说，如果没有诚信、没有知识技能，没有礼仪、规范、准则、品行的人，我们很难想象会是一个怎样的人；</p><p>  如果你曾经有过最终习得某种技能的经验，就知道在学会的那一瞬间，不用多说，整个世界在你眼中都不一样了。或者说，因为你有能力做更多的事情，你就不再存在于原来的世界，因为你所学会的技能，你已经拥有另一个完全不同的世界；每次我学会了一个新知识，就感觉自己重生了一次，如此看来，原本可以有很多被子的，只不过大多数人放弃了而已。</p><p>  我们常常能听见有些人老是宣扬学习无用论，然而在我看来这不过是失败者的借口而已；</p><p>  在古代，古代人成为有钱人的最有效的途径是什么？是通过科举考试；在那个两耳不闻窗外事，一心只读圣贤书的年代，对于平民老百姓来说，读书是唯一的出路，是唯一的可以让你从一个阶层迈到另一个阶层，并收获大量财富的追梦之路。那么要考上状元，需要读多少书呢？寒窗十载，《三字经》、《百家姓》、《千家诗》、《四书五经》、《文心雕龙》、《二十四史》、《古文观止》等等数不胜数，通读这些书，你才能作诗，才能写八股文，才能在考场上文思如涌泉。</p><p>  通过学习，我们可以获得身心的解放，获得思想的解放，和精神上的解放；每当我们真正投入学习时，那种充实、愉悦，那种学习到新知识后的充实，那种难以言表的心情，我想都是任何人包括我自己的最宝贵的精神财富。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;
&lt;strong&gt;我们为什么要学习&lt;/strong&gt;
&lt;/center&gt;
&lt;p&gt;  我们为什么要学习，相信这是每个人从幼儿园开始就纠缠一生的问题；有的人觉得不需要学习，所以辍学了；有的人想明白了，所以走上了学霸的道路；然而更多的人没想明白，但也没办法，只是被
      
    
    </summary>
    
      <category term="随笔" scheme="https://yuggu.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://yuggu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JS入门</title>
    <link href="https://yuggu.github.io/2019/12/24/JS%E5%85%A5%E9%97%A8/"/>
    <id>https://yuggu.github.io/2019/12/24/JS入门/</id>
    <published>2019-12-24T05:36:08.000Z</published>
    <updated>2019-12-24T05:38:11.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义一个数组">定义一个数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> arr_2 = [<span class="string">'abds'</span>,<span class="number">12</span>, <span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'hello'</span>);&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(arra_1); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="注释">注释</h4><p>  单行注释用<code>//</code>，多行注释以<code>/*</code>开始，以<code>*/</code>结尾；</p><h4 id="闭包">闭包</h4><p>  使用闭包可以从内部函数访问外部函数作用域。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner1 = outer();</span><br><span class="line">inner1(); <span class="comment">// 11</span></span><br><span class="line">inner1(); <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">var</span> inner2 = outer();</span><br><span class="line">inner2(); <span class="comment">// 11</span></span><br><span class="line">inner2(); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数">匿名函数</h4><p>  可以使用匿名函数创建命名空间，只要把自己的代码写在这个特殊函数内，外部就不能访问，还可以减少全局变量的使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1'</span>);&#125;;</span><br><span class="line">f(); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 下面即是定义一个匿名函数，并且立即执行(IIFE，即立即调用的函数表达式)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);  </span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//下面的写法可以上函数立即执行，还可以将前面加上其他符号</span></span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"><span class="comment">//···</span></span><br></pre></td></tr></table></figure><h4 id="iife">IIFE</h4><p>  IIFE，即立即调用的函数表达式，仅仅是一个表达式，不能像函数一样，把他赋给一个变量；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// console.log(i);</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(m);</span><br><span class="line">     &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么是dom">什么是DOM</h4><p>  文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>Core DOM - 所有文档类型的标准模型</li><li>XML DOM - XML 文档的标准模型</li><li>HTML DOM - HTML 文档的标准模型</li></ul><p>HTML DOM是关于如何获取、更改、添加或删除HTML元素的标准。它定义了作为对象的HTML元素，所有HTML元素的属性，访问所有HTML元素的方法，所有HTML元素的事件；</p><p>HTML DOM模型被结构化为对象树；通过这个对象，js能够对HTML进行操作；</p><ul><li>js能够改变页面中的所有HTML元素</li><li>js能改变页面中所有HTML属性</li><li>js能改变页面中的所有css样式</li></ul><p>等等。。</p><h4 id="dom">DOM</h4><p>  DOM描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分，这使得JavaScript操作HTML，不是在操作字符串，而是在操作节点，极大的降低了变成难度。</p><h5 id="得到元素">得到元素</h5><ol type="1"><li>document.getElementById("intro")，查找id="intro"的元素，找到则以对象形式返回该元素，未找到则返回null，id是区别大小写的，IE6、IE7、IE8中是不区分大小写的。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">"box"</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="xml">            console.log(box); // <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">"box"</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="javascript">            box.style.background = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>document.getElementsByTagName("p")，这个方法返回的是一个叫做HTMLCollection的东西，类似数组，里面存的是所有p标签，可以通过下标访问具体的某个标签，如果没有p标签，则返回一个空的HTMLCollection；</li></ol><h5 id="更改html属性">更改HTML属性</h5><ol type="1"><li><p>直接通过<code>.</code>来调用指定标签的属性，通过赋值的形式进行更改；另外class这个属性，要换成className，因为class是JavaScript的保留字，还有for要写成htmlFor，rowspan写成rowSpan，colspan写成colSpan;</p></li><li><p>setAttribute(string s1, string s2)，设置s1的属性值为s2，如果不存在s1属性，就添加一个属性值为s2的s1属性。</p></li><li><p>getAttribute(string name)，获取name属性的属性值；</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">"box"</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            box.id = <span class="string">"box1"</span>;</span></span><br><span class="line"><span class="javascript">            box.innerText = <span class="string">"123"</span>;</span></span><br><span class="line"><span class="javascript">            box.setAttribute(<span class="string">"id"</span>, <span class="string">"box2"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(box.getAttribute(<span class="string">"id"</span>)); <span class="comment">// box2</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(box.getAttribute(<span class="string">"p"</span>)); <span class="comment">// 123</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(box.getAttribute(<span class="string">"id"</span>)); <span class="comment">//box2</span></span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，使用<code>.</code>或使用<code>getAttribute</code>来获取属性值是有区别的，前者是不能获取自定义属性的，后者是可以的，并且<code>.</code>获取的属性的属性值是object的，而<code>getAttribute</code>获取的属性属性值是string类型的。</p><h5 id="操作元素样式">操作元素样式</h5><p>  比较简单就不说了。</p><h5 id="事件监听">事件监听</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            .box&#123;</span></span><br><span class="line"><span class="undefined">                width: 200px;</span></span><br><span class="line"><span class="undefined">                height: 200px;</span></span><br><span class="line"><span class="undefined">                background-color: skyblue;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"idbox"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"idbox"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(box.click);</span></span><br><span class="line"><span class="javascript">            box.onclick = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  时间的类型有onclick（单击）、onmouseover（鼠标进入）、onmouseout（鼠标离开）、ondblclick（双击）、onfocus（得到焦点）、onblur（失去焦点）、onmousedown（鼠标按下）、onmouseup（鼠标按键抬起）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM</a></p><h5 id="批量监听">批量监听</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p_arra = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; p_arra.length; i++) &#123;</span><br><span class="line">    <span class="comment">//IIFE</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        p_arra[m].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(m);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p_arra = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; p_arra.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 绑定自定义属性</span></span><br><span class="line">    p_arra[i].idx = i;</span><br><span class="line">    p_arra[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.idx);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义一个数组&quot;&gt;定义一个数组&lt;/h4&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr_1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr_2 = [&lt;span class=&quot;string&quot;&gt;&#39;abds&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;);&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arra_1); &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;注释&quot;&gt;注释&lt;/h4&gt;
&lt;p&gt;  单行注释用&lt;code&gt;//&lt;/code&gt;，多行注释以&lt;code&gt;/*&lt;/code&gt;开始，以&lt;code&gt;*/&lt;/code&gt;结尾；&lt;/p&gt;
&lt;h4 id=&quot;闭包&quot;&gt;闭包&lt;/h4&gt;
&lt;p&gt;  使用闭包可以从内部函数访问外部函数作用域。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://yuggu.github.io/categories/js/"/>
    
      <category term="js基础" scheme="https://yuggu.github.io/categories/js/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js" scheme="https://yuggu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ECB模式RSA的Java简单实现中遇到的问题</title>
    <link href="https://yuggu.github.io/2019/12/21/ECB%E6%A8%A1%E5%BC%8FRSA%E7%9A%84Java%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://yuggu.github.io/2019/12/21/ECB模式RSA的Java简单实现/</id>
    <published>2019-12-21T10:14:54.000Z</published>
    <updated>2019-12-24T09:11:11.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="连续使用一个字节数组读取文件">连续使用一个字节数组读取文件</h3><p>  在使用java的数组来实现连续读取数据的时候，遇到这样一个问题。</p><p>  我通过一个8字节数组来通过<code>FileOutputStream.read()</code>读取文件中的数据，所以我每次最多读8个字节，我文件中的数据如下，总共47个字符也就是47个字节，所以需要读6次；</p><blockquote><p>dshakjdhjksahklfdahkjhkjf hdljksahkfjlkjhadskjh</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(file);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span> [] word = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((count = fis.read(word)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> s : word) &#123;</span><br><span class="line">                num ++;</span><br><span class="line">                System.out.print(num +<span class="string">": "</span> + (<span class="keyword">char</span>)s + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当我每读一次就把当前读到数组里的数据输出时，我发现数据与我文件中的不匹配。读取的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1: d 2: s 3: h 4: a 5: k 6: j 7: d 8: h</span><br><span class="line">9: j 10: k 11: s 12: a 13: h 14: k 15: l 16: f</span><br><span class="line">17: d 18: a 19: h 20: k 21: j 22: h 23: k 24: j</span><br><span class="line">25: f 26:   27: h 28: d 29: l 30: j 31: k 32: s</span><br><span class="line">33: a 34: h 35: k 36: f 37: j 38: l 39: k 40: j</span><br><span class="line">41: h 42: a 43: d 44: s 45: k 46: j 47: h 48: j</span><br></pre></td></tr></table></figure><p>  我们可以看到输出了48个字节多输出了一个字节，思考了一下我们可以想到，当我们最后一次读取文件数据时，如果这时候我们可以读取的数据已经不足8个字节，那么会怎么样呢，那么我们可以想到这最后一个字节可能来自上次8个字节的最后一个字节即第40个字节，每次使用<code>FileInputStream.read()</code>去读取数据，当前读取的数据都会把之前读取的数据给覆盖掉。所以我们每次读取之后，都要先把byte数组清空之后再进行下次读取；可以使用<code>java.util.Arrays.fill()</code>来实现；</p><h3 id="一个字节的表示">一个字节的表示</h3><p>  首先对于一个字节来说，表示有符号数时，范围是<code>-128~127</code>，其中<code>-128</code>的表示为<code>10000000</code>；正数为原码形式存在，负数为补码形式存在；比如对于一个字节来说，如果向计算机写入<code>-1</code>，它是一个有符号的负数，所以计算机会计算它的补码，从而转换为<code>11111111</code>；而对于<code>128~255</code>之间的数，计算机会自动视其为无符号数，那就以无符号原码表示，如<code>0xff</code>即255，就是<code>11111111</code>；</p><p>  所以有时候，我们就会遇到，255和-1都表示为<code>11111111</code>的情况；</p><h3 id="biginteger.tobytearray怎么实现的">BigInteger.toByteArray()怎么实现的</h3><p>  在网上找了一个说的比较好的解答，也有了自己的理解。</p><p>  下面是一个int的编码实例，其中需要注意二进制的4位表示一个十六进制数字，负数二进制开始为1，正数开始于0；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-2147483648 is encoded as 1000 0000 0000 0000 0000 0000 0000 0000 or 0x80000000.</span><br><span class="line">        -16 is encoded as 1111 1111 1111 1111 1111 1111 1111 0000 or 0xfffffff0.</span><br><span class="line">         -2 is encoded as 1111 1111 1111 1111 1111 1111 1111 1110 or 0xfffffffe.</span><br><span class="line">         -1 is encoded as 1111 1111 1111 1111 1111 1111 1111 1111 or 0xffffffff.</span><br><span class="line">          0 is encoded as 0000 0000 0000 0000 0000 0000 0000 0000 or 0x00000000.</span><br><span class="line">          1 is encoded as 0000 0000 0000 0000 0000 0000 0000 0001 or 0x00000001.</span><br><span class="line">         16 is encoded as 0000 0000 0000 0000 0000 0000 0001 0000 or 0x00000010.</span><br><span class="line"> 2147483647 is encoded as 0111 1111 1111 1111 1111 1111 1111 1111 or 0x7fffffff.</span><br></pre></td></tr></table></figure><p>  java只是把，每个8位块中现有的位拷贝到目标数组中的问题。一个字节即是一个8位的块.</p><p>  我们将一个BigInteger转换为二进制补码，我们想要的只是它的后面的有效的位，而不包含前面的无数的前导0和前导1；之后每8位的块即是一个字节；</p><p>  下面用数组里的十六进制来表示BigInteger；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                   0 [0x00000000]</span><br><span class="line">          2147483647 [0x7fffffff]</span><br><span class="line">          2147483648 [0x00000000, 0x80000000]</span><br><span class="line">          4294967296 [0x00000001, 0x00000000]</span><br><span class="line">          8589934592 [0x00000002, 0x00000000]</span><br><span class="line">     281474976710655 [0x0000ffff, 0xffffffff]</span><br><span class="line">     281474976710656 [0x00010000, 0x00000000]</span><br><span class="line">18446744073709551616 [0x00000001, 0x00000000, 0x00000000]</span><br><span class="line">    -281474976710656 [0xffff0000, 0x00000000]</span><br></pre></td></tr></table></figure><p>  之后分割、拿出其中有效的byte，即以每八位分割一次；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8589934592 [0x00 00 00 02, 0x00 00 00 00]</span><br><span class="line">bytes:     [           02,   00,00,00,00]</span><br></pre></td></tr></table></figure><ol type="1"><li>前面的三个00都可以被忽略，因为第一个有效数字之前有25个0；</li><li>然后将这些二进制位拷贝到字节中即可。</li></ol><p>对于官方的文档，其中有这样一句话，toByteArray()这个方法返回一个数组，这个数组包含可以代表这个BigInteger最小数量的字节，其中包含至少一个符号位。</p><p>符号位是什么意思呢。对于<code>-128~127</code>之间的数组，我们都可以用一个字节来表示，而对于<code>128~255</code>之间的数呢，比如255与-1，虽然二进制表示相同，但他们终究是不同的，所以这个方法考虑到这个问题，对于255就额外加了一个0x00表示符号位（如果第一个字节的大小大于0x7f，就需要在最前面加上一个0x00）；或者可以这样想，对于有符号数来说，<code>128~255</code>之间的数，一个字节是表示不了的，所以采用两个字节来表示，只不过最左边的那个字节是0x00；比如对于下面的两个byte数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">255 [0x00, 0xff]</span><br><span class="line">-1  [    , 0xff]</span><br></pre></td></tr></table></figure><p><strong>这个问题需要特别注意</strong>；</p><h3 id="byte数组转biginteger">byte数组转BigInteger</h3><p>  BigInteger有这样一个构造函数：<code>public BigInteger(byte[] val)</code>，它的参数是byte数组；对于<code>[0x00,0xff]</code>得到的BigInteger的到的结果是255，对于<code>[0xff]</code>的结果是-1；</p><p>  BigInteger还有这样一个构造函数：<code>public BigInteger(int signum,byte[] magnitude)</code>，其中多加了一个signum参数代表你的BigInteger的正负，为-1代表负数，为1代表整数，为0代表byte数组表示的数一定是0（即这个byte数组仅包括字节0x00），如果byte数组表示的数不为0，会报错。</p><p>  实践后发现，可能是这样的，如果signum为0，则在byte数组最前面加上一个0x00，然后反转上面toByteArray()的操作，得到最后的结果，如果signum为1，前面计算的结果上加上一个负号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> [] arr1 = &#123;<span class="number">0x00</span>&#125;;</span><br><span class="line">        <span class="keyword">byte</span> [] arr2 = &#123;<span class="number">0x00</span>,(<span class="keyword">byte</span>)<span class="number">0xff</span>&#125;;</span><br><span class="line">        <span class="keyword">byte</span> [] arr3 = &#123;(<span class="keyword">byte</span>)<span class="number">0xff</span>&#125;;</span><br><span class="line">        <span class="keyword">byte</span> [] arr4 = &#123;-<span class="number">1</span>,(<span class="keyword">byte</span>)<span class="number">0xff</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(arr4));   <span class="comment">//-32513</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(<span class="number">1</span>,arr4)); <span class="comment">//33023</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(-<span class="number">1</span>,arr4));<span class="comment">//-33023</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(-<span class="number">1</span>,arr1));<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(<span class="number">1</span>,arr2)); <span class="comment">//255</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(-<span class="number">1</span>,arr2));<span class="comment">//-255</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(<span class="number">1</span>,arr3)); <span class="comment">//255</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BigInteger(-<span class="number">1</span>,arr3));<span class="comment">//-255</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;连续使用一个字节数组读取文件&quot;&gt;连续使用一个字节数组读取文件&lt;/h3&gt;
&lt;p&gt;  在使用java的数组来实现连续读取数据的时候，遇到这样一个问题。&lt;/p&gt;
&lt;p&gt;  我通过一个8字节数组来通过&lt;code&gt;FileOutputStream.read()&lt;/code&gt;读取文件中的数据，所以我每次最多读8个字节，我文件中的数据如下，总共47个字符也就是47个字节，所以需要读6次；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dshakjdhjksahklfdahkjhkjf hdljksahkfjlkjhadskjh&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="https://yuggu.github.io/categories/java/"/>
    
      <category term="java随笔" scheme="https://yuggu.github.io/categories/java/java%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java" scheme="https://yuggu.github.io/tags/java/"/>
    
      <category term="java随笔" scheme="https://yuggu.github.io/tags/java%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2019ecfinal西安游记</title>
    <link href="https://yuggu.github.io/2019/12/17/2019ecfinal%E8%A5%BF%E5%AE%89%E6%B8%B8%E8%AE%B0/"/>
    <id>https://yuggu.github.io/2019/12/17/2019ecfinal西安游记/</id>
    <published>2019-12-17T10:29:42.000Z</published>
    <updated>2019-12-17T12:30:09.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="day1">Day1:</h3><p>  周六早晨4.30起床，5点校门集合，之后打的前去机场，之后到了机场上飞机，大概10点、11点到西安，很累，挺讨厌坐车坐飞机，只能睡觉，或者信号很差，而且睡得很不安稳，睡一会醒一次、睡一会醒一次，到了西安，我们要坐地铁到韦曲，然后会有学校大巴来接我们。</p><p>  本来我是以为西安没有地铁的，因为这边很多大型的墓，在地铁上我还看到了长陵、秦宫、大雁塔什么的；记得在地铁上，我看了一次地图，被吓了一跳，我们飞到西安最北边，从咸阳机场开始坐的地铁，然后需要到西安的最南边的西北工业大学的长安校区，本来我以为是要到北边那个友谊校区，然后计划的刚好西电也在那边，可以找机会去找hsk的，不过比赛是在长安校区那边，也就算了。</p><a id="more"></a><p>  到的时候已经是12点了，然后又排队签了个到（那个书包挺垃圾的），然后听说有讲座，然后到教室根本进不去，人太多，我们（两个队）就在隔壁教室休息了一个班小时，然后就是开幕式，wls还讲好了话，好像题目挺难的，之后就去了体育馆，热身赛，签到题是直接输出'helloworld'好像，之后B题是一个让求，给定集合的所有子集的极差的1000次方的和。这个题，我们不会，然后就挂机了，赛后听说是个度数筛什么的。。之后，在它们学校吃完饭（食堂还没我们学校好），就回宾馆了，6点多大概，我和hcw一间房，我实在太累了，（4.30起来，飞机上车上根本没好好睡一觉），而且当时头有点疼，浑身上下难受的一批，到头就睡，hcw一开始好像在玩手机，然后就去打lol了，我衣服都没脱，在床上躺到12点，然后就脱衣服睡觉了。</p><h3 id="day2">Day2:</h3><p>  早晨7.30左右起的好像，然后吃的宾馆的早饭，是叫秦龙好像，究极垃圾，就一碗粥还可以喝一下。然后就坐大巴去学校了，场内没准进还是没开门，等了半个多小时才让进。中午饭提前给了我们，几个面包一份纯牛奶，两个士力架，还有一袋不知是什么的食物，不过好像挺好吃？（到现在，我还没尝过）</p><p>  然后，签到题就感觉有点不一样，和之前打过的区域赛，明显感觉题目难度不一样，我和hcw一起看<span class="math inline">\(A\)</span>，一个小时左右才<span class="math inline">\(A\)</span>了<span class="math inline">\(A\)</span>这个签到，mfx也在看<span class="math inline">\(A\)</span>，它说它<span class="math inline">\(A\)</span>有了想法，可是我们都A掉了；我们看了眼榜，我们学长比我们快几分钟签到，此时榜上过的最多的除签到外的是<span class="math inline">\(M\)</span>，我们看<span class="math inline">\(M\)</span>，看了<span class="math inline">\(M\)</span>，感觉难度很大，一开始以为是一个数据结构（其实是数据结构更好，我学的最好的应该就是数据结构题了），一开始我和mfx想了一个暴力的方法，不过感觉复杂度好像可行、又好像不可行，然后我就开写了，写着写着就遇到了一写问题，我感觉没法处理，就在想怎么处理（旁边mfx已经开始吃起来了），然后我想这样是不是太复杂了，还是我们的想法错了，他会不会是个贪心什么的，我就换思路了，然后mfx去了厕所，回来了看我不写了，就跟hcw说了怎么写，让他去写，它们俩一边写一边调，我在旁边一直想，实在没办法证明他是个贪心，它们俩写了很久都没写出来，我就让他们起开，我去写个假的蒙的算法，然后试了几个样例，都过了，然后满怀希望的交了一发，果然没过， 然后我很绝望，他们俩写的暴力，继续调继续改，试了几个样例也都过了，但是还是wa，其实这时候我应该跟着去看哪写的有问题的，因为不是TLE说明时间复杂度暂时没问题，就是写的有问题，中间没封榜之间看了榜，学长他们是两题，好像处于铜尾。然后我们就这样挂机到比赛结束。比赛结束去了闭幕式，开始就是大篇的废话，然后学长他们有个铜（他们应该是最后几名，铜牌最边缘）。我们没有。</p><p>  拿了他们的铜我们就坐大巴去了韦曲，然后坐地铁去了市图书馆附近，然后去了那边的宾馆，当时已经6点多了，那边刚好有万达，我们就去吃了水煮牛，喝了果汁、可乐，吃的挺爽的，不过不用猜，第二天我肯定会拉肚子（肠胃不行）。吃完已经9点了，然后回宾馆看了个电影（危城好像是），看的我挺尬的，真心不咋滴。然后我就去玩手机了，hcw又去开了lol，到了1点我们才睡。</p><h3 id="day3">Day3:</h3><p>  7.40我们退的房，早晨去了好几次厕所，我的包和充电器还差点忘记拿（迷迷糊糊），后来上了地铁我才发现耳机又忘了拿（电话联系让他们寄回学校），地铁上我还肚子疼，憋到了机场，找了三四个厕所，都好多人，没空位。。</p><p>  然后就坐飞机回学校了，到了cz的机场，等了半个小时多的机场大巴，做了快两个小时到学校附近的公交中心，下了大巴，我发现手机还忘车上了。。。后面由于一些原因拿回来了。后来就骑单车回学校了。</p><blockquote><p>这一次的比赛就这样结束了，回想一下这几天的历程，让我想起了一部电影：《大话西游》，里面有一句话：<strong>“他好像一条狗啊！”</strong>；这两天下来，感觉我就和至尊宝口中的孙悟空挺像的，像一只狗，一无所获，夹着尾巴，灰溜溜就这样回了学校。</p></blockquote><blockquote><p>就这样吧，我的大学时期的ACM也就这样结束了吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;day1&quot;&gt;Day1:&lt;/h3&gt;
&lt;p&gt;  周六早晨4.30起床，5点校门集合，之后打的前去机场，之后到了机场上飞机，大概10点、11点到西安，很累，挺讨厌坐车坐飞机，只能睡觉，或者信号很差，而且睡得很不安稳，睡一会醒一次、睡一会醒一次，到了西安，我们要坐地铁到韦曲，然后会有学校大巴来接我们。&lt;/p&gt;
&lt;p&gt;  本来我是以为西安没有地铁的，因为这边很多大型的墓，在地铁上我还看到了长陵、秦宫、大雁塔什么的；记得在地铁上，我看了一次地图，被吓了一跳，我们飞到西安最北边，从咸阳机场开始坐的地铁，然后需要到西安的最南边的西北工业大学的长安校区，本来我以为是要到北边那个友谊校区，然后计划的刚好西电也在那边，可以找机会去找hsk的，不过比赛是在长安校区那边，也就算了。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="随笔" scheme="https://yuggu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式</title>
    <link href="https://yuggu.github.io/2019/12/02/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yuggu.github.io/2019/12/02/Java设计模式/</id>
    <published>2019-12-02T04:27:53.000Z</published>
    <updated>2019-12-02T04:29:13.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式">单例模式</h3><p>  单例模式的存在为了保证一个类仅有一个实例；</p><p>  比如对于某一个场景，我们经常使用某个对象的某个方法，那么对于每一个用户都需要创建一个对象（比如对于百度的搜索引擎，百度是对象，可能存在很多用户同时使用它的搜索引擎，那么就需要同时创建很多对象，但其实我们只需要使用这个搜索的方法），这其实会造成很大的浪费；</p><p>  那么我们能不能只创建一个对象，使得所有用户共用它呢；这就是单例模式；</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象,需要是static、private的</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象,需要是public、static的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的,即private</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出结果为<code>Hello World!</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例模式&quot;&gt;单例模式&lt;/h3&gt;
&lt;p&gt;  单例模式的存在为了保证一个类仅有一个实例；&lt;/p&gt;
&lt;p&gt;  比如对于某一个场景，我们经常使用某个对象的某个方法，那么对于每一个用户都需要创建一个对象（比如对于百度的搜索引擎，百度是对象，可能存在很多用户同时使用它的搜索引擎，那么就需要同时创建很多对象，但其实我们只需要使用这个搜索的方法），这其实会造成很大的浪费；&lt;/p&gt;
&lt;p&gt;  那么我们能不能只创建一个对象，使得所有用户共用它呢；这就是单例模式；&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://yuggu.github.io/categories/java/"/>
    
      <category term="java基础" scheme="https://yuggu.github.io/categories/java/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://yuggu.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://yuggu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>pyqt学习</title>
    <link href="https://yuggu.github.io/2019/11/27/pyqt%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yuggu.github.io/2019/11/27/pyqt学习/</id>
    <published>2019-11-27T05:31:02.000Z</published>
    <updated>2019-12-02T04:28:57.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是pyqt">什么是Pyqt</h3><p>  Pyqt是python的一个第三方模块，它主要支持gui编程，和Python的Tkinter、PyGTK、wxPython；另外，Qt是一个跨平台的C++应用程序开发框架，广泛用于开发GUI程序；</p><h3 id="qt-designer">Qt Designer</h3><p>  Python图形界面，可以通过载入pyqt模块，通过代码实现，也可以通过Qt Designer来实现，它可以通过拖拽、点击完成图形界面的设计，最后得到的是ui文件，pyqt支持将ui文件转换成py文件，即可以生成py代码。下面给出我的designer.exe的路径</p><blockquote><p>D:\Anocanda\Anaconda\envs\py37\Library\bin\designer.exe D:\Anocanda\Anaconda\Library\bin\designer.exe</p></blockquote><a id="more"></a><p>  envs下的py37是我的一个用来写python的虚拟环境；</p><p>  在QT Designer中设计界面，首先需要选择界面模板，主要分三种：</p><ol type="1"><li>Main Window</li><li>Widget</li><li>Dialog</li></ol><p>  具体选择区别，这里就不说了；</p><h3 id="ui文件生成python代码">ui文件生成python代码</h3><ol type="1"><li>方法1：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m PyQt5.uic.pyuic 文件名.ui -o 文件名.py</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>方法2：使用pyuic5</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 文件名.ui -o 文件名.py</span><br></pre></td></tr></table></figure><p>  直接在cmd中使用，或者在pycharm的终端中使用，注意ui文件的路径，如果不在当前路径，需要是绝对路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'FirstQtWindow.ui'  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.12.3  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span>  </span><br><span class="line">        Form.setObjectName(<span class="string">"Form"</span>)  </span><br><span class="line">        Form.resize(<span class="number">828</span>, <span class="number">457</span>)  </span><br><span class="line">  </span><br><span class="line">        self.retranslateUi(Form)  </span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span>  </span><br><span class="line">        _translate = QtCore.QCoreApplication.translate  </span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>))</span><br></pre></td></tr></table></figure><p>  上述代码是，一个空的，无任何控件的一个Widget模板的窗体，那么怎么使用它呢，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">from</span> FirstQtWindow <span class="keyword">import</span> Ui_Form  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Win</span><span class="params">(QWidget,Ui_Form)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        super(Win, self).__init__()  </span><br><span class="line">        self.setupUi(self)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    app = QApplication(sys.argv)  </span><br><span class="line">    emptywindow = Win()  </span><br><span class="line">    emptywindow.show()  </span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是pyqt&quot;&gt;什么是Pyqt&lt;/h3&gt;
&lt;p&gt;  Pyqt是python的一个第三方模块，它主要支持gui编程，和Python的Tkinter、PyGTK、wxPython；另外，Qt是一个跨平台的C++应用程序开发框架，广泛用于开发GUI程序；&lt;/p&gt;
&lt;h3 id=&quot;qt-designer&quot;&gt;Qt Designer&lt;/h3&gt;
&lt;p&gt;  Python图形界面，可以通过载入pyqt模块，通过代码实现，也可以通过Qt Designer来实现，它可以通过拖拽、点击完成图形界面的设计，最后得到的是ui文件，pyqt支持将ui文件转换成py文件，即可以生成py代码。下面给出我的designer.exe的路径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;D:\Anocanda\Anaconda\envs\py37\Library\bin\designer.exe D:\Anocanda\Anaconda\Library\bin\designer.exe&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yuggu.github.io/categories/Python/"/>
    
      <category term="PyQt" scheme="https://yuggu.github.io/categories/Python/PyQt/"/>
    
    
      <category term="Python" scheme="https://yuggu.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://yuggu.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>字符集与编码</title>
    <link href="https://yuggu.github.io/2019/11/20/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81/"/>
    <id>https://yuggu.github.io/2019/11/20/字符集与编码/</id>
    <published>2019-11-20T10:56:47.000Z</published>
    <updated>2019-11-20T10:58:12.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符集">字符集</h3><p>  字符集产生于编码，而什么是编码；在计算机中，数据与信息实质上都是二进制存储格式，而人们要使用计算机，人们能理解的数据与文本需要在计算机中存储与通过网络传递，那么我们就需要二进制与文本、字符的转换规则；</p><p>  那么我们可以想得到，如果全世界对于二者的转换拥有一个统一的转换规则就好了；然而事实与之相反，在早期出现了，很多标准与规定的指定初期，并不会意识到此标准会是全球普适的准则，或者处于集团、组织利益想从本质上区别于其他标准，于是产生了各种具有相同效果却又不相互兼容的标准。这就是字符集；</p><p>  字符集标准规定了，某些字符、文字对应的二进制是多少，以及某特定二进制表示的文字或字符是什么；</p><a id="more"></a><h3 id="acsii">Acsii</h3><p>  <strong>Ascii</strong>：是基于拉丁字母的一套电脑编码系统，主要用来显示现代英语；</p><p>  <strong>Ascii字符集</strong>：包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。一开始是128字符，共7位，后来为了表示更多欧洲常用字符，对其进行了扩展，使用了8位，共256个字符；虽然解决了欧洲的问题，但是对于其他有些语言没有办法；</p><p>  <strong>Ascii编码</strong>：将ascii字符集转换为二进制的规则；</p><h3 id="unicode">Unicode</h3><p>  世界上存在着很多编码标准，同一个二进制数，可能被不同编码标准解释成不同符号，那么如果全世界拥有一种统一的编码标准就好了；然后就有了Unicode，它的规模很大；需要注意，它只是一个字符集，只规定了符号的二进制代码，却没有规定这个二进制如何存储；即该需要多少字节；</p><p>  如汉字<code>严</code>的Unicode是十六进制<code>4E25</code>，二进制共15位，那么表示他至少需要2个字节；那么表示其他符号呢，可能需要3、4个字节，可能更多；</p><p>  那么如何区别Unicode和ASCII，计算机怎么知道三个字节位一个符号，而不是分别表示三个符号；第二个问题，英文字符表示用一个字节就够了，如果Unicode规定统一用3个或4个字节，那么每个英文字符前都有2个到3个字节是0，这是极大的浪费。</p><p>  <a href="https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings" title="Unicode编码比较" target="_blank" rel="noopener">Unicode可以</a>通过不同的<a href="https://en.wikipedia.org/wiki/Character_encoding" title="字符编码" target="_blank" rel="noopener">字符编码实现</a>。Unicode标准定义了<a href="https://en.wikipedia.org/wiki/UTF-8" title="UTF-8" target="_blank" rel="noopener">UTF-8</a>，<a href="https://en.wikipedia.org/wiki/UTF-16" title="UTF-16" target="_blank" rel="noopener">UTF-16</a>和<a href="https://en.wikipedia.org/wiki/UTF-32" title="UTF-32" target="_blank" rel="noopener">UTF-32</a>，并且正在使用其他几种编码。最常用的编码是UTF-16 的前身UTF-8，UTF-16和<a href="https://en.wikipedia.org/wiki/Universal_Coded_Character_Set" title="通用编码字符集" target="_blank" rel="noopener">UCS</a> -2（不完全支持Unicode）。<a href="https://en.wikipedia.org/wiki/GB_18030" title="GB 18030" target="_blank" rel="noopener">GB18030</a>在中国已标准化，并且完全实现了Unicode，而不是正式的Unicode标准。</p><p>Unicode定义了两种映射方法：Unicode转换格式（UTF）编码和<a href="https://en.wikipedia.org/wiki/Universal_Coded_Character_Set" title="通用编码字符集" target="_blank" rel="noopener">通用编码字符集</a>（UCS）编码</p><h3 id="utf-8">Utf-8</h3><p>  之后互联网的普及，出现了UTF-8；这是一种变长编码；</p><p>  utf-8的编码实现如下，即utf-8的物理存储与Unicode序号的转换关系，utf-8编码为边长字节。最小编码单位（<code>code unit</code>）为一个字节，每个字节的前1-3个bit为描述性部分，后面为实际序号部分（序号即Unicode字符库中的序号）。</p><ul><li>如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</li><li>如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</li><li>如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</li><li>如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</li></ul><h3 id="乱码">乱码</h3><p>  乱码的出现是因为编码和解码的时候使用了不同或者不兼容的字符集。对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了<code>bless</code>（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是<code>受伤</code>（解码过程）。</p><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p><h4 id="第1步-编码">第1步 编码</h4><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql [localhost] &#123;msandbox&#125; &gt; select hex(convert(&apos;寰堝睂&apos; using gbk));</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| hex(convert(&apos;寰堝睂&apos; using gbk))    |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| E5BE88E5B18C                        |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="第2步-识别">第2步 识别</h4><p>现在我们得到了解码后的二进制字符串<code>E5BE88E5B18C</code>。然后我们将它按字节拆开。</p><table><thead><tr class="header"><th>Byte 1</th><th>Byte 2</th><th>Byte 3</th><th>Byte 4</th><th>Byte 5</th><th>Byte 6</th></tr></thead><tbody><tr class="odd"><td>E5</td><td>BE</td><td>88</td><td>E5</td><td>B1</td><td>8C</td></tr></tbody></table><p>然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8</p><h4 id="第3步-解码">第3步 解码</h4><p>然后我们就能拿着<code>E5BE88E5B18C</code>用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; select convert(0xE5BE88E5B18C using utf8);</span><br><span class="line">+------------------------------------+</span><br><span class="line">| convert(0xE5BE88E5B18C using utf8) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| 很屌                               |</span><br><span class="line">+------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符集&quot;&gt;字符集&lt;/h3&gt;
&lt;p&gt;  字符集产生于编码，而什么是编码；在计算机中，数据与信息实质上都是二进制存储格式，而人们要使用计算机，人们能理解的数据与文本需要在计算机中存储与通过网络传递，那么我们就需要二进制与文本、字符的转换规则；&lt;/p&gt;
&lt;p&gt;  那么我们可以想得到，如果全世界对于二者的转换拥有一个统一的转换规则就好了；然而事实与之相反，在早期出现了，很多标准与规定的指定初期，并不会意识到此标准会是全球普适的准则，或者处于集团、组织利益想从本质上区别于其他标准，于是产生了各种具有相同效果却又不相互兼容的标准。这就是字符集；&lt;/p&gt;
&lt;p&gt;  字符集标准规定了，某些字符、文字对应的二进制是多少，以及某特定二进制表示的文字或字符是什么；&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="字符编码" scheme="https://yuggu.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
      <category term="Unicode" scheme="https://yuggu.github.io/tags/Unicode/"/>
    
      <category term="utf-8" scheme="https://yuggu.github.io/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>Python基础之遇到的小问题记录</title>
    <link href="https://yuggu.github.io/2019/11/20/Python%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://yuggu.github.io/2019/11/20/Python基础之遇到的小问题记录/</id>
    <published>2019-11-20T08:19:49.000Z</published>
    <updated>2019-12-20T05:26:17.030Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快速获得一个数组的反序numpy数组也支持">快速获得一个数组的反序（numpy数组也支持）</h4><p>  如[1,2,7,6,3]，我们想要获得[3,6,7,2,1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arra = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line">print(arra[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>  如果是一个二维数组arra，那么它的arra[::-1]的结果，即是将原数组的第0行和第n-1行交换，第1行和第n-2行交换，<span class="math inline">\(\dots\)</span></p><a id="more"></a><h4 id="字符串转换为十六进制">字符串转换为十六进制</h4><p>  在我们使用str.encode()函数时，它是以指定的编码格式编码字符串，默认编码为 'utf-8'。将字符串由string类型变成bytes类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s3 = <span class="string">'hello'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(s1))</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># &lt;class 'bytes'&gt;</span></span><br><span class="line"><span class="comment"># b'hello'</span></span><br></pre></td></tr></table></figure><p>  我们想要获得这个字符串str的十六进制表示，我们可以这样做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">s1 = <span class="string">'hello'</span>.encode(<span class="string">'gbk'</span>)</span><br><span class="line">s2 = <span class="string">'hello'</span>.encode(<span class="string">'utf-16'</span>)</span><br><span class="line">s3 = <span class="string">'hello'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(binascii.hexlify(s1)))</span><br><span class="line">print(binascii.hexlify(s2))</span><br><span class="line">print(binascii.hexlify(s3))</span><br><span class="line">print(str(binascii.hexlify(s3), <span class="string">'ascii'</span>))</span><br><span class="line"><span class="comment"># b'68656c6c6f'</span></span><br><span class="line"><span class="comment"># b'fffe680065006c006c006f00'</span></span><br><span class="line"><span class="comment"># b'68656c6c6f'</span></span><br><span class="line"><span class="comment"># 68656c6c6f</span></span><br></pre></td></tr></table></figure><p>  注意代码中str的使用；</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;快速获得一个数组的反序numpy数组也支持&quot;&gt;快速获得一个数组的反序（numpy数组也支持）&lt;/h4&gt;
&lt;p&gt;  如[1,2,7,6,3]，我们想要获得[3,6,7,2,1]&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arra = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(arra[::&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  如果是一个二维数组arra，那么它的arra[::-1]的结果，即是将原数组的第0行和第n-1行交换，第1行和第n-2行交换，&lt;span class=&quot;math inline&quot;&gt;\(\dots\)&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yuggu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yuggu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>大三上计算机网络实验</title>
    <link href="https://yuggu.github.io/2019/11/20/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C/"/>
    <id>https://yuggu.github.io/2019/11/20/大三上计算机网络实验/</id>
    <published>2019-11-20T05:41:24.000Z</published>
    <updated>2019-11-20T05:52:11.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络实验">计算机网络实验</h2><p>  这里主要记录实验中遇到的问题与困惑；</p><h3 id="第一次实验课19.11.19">第一次实验课19.11.19</h3><p>  首先，什么是vlan，vlan即是Virtual Local Area Network，即虚拟局域网，对于处于相同网段的主机来说，它们的ip与对应子网掩码的结果一定相同，而对于处于相同vlan中的不同主机呢；这就涉及到vlan的划分，这里先给出几种划分方法，便于理解vlan；</p><ol type="1"><li>根据端口划分vlan，基于端口的vlan是划分vlan最简单也是最有效的方法，这实际上是某些交换端口的集合，网络管理员只需要管理和配置交换端口，而不管交换端口连接什么设备；</li><li>根据mac地址划分，对于每个mac地址，都配置它属于某一个组，它的优点在于，当用户物理位置移动时，即从一个交换机切换到其他交换机时，vlan不需要重新配置；</li><li>基于网络层划分，ip和ipx等，没太理解；</li><li>基于策略划分，比较常用的策略（与厂商设备的支持有关）有：按mac划分，按ip划分，按以太网协议划分，按网络的应用划分等；</li></ol><a id="more"></a><p>  这次实验使用Cisco模拟器实现如下：</p><center><img src="/images/net191119.png"></center><p>  其中PC0与PC2处于同一个vlan，而PC1和PC3处于同一个vlan；下面给出PC0~3的IP和子网掩码以及所在vlan；</p><ol type="1"><li>PC0：ip：192.168.1.1 mask：255.255.255.0 vlan：100</li><li>PC1：ip：192.168.1.2 mask：255.255.255.0 vlan：200</li><li>PC2：ip：192.168.1.3 mask：255.255.255.0 vlan：100</li><li>PC3：ip：192.168.1.4 mask：255.255.255.0 vlan：200</li></ol><p>  那么显然这四台PC机是在同一个网段中的；</p><p>  先后配置好ip及vlan之后，在PC0上去PingPC1、PC3，是没有响应的，只有PingPC2才会返回数据；之后我又将与PC0处在同一个vlan中的PC2的ip改为192.168.2.3，这样PC0与PC2不在同一个网段，而在同一个vlan中，之后我在PC0上去PingPC2，也没有响应；之后又问了学长，说不同网段是ping不通的，相同网段可以ping通；下面给出总结</p><p>  <strong>只有在相同网段及相同vlan中才能ping的通</strong>，不同网段、不同vlan都不行，那么这是为什么呢，为什么不同网段是ping不通，而相同网段可以ping的通；<strong>这里先留下疑问</strong>;</p><p>  这里我理解的vlan大概是，交换机或路由器对于网络的自主划分，这种划分与划分的方法有关；</p><p>  ICMP协议（网络控制报文协议），在网络层使用；允许主机和路由器报告差错情况和提供有关异常的报告。它的一个重要应用就是分组网间探测PING，用来测试两台主机之间的连通性。关于协议的具体细节暂时省略；</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;计算机网络实验&quot;&gt;计算机网络实验&lt;/h2&gt;
&lt;p&gt;  这里主要记录实验中遇到的问题与困惑；&lt;/p&gt;
&lt;h3 id=&quot;第一次实验课19.11.19&quot;&gt;第一次实验课19.11.19&lt;/h3&gt;
&lt;p&gt;  首先，什么是vlan，vlan即是Virtual Local Area Network，即虚拟局域网，对于处于相同网段的主机来说，它们的ip与对应子网掩码的结果一定相同，而对于处于相同vlan中的不同主机呢；这就涉及到vlan的划分，这里先给出几种划分方法，便于理解vlan；&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;根据端口划分vlan，基于端口的vlan是划分vlan最简单也是最有效的方法，这实际上是某些交换端口的集合，网络管理员只需要管理和配置交换端口，而不管交换端口连接什么设备；&lt;/li&gt;
&lt;li&gt;根据mac地址划分，对于每个mac地址，都配置它属于某一个组，它的优点在于，当用户物理位置移动时，即从一个交换机切换到其他交换机时，vlan不需要重新配置；&lt;/li&gt;
&lt;li&gt;基于网络层划分，ip和ipx等，没太理解；&lt;/li&gt;
&lt;li&gt;基于策略划分，比较常用的策略（与厂商设备的支持有关）有：按mac划分，按ip划分，按以太网协议划分，按网络的应用划分等；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Networks" scheme="https://yuggu.github.io/categories/Networks/"/>
    
      <category term="Fundmentals" scheme="https://yuggu.github.io/categories/Networks/Fundmentals/"/>
    
    
      <category term="network exper" scheme="https://yuggu.github.io/tags/network-exper/"/>
    
  </entry>
  
  <entry>
    <title>[HDU-4292] Food</title>
    <link href="https://yuggu.github.io/2019/10/28/HDU-4292-Food/"/>
    <id>https://yuggu.github.io/2019/10/28/HDU-4292-Food/</id>
    <published>2019-10-28T07:37:57.000Z</published>
    <updated>2019-10-28T08:26:31.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4292" target="_blank" rel="noopener"><span class="math inline">\(\text{HDU - 4292 Food}\)</span></a></p><h3 id="题意">题意</h3><p>  这里有<span class="math inline">\(N\)</span>个人、然后提供<span class="math inline">\(F\)</span>种食物、<span class="math inline">\(D\)</span>种饮料，并且对于<span class="math inline">\(F\)</span>种食物、<span class="math inline">\(D\)</span>种饮料，仅仅分别提供有限数量<span class="math inline">\(a_i,b_i\)</span>，现在对于<span class="math inline">\(n\)</span>个人，给出每一个人喜欢食物和饮料的编号，现问最多可以可以让多少人感到满足；如果一个人可以获得任意一份他喜欢的食物和任以一份他喜欢的饮料，那么他会感到满足；</p><p>  数据范围：多组测试样例，<span class="math inline">\(1\leq N,M,D\leq 200\)</span>.</p><a id="more"></a><h3 id="分析">分析</h3><p>  这一题需要使用最大流，所以关键部分是怎么建图；</p><p>  对于每个人，我们都已知他喜欢得到的食物和饮料的编号，我们需要给人与饮料、人与食物之间建立边，边权为1（每个人仅需获得一份食物和饮料即可满足）；并且我们想要满足更多的人，而如果一个人能够满足，那么我们可以看成是，有一个流量大小为1的流，按顺序流经食物、人、饮料（或者饮料、人、食物也可以），那么显然的我们需要定义一个起点，这个起点连接所有食物，这样一条边的容量即是该种食物的数量，同样我们需要连接所有饮料到一个汇点，这里就建立起了一个网络流，我们需要求出起点到汇点的最大流量；</p><p>  然而这里还有一些问题，如下图：</p><p><img src="/images/poj3080.PNG"></p><p>  这个图可能存在这样的情况，某一个人可能选择多于1份的食物或者饮料，所以对于任意一个人，我们需要将他看作两个节点，这两个节点相连接，流量为1，这样就能保证整个人最多只能选择一份食物和一份饮料。</p><p>  这题和<a href="http://poj.org/problem?id=3281" target="_blank" rel="noopener">Poj3281</a>几乎是一样的；</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,val,pre,next; </span><br><span class="line">&#125;e[<span class="number">3000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt, head[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt].pre=x;</span><br><span class="line">    e[cnt].to=y;</span><br><span class="line">    e[cnt].val=w;</span><br><span class="line">    e[cnt].next=head[x];</span><br><span class="line">    head[x]=cnt++;</span><br><span class="line">    e[cnt].pre=y;</span><br><span class="line">    e[cnt].to=x;</span><br><span class="line">    e[cnt].val=<span class="number">0</span>;</span><br><span class="line">    e[cnt].next=head[y];</span><br><span class="line">    head[y]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, f, d, v[<span class="number">200005</span>], dis[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= t; i++)</span><br><span class="line">        dis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">0</span>);</span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">-1</span>; i=e[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[i].val &amp;&amp; !dis[e[i].to]) &#123;</span><br><span class="line">                q.push(e[i].to);</span><br><span class="line">                dis[e[i].to] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; dis[e[i].to] &lt;&lt; " " &lt;&lt; e[i].to &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span> (e[i].to == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> res = flow, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">-1</span> &amp;&amp; res; i=e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = e[i].val, v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (val &amp;&amp; dis[v] == dis[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            k = dinic(v, min(res, val));</span><br><span class="line">            <span class="keyword">if</span> (!k) dis[v] = <span class="number">0</span>;</span><br><span class="line">            e[i].val -= k;</span><br><span class="line">            e[i ^ <span class="number">1</span>].val += k;</span><br><span class="line">            res -= k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; f &gt;&gt; d ) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        t = <span class="number">2</span> * n + f + d + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= t; i++)</span><br><span class="line">            head[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= f; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            add(<span class="number">0</span>, <span class="number">2</span> * n + i, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            add(f + <span class="number">2</span> * n + i, t, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            add(i, n + i, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= f; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j - <span class="number">1</span>] == <span class="string">'Y'</span>) add(<span class="number">2</span> * n + j, i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= d; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j - <span class="number">1</span>] == <span class="string">'Y'</span>) </span><br><span class="line">                    add(n + i, n + n + f + j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>, maxflow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (flow = dinic(<span class="number">0</span>, inf)) maxflow += flow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxflow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{HDU - 4292 Food}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  这里有&lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;个人、然后提供&lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt;种食物、&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;种饮料，并且对于&lt;span class=&quot;math inline&quot;&gt;\(F\)&lt;/span&gt;种食物、&lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt;种饮料，仅仅分别提供有限数量&lt;span class=&quot;math inline&quot;&gt;\(a_i,b_i\)&lt;/span&gt;，现在对于&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个人，给出每一个人喜欢食物和饮料的编号，现问最多可以可以让多少人感到满足；如果一个人可以获得任意一份他喜欢的食物和任以一份他喜欢的饮料，那么他会感到满足；&lt;/p&gt;
&lt;p&gt;  数据范围：多组测试样例，&lt;span class=&quot;math inline&quot;&gt;\(1\leq N,M,D\leq 200\)&lt;/span&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="网络流" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E7%BD%91%E7%BB%9C%E6%B5%81/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
    
      <category term="最大流" scheme="https://yuggu.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="网络流" scheme="https://yuggu.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>[POJ 3080] Blue Jeans</title>
    <link href="https://yuggu.github.io/2019/10/28/POJ-3080-Blue-Jeans/"/>
    <id>https://yuggu.github.io/2019/10/28/POJ-3080-Blue-Jeans/</id>
    <published>2019-10-28T05:12:12.000Z</published>
    <updated>2019-10-28T08:26:21.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://poj.org/problem?id=3080" target="_blank" rel="noopener"><span class="math inline">\(\text{POJ - 3080 Blue Jeans}\)</span></a></p><h3 id="题意">题意</h3><p>  给你<span class="math inline">\(m\)</span>个长度为60字符串，求它们的最长公共子串，如果有多个最长公共子串，输出字典序最小的，如果不存在或者最长公共子串的长度小于3则输出<code>no significant commonalities</code>；</p><p>  数据范围：共<span class="math inline">\(n\)</span>组测试样例，每组一个<span class="math inline">\(m\)</span>，<span class="math inline">\(2\leq m\leq 10\)</span>.</p><h3 id="分析">分析</h3><p>  由于数据范围比较小，我们可以<span class="math inline">\(kmp+\)</span>暴力，假如<span class="math inline">\(m\)</span>个串的集合为<span class="math inline">\(s\)</span>，那么我们枚举<span class="math inline">\(s[0]\)</span>的所有长度<span class="math inline">\(\geq\)</span> 3的所有子串，那么答案存在，必为其中的某一个，我们枚举这些子串，看对于一个子串是否能够同时和<span class="math inline">\(s[1\dots m]\)</span>进行匹配成功，我们可以将得到的<span class="math inline">\(s\)</span>集合排个序，使得我们找到一个可以与<span class="math inline">\(s[1\dots m]\)</span>所有串匹配的子串，就可以直接输出它；</p><a id="more"></a><p>  这里我用的java，对于s集合中串的排序，c++里的我们可以写一个compare函数作为sort函数的第三个参数，对于java是有点类似的，见代码。</p><h3 id="代码">代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Messick on 2019/10/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] next = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">        <span class="keyword">int</span> t = input.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = input.nextInt();</span><br><span class="line">            n--;</span><br><span class="line">            String s = input.next();</span><br><span class="line">            Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">            <span class="keyword">int</span> len = s.length();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">3</span>;j &lt;= len; j++)</span><br><span class="line">                    v.add(s.substring(i, j));</span><br><span class="line">            Collections.sort(v, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (o1.length() == o2.length())<span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">                    <span class="keyword">if</span> (o1.length() &lt; o2.length()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//            for (int i = 0; i &lt; v.size();i++)</span></span><br><span class="line"><span class="comment">//                System.out.println(v.get(i));</span></span><br><span class="line">            String [] so = <span class="keyword">new</span> String [<span class="number">15</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                so[i] = input.next();</span><br><span class="line">            <span class="keyword">int</span> flag = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                kmp(v.get(i));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (match(so[j], v.get(i)))<span class="keyword">continue</span>;</span><br><span class="line">                    flag = -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag != -<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == -<span class="number">1</span>)System.out.println(<span class="string">"no significant commonalities"</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(v.get(flag));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kmp</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Arrays.fill(next, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> l = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= l; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(i - <span class="number">1</span>) != s.charAt(j)) j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == s.charAt(j))j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l1 = s1.length(), l2 = s2.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= l1; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (j == l2 || s1.charAt(i - <span class="number">1</span>) != s2.charAt(j)))j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j))j++;</span><br><span class="line">            <span class="keyword">if</span> (j == l2)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3080&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{POJ - 3080 Blue Jeans}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个长度为60字符串，求它们的最长公共子串，如果有多个最长公共子串，输出字典序最小的，如果不存在或者最长公共子串的长度小于3则输出&lt;code&gt;no significant commonalities&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;  数据范围：共&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;组测试样例，每组一个&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(2\leq m\leq 10\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;  由于数据范围比较小，我们可以&lt;span class=&quot;math inline&quot;&gt;\(kmp+\)&lt;/span&gt;暴力，假如&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个串的集合为&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;，那么我们枚举&lt;span class=&quot;math inline&quot;&gt;\(s[0]\)&lt;/span&gt;的所有长度&lt;span class=&quot;math inline&quot;&gt;\(\geq\)&lt;/span&gt; 3的所有子串，那么答案存在，必为其中的某一个，我们枚举这些子串，看对于一个子串是否能够同时和&lt;span class=&quot;math inline&quot;&gt;\(s[1\dots m]\)&lt;/span&gt;进行匹配成功，我们可以将得到的&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;集合排个序，使得我们找到一个可以与&lt;span class=&quot;math inline&quot;&gt;\(s[1\dots m]\)&lt;/span&gt;所有串匹配的子串，就可以直接输出它；&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/"/>
    
    
      <category term="字符串" scheme="https://yuggu.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="https://yuggu.github.io/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>I/O流</title>
    <link href="https://yuggu.github.io/2019/10/25/I-O%E6%B5%81/"/>
    <id>https://yuggu.github.io/2019/10/25/I-O流/</id>
    <published>2019-10-25T11:26:28.000Z</published>
    <updated>2019-12-21T10:17:55.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缓冲区">缓冲区</h3><p>  遇到与底层相关的概念，往往都很模糊，所以才想要把这个问题解决清楚；</p><p>  那么什么是缓冲区呢，我为什么会有这样的疑问呢；接触到Java的I/O流，其中底层是怎么实现的，其中BufferedReader中的Buffered是什么意思，C语言中的输入、输出底层是什么实现的，它们跟缓冲有什么关系；</p><p>  缓冲区（Buffer）就是在内存中预留指定大小的存储空间用来对I/O的数据做临时存储，这部分预留的内存空间叫缓冲区。</p><p>  对于scanf()来说，它是从缓冲区里读取数据到对应的变量里，如果缓冲区没有数据，这时候执行scanf()，它会因读取不到数据而一直等待，从而发生死锁；</p><a id="more"></a><h3 id="java-file类">Java File类</h3><p>  在java中，File对象是一个对文件或者目录名的抽象，在windows中即是文件夹，它不是真实硬盘里的文件或者文件夹，File实例是在内存中new出来的一个对象，实际上它只是 与硬盘上的文件或者文件夹进行了映射，它的构造函数参见<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">File类构造函数</a>，他不含有无参的构造函数，即它这个new出来的对象，根据构造函数参数代表的文件进行映射，如果文件不存在，那么对于这个file实例来说，它不会发生错误，它的属性依然拥有默认值，不过当如果通过流去读取时，会发生错误；构造函数参数文件名，不区分大小写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Created by Messick on 2019/10/26. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\1.txt"</span>);  </span><br><span class="line">        System.out.println(file.canExecute());  </span><br><span class="line">        System.out.println(file.canRead());  </span><br><span class="line">        System.out.println(file.canWrite());  </span><br><span class="line">        System.out.println(file.isHidden());  </span><br><span class="line">        System.out.println(file.isFile());  </span><br><span class="line">        System.out.println(file.isDirectory());  </span><br><span class="line">        System.out.println(file.length());</span><br><span class="line">        System.out.println(file.lastModified());</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\2.txt"</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">boolean</span> v1 = file1.createNewFile();  </span><br><span class="line">            System.out.println(v1);  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\3"</span>);  </span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\l1\\l2"</span>);  </span><br><span class="line">        System.out.println(file2.mkdir());  </span><br><span class="line">        <span class="comment">//递归创建文件夹</span></span><br><span class="line">        System.out.println(file3.mkdirs());</span><br><span class="line">        System.out.println(file1.delete());  </span><br><span class="line">        System.out.println(file2.delete());</span><br><span class="line">        <span class="comment">//删除文件或空文件夹</span></span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-文件流">Java 文件流</h3><p>  分为字节型文件流和字符型文件流；</p><p>  文件存在的原因，是因为文件存储在硬盘上，是永久保存的，而类似变量、集合，都是暂时性地存储，并且文件可以存储很多份地信息。</p><p>  对于文件的读取，实际上是将文件里的信息读取，存到内存中的集合等容器中，然后对此容器进行操作，此容器相当于缓存。而文件流即是对于文件的读取或者写入。</p><h4 id="字节型文件流">字节型文件流</h4><p>  FileInputStream/FileOutputStream</p><ol type="1"><li>FileInputStream是InputStream的子类，字节型输入流都是InputStream的子类。它的构造函数有三个，分别是字符串、file对象，第三个不做了解；</li><li>FileInputStream.read()，java对该方法进行了重载，对于不带参数的方法，为读取一个字节，返回值为读取字节对应的Unicode；实际上都是当作字符来读取，如果读取到汉字，而汉字编码又不是一个字节的情况下，那么仅读取该汉字的一字节的数据，如果输出这个单字节数据的Unicode码对应的char，可能会是乱码；对于带参数的情况，参数可以是一个byte数组，即一次性读取byte数组大小的数据，并存到该byte数组中；</li></ol><p>  如图，使用一个3字节大小的byte数组去成功读取一个汉字，所以，可以想到的是，如果我们去读取1字节，那么仅仅是该汉字的一部分；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Created by Messick on 2019/10/26. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\1.txt"</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);  </span><br><span class="line">            <span class="comment">//读取一个字节 返回为读取字节int的Unicode码  </span></span><br><span class="line">            <span class="keyword">int</span> t = fis.read();</span><br><span class="line">            <span class="comment">//byte [] a = new byte[10003];</span></span><br><span class="line">            <span class="comment">////文件读取到byte数组里,cnt为读取到的有效字节个数，包括\r\n</span></span><br><span class="line">            <span class="comment">//int cnt  = fis.read(a);  </span></span><br><span class="line">            <span class="comment">//for(byte x:a) &#123;  </span></span><br><span class="line">            <span class="comment">//    System.out.println(x);</span></span><br><span class="line">            <span class="comment">//    流管道中剩余的缓存的字节数</span></span><br><span class="line">            <span class="comment">//    System.out.println(fis.available());  </span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="keyword">while</span> (t != -<span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="comment">//字节对应的Unicode码  </span></span><br><span class="line">                System.out.println(t);  </span><br><span class="line">                t = fis.read();  </span><br><span class="line">                <span class="comment">//这个过程中，流管道中缓存的字节数逐渐减少至0</span></span><br><span class="line">                System.out.println(fis.available());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 需要注意的是，在文件中，每一行的结尾一定是\r\n，分别代表换行符和回车，对应的Unicode码为13、10 */</span></span><br></pre></td></tr></table></figure><p>  同FileInputStream，FileOutputStream是OutputStream的子类，字节型输出流都是OutputStream的子类；在这里，如果创建文件输出流，文件路径不存在，则创建该文件；对于FileInputStream则会抛出异常；<strong>并且，FileOutputStream实例含有一个两个参数的构造函数，第一个参数为文件路径，第二个参数为一个布尔型，为true代表可追加，否则每次新建一个文件输出流，文件内容都会被清空。</strong></p><ol type="1"><li>FileOutputStream，该类构造函数第一种，参数为File类实例，还有一个boolean参数 默认false，第二种构造函数和第一种类似，不过把File换成了String；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Created by Messick on 2019/10/26. */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\1.txt"</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 流管道  </span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">byte</span> [] b = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">            String str = <span class="string">"1 + 1 = 2"</span>;</span><br><span class="line">            fos.write(b);</span><br><span class="line">            fos.write(str.getBytes());</span><br><span class="line">            fos.write(<span class="number">102</span>);  </span><br><span class="line">            fos.write(<span class="number">103</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符型文件流">字符型文件流</h4><p>  FileReader/FileWriter；</p><ol type="1"><li><p>FileReader是字符型文件输入流，是InputStreamReader的子类，而InputStreamReader是Reader的子类，它含有两个构造函数，第一种，含一个参数是String，即文件路径，第二种参数是一个File实例；</p></li><li><p>FileReader.read()，对于它不含参数的方法，读取一个字符，返回值为该字符的Unicode码；对于含参数的方法，它的参数应该是一个空的char数组，即将通过流将文件中字符读到char数组中，返回值为读取的有效字符数；</p></li><li><p>FileWriter，常用方法，FileWriter.wirte()，参数可以是你想要写到文件里的字符对应的Unicode码，或者是一个字符数组，或者是一个String，不能是字符；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Created by Messick on 2019/10/26. */</span><span class="comment">//你哈珀  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"D:\\1.txt"</span>);  </span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(file);  </span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);  </span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">int</span> code = fr.read();  </span><br><span class="line">            System.out.println((<span class="keyword">char</span>)code);  </span><br><span class="line">        &#125; <span class="keyword">catch</span>(FileNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-缓冲流">Java 缓冲流</h3><p>  同样的，也分为字节型缓冲流和字符型缓冲流，BufferedInputStream/BufferedOutputStream，BufferedReader/BufferedWriter；</p><p>  使用缓冲的目的即是为了提高速度，比如，一次读取很多字节，但不写入磁盘，先放到内存中，等凑够了缓冲区的大小一次性写入磁盘，这样减少了磁盘操作次数，会提高速度；</p><p>  所以，缓冲流就是实现了缓冲功能的输入流和输出流，使用带缓冲的输入输出流，效率更高速度更快。</p><p>  <code>BufferedInputStream/BufferedOutputStream</code>本质上是通过一个内部缓冲字节数组实现的，那么<code>BufferedReader/BufferedWriter</code>本质上是通过一个内部缓冲字符数组实现的。具体参见java API；</p><p>  需要注意，缓冲流的构造函数的参数需要是一个文件流的实例；</p><h3 id="java序列化与反序列化">Java序列化与反序列化</h3><p>  之前学过了也讲过了<span class="math inline">\(\dots\)</span></p><h3 id="待续">待续</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缓冲区&quot;&gt;缓冲区&lt;/h3&gt;
&lt;p&gt;  遇到与底层相关的概念，往往都很模糊，所以才想要把这个问题解决清楚；&lt;/p&gt;
&lt;p&gt;  那么什么是缓冲区呢，我为什么会有这样的疑问呢；接触到Java的I/O流，其中底层是怎么实现的，其中BufferedReader中的Buffered是什么意思，C语言中的输入、输出底层是什么实现的，它们跟缓冲有什么关系；&lt;/p&gt;
&lt;p&gt;  缓冲区（Buffer）就是在内存中预留指定大小的存储空间用来对I/O的数据做临时存储，这部分预留的内存空间叫缓冲区。&lt;/p&gt;
&lt;p&gt;  对于scanf()来说，它是从缓冲区里读取数据到对应的变量里，如果缓冲区没有数据，这时候执行scanf()，它会因读取不到数据而一直等待，从而发生死锁；&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yuggu.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java随笔" scheme="https://yuggu.github.io/tags/java%E9%9A%8F%E7%AC%94/"/>
    
      <category term="I/O" scheme="https://yuggu.github.io/tags/I-O/"/>
    
      <category term="缓冲区" scheme="https://yuggu.github.io/tags/%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu-P3375] KMP字符串匹配</title>
    <link href="https://yuggu.github.io/2019/10/24/Luogu-P3375-KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>https://yuggu.github.io/2019/10/24/Luogu-P3375-KMP字符串匹配/</id>
    <published>2019-10-24T12:41:57.000Z</published>
    <updated>2019-10-28T05:11:13.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://www.luogu.org/problem/P3375" target="_blank" rel="noopener"><span class="math inline">\(\text{Luogu-P3375 KMP字符串匹配}\)</span></a></p><h3 id="题意">题意</h3><p>  输入两个串<span class="math inline">\(s_1、s_2\)</span>，求出<span class="math inline">\(s_2\)</span>在<span class="math inline">\(s_1\)</span>中所有出现的位置（匹配的开始位置），并输出子串的<span class="math inline">\(next\)</span>数组的；</p><p>  数据范围：<span class="math inline">\(s_1\)</span>长度为<span class="math inline">\(n\)</span>，<span class="math inline">\(s_2\)</span>长度为<span class="math inline">\(M\)</span>，<span class="math inline">\(n\leq 1000000,m\leq 1000000\)</span>.</p><h3 id="分析">分析</h3><p>  这是一个<span class="math inline">\(kmp\)</span>的模板题；</p><p>  这里我用了<span class="math inline">\(Java\)</span>来写，然而一直TLE，不知什么原因，最后发现了原因，在于String的使用；</p><p>  在<span class="math inline">\(ACM\)</span>竞赛中需要特别注意Java中String及与其有关的一些函数；String是一个不可变的对象，每次对String进行修改时都等同于生成了一个新的String临时对象，如果需要经常对其修改，那么这是相当浪费时间的；</p><p>  在此题中，我使用了一个String.format()函数来控制格式的输出，这个函数会返回一个String，而我又在for里反复使用了它，所以会TLE；我试了仅仅使用String.format()输出了一个元素，是不会超时的，所以仅仅是<span class="math inline">\(O(1)\)</span>的使用它是不会超时的。</p><a id="more"></a><h3 id="代码">代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.*;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] next = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000003</span>];  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n, m;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Scanner input =<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));  </span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedOutputStream(System.out));  </span><br><span class="line">        String s1 = input.nextLine(), s2 = input.nextLine();  </span><br><span class="line">        n = s1.length();  </span><br><span class="line">        m = s2.length();  </span><br><span class="line">        kmp(s2);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (j == m || s1.charAt(i - <span class="number">1</span>) != s2.charAt(j)))j = next[j];  </span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j)) &#123;  </span><br><span class="line">                j++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;  </span><br><span class="line">                out.println(i - j + <span class="number">1</span>);  </span><br><span class="line">                <span class="comment">// 在s1中，和s2匹配的各串之间可以覆盖  </span></span><br><span class="line">                j = next[j];  </span><br><span class="line">                <span class="comment">// j = 0 在s1中，和s2匹配的各串之间可以覆盖  </span></span><br><span class="line">                <span class="comment">// 即下一个匹配的串的开始位置，必须在上一个匹配的串的结束位置的后面  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m - <span class="number">1</span>; i++) &#123;  </span><br><span class="line">           out.print(next[i] + <span class="string">" "</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        out.println(String.format(<span class="string">"%d"</span>,next[m]));  </span><br><span class="line">        out.flush();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kmp</span><span class="params">(String s)</span> </span>&#123;  </span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;  </span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(i - <span class="number">1</span>) != s.charAt(j)) j = next[j];  </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == s.charAt(j)) j++;  </span><br><span class="line">            next[i] = j;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P3375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{Luogu-P3375 KMP字符串匹配}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  输入两个串&lt;span class=&quot;math inline&quot;&gt;\(s_1、s_2\)&lt;/span&gt;，求出&lt;span class=&quot;math inline&quot;&gt;\(s_2\)&lt;/span&gt;在&lt;span class=&quot;math inline&quot;&gt;\(s_1\)&lt;/span&gt;中所有出现的位置（匹配的开始位置），并输出子串的&lt;span class=&quot;math inline&quot;&gt;\(next\)&lt;/span&gt;数组的；&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(s_1\)&lt;/span&gt;长度为&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(s_2\)&lt;/span&gt;长度为&lt;span class=&quot;math inline&quot;&gt;\(M\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(n\leq 1000000,m\leq 1000000\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;  这是一个&lt;span class=&quot;math inline&quot;&gt;\(kmp\)&lt;/span&gt;的模板题；&lt;/p&gt;
&lt;p&gt;  这里我用了&lt;span class=&quot;math inline&quot;&gt;\(Java\)&lt;/span&gt;来写，然而一直TLE，不知什么原因，最后发现了原因，在于String的使用；&lt;/p&gt;
&lt;p&gt;  在&lt;span class=&quot;math inline&quot;&gt;\(ACM\)&lt;/span&gt;竞赛中需要特别注意Java中String及与其有关的一些函数；String是一个不可变的对象，每次对String进行修改时都等同于生成了一个新的String临时对象，如果需要经常对其修改，那么这是相当浪费时间的；&lt;/p&gt;
&lt;p&gt;  在此题中，我使用了一个String.format()函数来控制格式的输出，这个函数会返回一个String，而我又在for里反复使用了它，所以会TLE；我试了仅仅使用String.format()输出了一个元素，是不会超时的，所以仅仅是&lt;span class=&quot;math inline&quot;&gt;\(O(1)\)&lt;/span&gt;的使用它是不会超时的。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/"/>
    
    
      <category term="字符串" scheme="https://yuggu.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="https://yuggu.github.io/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>[ABC143] E.Travel by Car</title>
    <link href="https://yuggu.github.io/2019/10/22/ABC143-E.Travel-by-Car/"/>
    <id>https://yuggu.github.io/2019/10/22/ABC143-E.Travel-by-Car/</id>
    <published>2019-10-22T13:33:51.000Z</published>
    <updated>2019-10-24T06:55:15.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://atcoder.jp/contests/abc143/tasks/abc143_e" target="_blank" rel="noopener"><span class="math inline">\(\text{ABC143 E - Travel by Car}\)</span></a></p><h3 id="题意">题意</h3><p>  给你一个由<span class="math inline">\(n\)</span>个城镇（编号<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>）和<span class="math inline">\(m\)</span>条路组成的无向图，第<span class="math inline">\(i\)</span>条路的距离为<span class="math inline">\(C_i\)</span>； 你将要乘车去一些城镇旅游，你的汽车的油箱的容量是<span class="math inline">\(L\)</span>，在路上行驶<span class="math inline">\(1\)</span>单位的距离将消耗<span class="math inline">\(1\)</span>单位的油，在你旅游途中的每个城镇，你都可以选择加油与不加油，选择加油，你可以将你油箱加满油；现在将对你进行<span class="math inline">\(Q\)</span>次询问，每次询问从城镇<span class="math inline">\(S_i\)</span>到城镇<span class="math inline">\(T_i\)</span>，旅途中的最少加油次数，如果不能抵达输出<span class="math inline">\(-1\)</span>；</p><p>  数据范围：<span class="math inline">\(2\leq n\leq 300,0\leq M\leq \frac{n(n-1)}{2},1\leq L\leq 10^{9}，S_i\neq T_i,1\leq C_i\leq 10^{9},1\leq Q\leq N(N-1)\)</span>.</p><a id="more"></a><h3 id="分析">分析</h3><p>  这里的查询最多可以有<span class="math inline">\(N(N-1)\)</span>个，所以我们考虑预处理出任意两点之间的答案；</p><p>  首先可以寻找出所有的起始终止城镇<span class="math inline">\((s_i,t_i)\)</span>，使得从<span class="math inline">\(s_i\)</span>到<span class="math inline">\(t_i\)</span>加一次油即可到达，可以通过计算任意两点之间的最短路得出，然后我们在此基础上处理，若两个 城镇之间距离<span class="math inline">\(\leq L\)</span>，那么它们之间仅加一次油即可，所以将该条边权值赋为<span class="math inline">\(1\)</span>，若<span class="math inline">\(&gt;L\)</span>则赋值为<span class="math inline">\(\infty\)</span>，由此计算任意两城镇之间最短路，此时的最短路，即是最少加油次数；</p><p>  对于任意<span class="math inline">\((s_i,t_i)\)</span>，我们都贪心的考虑，将路径分割成若干段，每一段距离都<span class="math inline">\(\leq L\)</span>，我们希望得到尽量少的段，所以我们预处理了任意两城市之间的最短路；</p><p>  注意开始油箱是满的；</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, l, q, cost[<span class="number">304</span>][<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; l;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    clr(cost, inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        cost[a][b] = cost[b][a] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    floyd();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            cost[i][j] = (cost[i][j] &lt;= l ? <span class="number">1</span> : inf);</span><br><span class="line">    floyd();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (cost[a][b] == inf ? <span class="number">-1</span> : cost[a][b] - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc143/tasks/abc143_e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{ABC143 E - Travel by Car}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你一个由&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城镇（编号&lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;）和&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;条路组成的无向图，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;条路的距离为&lt;span class=&quot;math inline&quot;&gt;\(C_i\)&lt;/span&gt;； 你将要乘车去一些城镇旅游，你的汽车的油箱的容量是&lt;span class=&quot;math inline&quot;&gt;\(L\)&lt;/span&gt;，在路上行驶&lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;单位的距离将消耗&lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;单位的油，在你旅游途中的每个城镇，你都可以选择加油与不加油，选择加油，你可以将你油箱加满油；现在将对你进行&lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt;次询问，每次询问从城镇&lt;span class=&quot;math inline&quot;&gt;\(S_i\)&lt;/span&gt;到城镇&lt;span class=&quot;math inline&quot;&gt;\(T_i\)&lt;/span&gt;，旅途中的最少加油次数，如果不能抵达输出&lt;span class=&quot;math inline&quot;&gt;\(-1\)&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(2\leq n\leq 300,0\leq M\leq \frac{n(n-1)}{2},1\leq L\leq 10^{9}，S_i\neq T_i,1\leq C_i\leq 10^{9},1\leq Q\leq N(N-1)\)&lt;/span&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python程序随笔:191016</title>
    <link href="https://yuggu.github.io/2019/10/16/python%E7%A8%8B%E5%BA%8F%E9%9A%8F%E7%AC%94-191016/"/>
    <id>https://yuggu.github.io/2019/10/16/python程序随笔-191016/</id>
    <published>2019-10-16T11:24:14.000Z</published>
    <updated>2019-10-17T06:30:31.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现文件的自动分类">实现文件的自动分类</h3><h4 id="程序的实现">程序的实现</h4><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line">  </span><br><span class="line">path = <span class="string">'C:\\Users\\19143\\Desktop\\test\\'</span>  </span><br><span class="line">files = os.listdir(path)  </span><br><span class="line">print(files)  </span><br><span class="line">folder_list = []  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:  </span><br><span class="line">    <span class="comment"># 连接目录与文件名得到绝对路径，这里的path需要使用绝对路径，不然程序会自动到python程序路径下寻找</span></span><br><span class="line">    <span class="comment"># 所以也可以把文件放在python程序路径下</span></span><br><span class="line">    f_absolute_path = path + f</span><br><span class="line">    <span class="comment"># 如果是文件夹就单独处理，把它的路径记录下来  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(f_absolute_path):  </span><br><span class="line">        folder_list.append(f_absolute_path)  </span><br><span class="line">        <span class="keyword">continue</span>  </span><br><span class="line">    <span class="comment"># folder_name即是一个以f文件后缀名来命名的文件夹的绝对路径</span></span><br><span class="line">    folder_name = path + f.split(<span class="string">'.'</span>)[<span class="number">-1</span>]  </span><br><span class="line">    <span class="comment"># print(folder_name)  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_name):  </span><br><span class="line">        <span class="comment"># 该文件夹不存在，就创建</span></span><br><span class="line">        os.makedirs(folder_name)  </span><br><span class="line">        shutil.move(f_absolute_path, folder_name)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        shutil.move(f_absolute_path, folder_name)  </span><br><span class="line">  </span><br><span class="line">print(folder_list)  </span><br><span class="line"><span class="keyword">if</span> len(folder_list) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 在path目录下创建一个名称为'all_folder'的文件夹  </span></span><br><span class="line">    new_folder_path = path + <span class="string">'all_folder'</span>  </span><br><span class="line">    os.mkdir(new_folder_path)  </span><br><span class="line">    print(new_folder_path)  </span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> folder_list:  </span><br><span class="line">        print(folder)  </span><br><span class="line">        <span class="comment"># 将path路径下的文件夹放入，all_folder下，(不包括以后缀名分类创建的文件夹)</span></span><br><span class="line">        shutil.move(folder, new_folder_path)</span><br></pre></td></tr></table></figure><h4 id="遇到的问题">遇到的问题</h4><ul><li>os.path.isfile()用来判断是文件还是文件夹，os.path.isdir()用来判断是不是目录</li><li>os.path.abspath()用来获取文件或目录的绝对路径，目录的绝对路径包含它本身这一级</li><li>os.mkdir()只能创建一级目录，os.makedirs()可以递归创建目录</li><li>os.rmdir()为删除目录，它只能删空目录，shutil.rmtree()可以递归删除非空目录，另外os.remove()用来删除文件，若路径指定文件不存在会报错</li></ul><h3 id="取出一个文件夹内所有文件包括子文件夹">取出一个文件夹内所有文件（包括子文件夹）</h3><h4 id="程序实现">程序实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line">  </span><br><span class="line">path = <span class="string">'C:\\Users\\19143\\Desktop\\steamcommunity_302_V8_hotfix\\'</span>  </span><br><span class="line"><span class="comment"># error  </span></span><br><span class="line"><span class="comment"># new_path = 'C:\\Users\\19143\\Desktop\\steamcommunity_302_V8_hotfix\\all_files\\'  </span></span><br><span class="line">  </span><br><span class="line">new_path = <span class="string">'C:\\Users\\19143\\Desktop\\all_files'</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_path):  </span><br><span class="line">    os.mkdir(new_path)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> roots, dirs, files <span class="keyword">in</span> os.walk(path):  </span><br><span class="line">    <span class="comment">#（逃） if not roots.endswith('\\'):  </span></span><br><span class="line">    <span class="comment">#（逃）    roots += '\\'  </span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:  </span><br><span class="line">        print(roots,<span class="string">'\t'</span>,f,<span class="string">'\t'</span>,dirs)  </span><br><span class="line">        <span class="comment"># shutil.move(f, new_path)  </span></span><br><span class="line">    shutil.copy(os.path.join(roots, f), new_path)</span><br></pre></td></tr></table></figure><h4 id="遇到的问题-1">遇到的问题</h4><ul><li><p>本来我是想dfs搜索所有文件夹的，然而我发现了os.walk()这个方便的函数，<strong>嗯，真香</strong>os.walk(top[,topdown=True[,onerror=None[,followlinks=False]]])是一个简单易用的文件、目录遍历器，帮助我们高效处理文件目录方面的事情，top为所要遍历的目录的地址，topdown为真优先遍历top目录，否则优先遍历子目录，followlinks为真，会遍历快捷方式实际所指目录；它的返回值是一个生成器，所以我们需要不断的遍历它，来获得我们需要的信息，每次遍历的对象都是返回的是一个三元组(root,dirs,files)</p><ol type="1"><li>root指的是当前正在遍历的这个文件夹的本身的绝对路径</li><li>dirs是一个list，内容是当前遍历文件夹里的所有的文件夹的名称（不包含子目录）</li><li>files也是list，内容是当前遍历文件夹里的所有文件的名称（不含子目录，且包含后缀名）</li></ol></li><li><p>注意os.path.join(path,file)的使用，之前我没用这个，我写的我给注释了，<strong>真的丑</strong></p></li><li><ul><li>shutil.move()与shutil.copy()函数，使用需要注意这个问题，它们分辨两个文件的方法是看它们的路径，即同一个文件分别放到两个不同路径下得到两个文件，这两个函数把这两个文件看成不同文件；<strong>另外，如果你把test文件夹下的文件test，使用shutil.move()移动或使用shutil.copy()复制到test文件夹下，即把某目录下的文件移动或复制到该目录下，这两种操作对于这两个函数都是不行的，会报错</strong>，如下面那张图片所示；</li></ul></li><li><p>关于你想要把文件保存到哪个文件夹，在这里即是new_path，这个new_path不能是path的子目录；有这样一种情况，假如path下直接有一个文件test，也有你的new_path，你遍历path下的文件，把test包括其他所有文件（不包括子目录）放入new_path中，然后os.walk()便开始遍历path子目录，比如new_path，（实际上，new_path你是不希望被访问的，它是专门用来存放文件的）。然后你遍历new_path中的文件，比如test，你就又访问了一次这个文件，然后复制test放入new_path中；然后它就会报错，比如：</p></li></ul><p><img src="/images/py191017.png" width="800px"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现文件的自动分类&quot;&gt;实现文件的自动分类&lt;/h3&gt;
&lt;h4 id=&quot;程序的实现&quot;&gt;程序的实现&lt;/h4&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yuggu.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://yuggu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Python" scheme="https://yuggu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校第一场</title>
    <link href="https://yuggu.github.io/2019/10/13/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>https://yuggu.github.io/2019/10/13/2019牛客多校第一场/</id>
    <published>2019-10-13T07:29:41.000Z</published>
    <updated>2019-10-16T10:35:19.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="e.-abba">E. ABBA</h3><h4 id="题意">题意：</h4><p>  你拥有一个长度为<span class="math inline">\(2*(n+m)\)</span>的字符串，它含有<span class="math inline">\(n+m\)</span>个<span class="math inline">\(A\)</span>，以及<span class="math inline">\(n+m\)</span>个<span class="math inline">\(B\)</span>，你把个字符串给分解，最后可以得到<span class="math inline">\(n\)</span>个子序列<span class="math inline">\(AB\)</span>与<span class="math inline">\(m\)</span>个子序列<span class="math inline">\(BA\)</span>，问这个字符串有多少种，最终结果对（<span class="math inline">\(10^9+7\)</span>）取余；比如<span class="math inline">\(\underline{A}\space\underline{BA}\space\underline{B}\)</span>，第一个<span class="math inline">\(A\)</span>与最后一个<span class="math inline">\(B\)</span>匹配，中间的<span class="math inline">\(AB\)</span>进行匹配，这就是对应<span class="math inline">\(n=1,m=1\)</span>的一种合法的字符串；</p><h4 id="分析">分析：</h4><p>  使用<span class="math inline">\(dp[i][j]\)</span>表示含有<span class="math inline">\(i\)</span>个<span class="math inline">\(A\)</span>和<span class="math inline">\(j\)</span>个<span class="math inline">\(B\)</span>的合法字符串的个数，目标为<span class="math inline">\(dp[n+m][n+m]\)</span>；</p><p>  首先，一个事实是，对于一个合法的含<span class="math inline">\(n\)</span>个<span class="math inline">\(AB\)</span>含<span class="math inline">\(m\)</span>个<span class="math inline">\(BA\)</span>的串，考虑它的前<span class="math inline">\(n\)</span>个<span class="math inline">\(A\)</span>作为<span class="math inline">\(AB\)</span>的<span class="math inline">\(A\)</span>，考虑前<span class="math inline">\(m\)</span>个<span class="math inline">\(B\)</span>作为<span class="math inline">\(BA\)</span>的<span class="math inline">\(B\)</span>;</p><p>  然后，对于<span class="math inline">\(i、j\)</span>，考虑在当前位置插入<span class="math inline">\(A\)</span>，或者在当前位置插入<span class="math inline">\(B\)</span>，那么我们有转移方程： <span class="math display">\[dp[i][j]=dp[i-1][j]+dp[i][j-1]\]</span></p><p>  然而中间并非所有的状态都合法；比如对于<span class="math inline">\(n=1,m=1\)</span>的情况，<span class="math inline">\(AABB\)</span>是不可行的，它没有被添加到最后的结果中，原因在于，在状态转移的过程中，从<span class="math inline">\(A\)</span>到<span class="math inline">\(AA\)</span>的转移是不可行的；第一个<span class="math inline">\(A\)</span>用作<span class="math inline">\(AB\)</span>的A，而对于第二个<span class="math inline">\(A\)</span>来说，由于此时<span class="math inline">\(AB\)</span>的<span class="math inline">\(A\)</span>数量已经够了，它应该是<span class="math inline">\(BA\)</span>的<span class="math inline">\(A\)</span>，所以它前面必须有<span class="math inline">\(B\)</span>，那么<span class="math inline">\(AA\)</span>显然是不可行的；</p><p>  如果在之前情况基础上，在最后位置插入<span class="math inline">\(A\)</span>，那么<span class="math inline">\(B\)</span>的数量<span class="math inline">\(j\)</span>必须不小于，<span class="math inline">\(A\)</span>的数量<span class="math inline">\(i\)</span>减去组成<span class="math inline">\(n\)</span>个<span class="math inline">\(AB\)</span>的<span class="math inline">\(A\)</span>的数量，即<span class="math inline">\(i-n&lt;=j\)</span>，如果插入<span class="math inline">\(B\)</span>，也同理；</p><a id="more"></a><h4 id="代码">代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=j+n)&#123;</span><br><span class="line">                    dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=i+m)&#123;</span><br><span class="line">                    dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n+m][n+m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;e.-abba&quot;&gt;E. ABBA&lt;/h3&gt;
&lt;h4 id=&quot;题意&quot;&gt;题意：&lt;/h4&gt;
&lt;p&gt;  你拥有一个长度为&lt;span class=&quot;math inline&quot;&gt;\(2*(n+m)\)&lt;/span&gt;的字符串，它含有&lt;span class=&quot;math inline&quot;&gt;\(n+m\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;，以及&lt;span class=&quot;math inline&quot;&gt;\(n+m\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;，你把个字符串给分解，最后可以得到&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个子序列&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;与&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个子序列&lt;span class=&quot;math inline&quot;&gt;\(BA\)&lt;/span&gt;，问这个字符串有多少种，最终结果对（&lt;span class=&quot;math inline&quot;&gt;\(10^9+7\)&lt;/span&gt;）取余；比如&lt;span class=&quot;math inline&quot;&gt;\(\underline{A}\space\underline{BA}\space\underline{B}\)&lt;/span&gt;，第一个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;与最后一个&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;匹配，中间的&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;进行匹配，这就是对应&lt;span class=&quot;math inline&quot;&gt;\(n=1,m=1\)&lt;/span&gt;的一种合法的字符串；&lt;/p&gt;
&lt;h4 id=&quot;分析&quot;&gt;分析：&lt;/h4&gt;
&lt;p&gt;  使用&lt;span class=&quot;math inline&quot;&gt;\(dp[i][j]\)&lt;/span&gt;表示含有&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;的合法字符串的个数，目标为&lt;span class=&quot;math inline&quot;&gt;\(dp[n+m][n+m]\)&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;  首先，一个事实是，对于一个合法的含&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;含&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(BA\)&lt;/span&gt;的串，考虑它的前&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;作为&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;，考虑前&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;作为&lt;span class=&quot;math inline&quot;&gt;\(BA\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;;&lt;/p&gt;
&lt;p&gt;  然后，对于&lt;span class=&quot;math inline&quot;&gt;\(i、j\)&lt;/span&gt;，考虑在当前位置插入&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;，或者在当前位置插入&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;，那么我们有转移方程： &lt;span class=&quot;math display&quot;&gt;\[dp[i][j]=dp[i-1][j]+dp[i][j-1]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  然而中间并非所有的状态都合法；比如对于&lt;span class=&quot;math inline&quot;&gt;\(n=1,m=1\)&lt;/span&gt;的情况，&lt;span class=&quot;math inline&quot;&gt;\(AABB\)&lt;/span&gt;是不可行的，它没有被添加到最后的结果中，原因在于，在状态转移的过程中，从&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;到&lt;span class=&quot;math inline&quot;&gt;\(AA\)&lt;/span&gt;的转移是不可行的；第一个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;用作&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;的A，而对于第二个&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;来说，由于此时&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;数量已经够了，它应该是&lt;span class=&quot;math inline&quot;&gt;\(BA\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;，所以它前面必须有&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;，那么&lt;span class=&quot;math inline&quot;&gt;\(AA\)&lt;/span&gt;显然是不可行的；&lt;/p&gt;
&lt;p&gt;  如果在之前情况基础上，在最后位置插入&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;，那么&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;的数量&lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt;必须不小于，&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;的数量&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;减去组成&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个&lt;span class=&quot;math inline&quot;&gt;\(AB\)&lt;/span&gt;的&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;的数量，即&lt;span class=&quot;math inline&quot;&gt;\(i-n&amp;lt;=j\)&lt;/span&gt;，如果插入&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;，也同理；&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://yuggu.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://yuggu.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>DES(数据加密标准)</title>
    <link href="https://yuggu.github.io/2019/10/08/DES-%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86/"/>
    <id>https://yuggu.github.io/2019/10/08/DES-数据加密标准/</id>
    <published>2019-10-08T03:15:23.000Z</published>
    <updated>2019-10-08T03:24:46.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="des-数据加密标准">DES( 数据加密标准)</h2><h3 id="des">DES</h3><p>  <span class="math inline">\(\text{DES}\)</span>是一种数据加密标准，是一种对称加密算法，<span class="math inline">\(\text{DES}\)</span>算法的入口参数有三个：<span class="math inline">\(\text{Key、Date、Mode}\)</span>。其中<span class="math inline">\(\text{Key}\)</span>为8个字节共64位，是<span class="math inline">\(\text{DES}\)</span>算法的工作密钥；<span class="math inline">\(\text{Date}\)</span>也为8个字节64位，是要被加密或解密的数据；<span class="math inline">\(\text{Mode}\)</span>为<span class="math inline">\(\text{DES}\)</span>的工作方式，有两种：加密或解密。</p><p>  <span class="math inline">\(\text{DES}\)</span>算法是这样工作的：若<span class="math inline">\(\text{Mode}\)</span>为加密，则用<span class="math inline">\(\text{Key}\)</span>去把数据<span class="math inline">\(\text{Date}\)</span>进行加密，生成<span class="math inline">\(\text{Date}\)</span>的密码形式（64位）作为<span class="math inline">\(\text{DES}的输出结果；若\)</span>为解密，则用<span class="math inline">\(\text{Key}\)</span>去把密码形式的数据<span class="math inline">\(\text{Data}\)</span>解密，还原为<span class="math inline">\(\text{Date}\)</span>的明码形式（64位）作为<span class="math inline">\(\text{DES}\)</span>的输出结果。在通信网络的两端，双方约定一致的<span class="math inline">\(\text{Key}\)</span>，在通信的源点用<span class="math inline">\(\text{Key}\)</span>对核心数据进行<span class="math inline">\(\text{DES}\)</span>加密，然后以密码形式在公共通信网（如电话网）中传输到通信网络的终点，数据到达目的地后，用同样的<span class="math inline">\(\text{Key}\)</span>对密码数据进行解密，便再现了明码形式的核心数据。这样，便保证了核心数据（如<span class="math inline">\(\text{PIN、MAC}\)</span>等）在公共通信网中传输的安全性和可靠性。</p><a id="more"></a><h3 id="des加密算法">DES加密算法</h3><p>  下面的图表示了<span class="math inline">\(\text{DES}\)</span>加密的整个机制，对于任意加密方案，总有两个输入：明文和密钥。<span class="math inline">\(\text{DES}\)</span>的明文长为64位，密钥长为56位（实际上是64位，其余8位可以奇偶校验或随意设置）。</p><p>  由图左部分可知，明文的处理经过了三个阶段，首先64位的明文经过初始置换IP而重新排列。然后进行16轮相同函数的作用，每轮作用都有置换和替换，最后一轮迭代的输出有64位；图的右半部分给出了使用56位密钥的过程，首先，密钥经过一个置换，在经过循环左移和一个置换就得到了各轮的子密钥<span class="math inline">\(K_i\)</span>，每轮的置换函数都一样，但是由于密钥的循环左移，使得每轮的子密钥互不相同。</p><p><img src="/images/des_2.png" width="550px"></p><h4 id="获取子密钥k_i">获取子密钥<span class="math inline">\(K_i\)</span></h4><p>  <span class="math inline">\(\text{DES}\)</span>的初始密钥<span class="math inline">\(\text{K}\)</span>为64位，按8行8列从左往右从上往下，其中每行第8位用于奇偶校验（即<span class="math inline">\(K\)</span>的第8、16、24、32、40、48、56、64共8个校验），因此初始密钥<span class="math inline">\(K\)</span>实际可用56位，之后通过<span class="math inline">\(\text{PC-1}\)</span>置换函数进行置换，<span class="math inline">\(\text{PC-1}\)</span>函数置换表如图，即将初始密钥<span class="math inline">\(\text{K}\)</span>的第57位（这里的位数，将校验位也计算在内）放在第1位，第49位放在第2位，依次类推；</p><p><img src="/images/des_3.png" width="450px"></p><p>  经过<span class="math inline">\(\text{PC-1}\)</span>置换，得到的置换输出是56位的，将它的前28位作为<span class="math inline">\(C_0\)</span>，后28位作为<span class="math inline">\(D_0\)</span>，之后<span class="math inline">\(C_0、D_0\)</span>分别<strong>循环左移</strong>1位得到<span class="math inline">\(C_1、D_1\)</span>，然后将两部分合成56位，在将这个56位的结果通过<span class="math inline">\(\text{PC-2}\)</span>函数置换，就得到了48位的子密钥<span class="math inline">\(K_1\)</span>，<span class="math inline">\(\text{PC-2}\)</span>函数置换表如下；</p><p><img src="/images/des_4.png" width="350px"></p><p>  对于上面所说的循环左移，是分别针对<span class="math inline">\(C_0\)</span>和<span class="math inline">\(D_0\)</span>所说的，它的意思是，对于<span class="math inline">\(C_0\)</span>把它的第2~28位整体左移1位，而第1位就就移动到空闲下来的第28位上；另外这里不一定是移动1位，也可能是移动2位，要按规定来，下面给出具体移动位数的规定。</p><p><img src="/images/des_5.png" width="550px"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;des-数据加密标准&quot;&gt;DES( 数据加密标准)&lt;/h2&gt;
&lt;h3 id=&quot;des&quot;&gt;DES&lt;/h3&gt;
&lt;p&gt;  &lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;是一种数据加密标准，是一种对称加密算法，&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;算法的入口参数有三个：&lt;span class=&quot;math inline&quot;&gt;\(\text{Key、Date、Mode}\)&lt;/span&gt;。其中&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;为8个字节共64位，是&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;算法的工作密钥；&lt;span class=&quot;math inline&quot;&gt;\(\text{Date}\)&lt;/span&gt;也为8个字节64位，是要被加密或解密的数据；&lt;span class=&quot;math inline&quot;&gt;\(\text{Mode}\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;的工作方式，有两种：加密或解密。&lt;/p&gt;
&lt;p&gt;  &lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;算法是这样工作的：若&lt;span class=&quot;math inline&quot;&gt;\(\text{Mode}\)&lt;/span&gt;为加密，则用&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;去把数据&lt;span class=&quot;math inline&quot;&gt;\(\text{Date}\)&lt;/span&gt;进行加密，生成&lt;span class=&quot;math inline&quot;&gt;\(\text{Date}\)&lt;/span&gt;的密码形式（64位）作为&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}的输出结果；若\)&lt;/span&gt;为解密，则用&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;去把密码形式的数据&lt;span class=&quot;math inline&quot;&gt;\(\text{Data}\)&lt;/span&gt;解密，还原为&lt;span class=&quot;math inline&quot;&gt;\(\text{Date}\)&lt;/span&gt;的明码形式（64位）作为&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;的输出结果。在通信网络的两端，双方约定一致的&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;，在通信的源点用&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;对核心数据进行&lt;span class=&quot;math inline&quot;&gt;\(\text{DES}\)&lt;/span&gt;加密，然后以密码形式在公共通信网（如电话网）中传输到通信网络的终点，数据到达目的地后，用同样的&lt;span class=&quot;math inline&quot;&gt;\(\text{Key}\)&lt;/span&gt;对密码数据进行解密，便再现了明码形式的核心数据。这样，便保证了核心数据（如&lt;span class=&quot;math inline&quot;&gt;\(\text{PIN、MAC}\)&lt;/span&gt;等）在公共通信网中传输的安全性和可靠性。&lt;/p&gt;
    
    </summary>
    
      <category term="信息安全" scheme="https://yuggu.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="DES" scheme="https://yuggu.github.io/tags/DES/"/>
    
      <category term="数据加密" scheme="https://yuggu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 2288] Islands and Bridges</title>
    <link href="https://yuggu.github.io/2019/10/03/POJ-2288-Islands-and-Bridges/"/>
    <id>https://yuggu.github.io/2019/10/03/POJ-2288-Islands-and-Bridges/</id>
    <published>2019-10-03T08:47:04.000Z</published>
    <updated>2019-10-03T08:52:08.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://poj.org/problem?id=2288" target="_blank" rel="noopener"><span class="math inline">\(\text{POJ - 2288 Islands and Bridges}\)</span></a></p><h3 id="题意">题意</h3><p>  这里有<span class="math inline">\(n\)</span>个城市，定义最好的三角哈密顿路径为<span class="math inline">\(value\)</span>值最大的哈密顿路径，<span class="math inline">\(value\)</span>产生于三部分，如果经过某个城市<span class="math inline">\(x\)</span>那么这个城市将贡献<span class="math inline">\(value_x\)</span>，如果经过连续两个城市<span class="math inline">\(x、y\)</span>，那么将贡献<span class="math inline">\(value_x*value_y\)</span>，如果经过连续三个城市<span class="math inline">\(x、y、z\)</span>，那么将贡献<span class="math inline">\(value_x*value_y*value_z\)</span>，这里说的连续不是说城市编号连续，需要你求出这个图的三角哈密顿路径的长度，以及它的个数；</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 13,value_i\leq 100\)</span>.</p><a id="more"></a><h3 id="分析">分析</h3><p>  三角的意思是，<span class="math inline">\(i\)</span>可以到<span class="math inline">\(j\)</span>，<span class="math inline">\(j\)</span>可以到<span class="math inline">\(k\)</span>，<span class="math inline">\(k\)</span>可以到<span class="math inline">\(i\)</span>，由于我们需要求连续三个城市的贡献，所以我们需要开一个三维的数组<span class="math inline">\(dp[s][i][j]\)</span>，其中<span class="math inline">\(s\)</span>表示到达<span class="math inline">\(i\)</span>的当前的状态，<span class="math inline">\(i\)</span>的前一个经过的点是<span class="math inline">\(j\)</span>，同样的还需要一个数组<span class="math inline">\(num[s][i][j]\)</span>来记录哈密顿路径的个数；</p><p>  首先初始化<span class="math inline">\(num\)</span>为0，及<span class="math inline">\(dp[(1&lt;&lt;i)|(1&lt;&lt;j)][i][j]=value_i+value_j+value_i*value_j\)</span>，<span class="math inline">\(i、j\)</span>为任意两个城市，<span class="math inline">\(i、j\)</span>不相等；</p><p>  枚举状态s，以及三个点<span class="math inline">\(i、j、k\)</span>，考虑从上一个点<span class="math inline">\(j\)</span>转移到当前点<span class="math inline">\(i\)</span>，而<span class="math inline">\(j\)</span>的上一个点为<span class="math inline">\(k\)</span>，考虑从上一个状态转移过来，那么假设当前状态为<span class="math inline">\(s\)</span>，则有<span class="math inline">\(dp[s][i][j]=\max dp[s\space xor\space (1&lt;&lt;i)][j][k]\)</span>，主要判断<span class="math inline">\(i、j、k\)</span>是否可以组成三角形，若可以还需要把<span class="math inline">\(dp[s][i][j]\)</span>加上<span class="math inline">\(value_x*value_y*value_z\)</span>，关于数量的计算，看<span class="math inline">\(dp[s][i][j]\)</span>是否能够通过之前的状态更新，若能更新，就令当前数量等于上一个转移过来的状态的数量，若二者相等，就把之前的状态的数量加到当前的状态的数量上，具体见代码；</p><p>  需要注意的是，在转移的过程中还需要判断之前的那个状态是否是有效的状态，即存在这样的情况，现在的状态是s，之前的状态<span class="math inline">\(p\)</span>，虽然它的<span class="math inline">\(j、k\)</span>位都是1，<span class="math inline">\(i\)</span>位是1，但是这个状态<span class="math inline">\(p\)</span>并不能通过<span class="math inline">\(p\)</span>之前的任意一个可行状态转移过来，所以状态<span class="math inline">\(p\)</span>的值还是初始的时候我们初始化的值；对于这种情况我们就需要判断<span class="math inline">\(dp[s^(1&lt;&lt;i)][j][k]\)</span>的状态；自己写的时候，第一次没注意<span class="math inline">\(int\)</span>，之后改成<span class="math inline">\(long\space long\)</span>，还是<span class="math inline">\(wa\)</span>，然后不知哪错，疯狂交，疯狂<span class="math inline">\(wa\)</span>，看了一个小时才找到问题。<strong>以后要注意，这里出现这样的原因，应该是图的原因，给出的图不一定是个完全图，某些边是不连通的。</strong></p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span>&amp;&amp;c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll q, n, m, dp[<span class="number">1</span> &lt;&lt; <span class="number">14</span>][<span class="number">15</span>][<span class="number">15</span>], num[<span class="number">1</span> &lt;&lt; <span class="number">14</span>][<span class="number">15</span>][<span class="number">15</span>], val[<span class="number">15</span>], e[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--, b--;</span><br><span class="line">            e[a][b] = e[b][a] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; val[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j || !e[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[(<span class="number">1</span> &lt;&lt; i) | (<span class="number">1</span> &lt;&lt; j)][i][j] = val[i] + val[j] + val[i] * val[j];</span><br><span class="line">                num[(<span class="number">1</span> &lt;&lt; i) | (<span class="number">1</span> &lt;&lt; j)][i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; n; s++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">if</span> ((s &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!e[i][j] || !((s &gt;&gt; j) &amp; <span class="number">1</span>) || i == j) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!((s &gt;&gt; k) &amp; <span class="number">1</span>) || !e[j][k]||k == i || j == k) <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!dp[s ^ (<span class="number">1</span> &lt;&lt; i)][j][k]) <span class="keyword">continue</span>;</span><br><span class="line">                            ll temp = dp[s ^ (<span class="number">1</span> &lt;&lt; i)][j][k] + val[i] + val[i] * val[j];</span><br><span class="line">                            <span class="keyword">if</span> (e[i][k]) temp += val[i] * val[j] * val[k];</span><br><span class="line">                            <span class="keyword">if</span> (temp &gt; dp[s][i][j]) &#123;</span><br><span class="line">                                dp[s][i][j] = temp;</span><br><span class="line">                                num[s][i][j] =  num[s ^ (<span class="number">1</span> &lt;&lt; i)][j][k];</span><br><span class="line">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp == dp[s][i][j]) &#123;</span><br><span class="line">                                num[s][i][j] +=  num[s ^ (<span class="number">1</span> &lt;&lt; i)][j][k];                                </span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j || !e[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (ans &lt; dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i][j]) &#123;</span><br><span class="line">                    ans = dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i][j];</span><br><span class="line">                    cnt = num[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i][j];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ans == dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i][j])&#123;</span><br><span class="line">                    cnt += num[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; cnt / <span class="number">2</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{POJ - 2288 Islands and Bridges}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  这里有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城市，定义最好的三角哈密顿路径为&lt;span class=&quot;math inline&quot;&gt;\(value\)&lt;/span&gt;值最大的哈密顿路径，&lt;span class=&quot;math inline&quot;&gt;\(value\)&lt;/span&gt;产生于三部分，如果经过某个城市&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;那么这个城市将贡献&lt;span class=&quot;math inline&quot;&gt;\(value_x\)&lt;/span&gt;，如果经过连续两个城市&lt;span class=&quot;math inline&quot;&gt;\(x、y\)&lt;/span&gt;，那么将贡献&lt;span class=&quot;math inline&quot;&gt;\(value_x*value_y\)&lt;/span&gt;，如果经过连续三个城市&lt;span class=&quot;math inline&quot;&gt;\(x、y、z\)&lt;/span&gt;，那么将贡献&lt;span class=&quot;math inline&quot;&gt;\(value_x*value_y*value_z\)&lt;/span&gt;，这里说的连续不是说城市编号连续，需要你求出这个图的三角哈密顿路径的长度，以及它的个数；&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 13,value_i\leq 100\)&lt;/span&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>[HDU - 3001] Travelling</title>
    <link href="https://yuggu.github.io/2019/10/03/HDU-3001-Travelling/"/>
    <id>https://yuggu.github.io/2019/10/03/HDU-3001-Travelling/</id>
    <published>2019-10-03T05:17:04.000Z</published>
    <updated>2019-10-03T05:20:49.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3001" target="_blank" rel="noopener"><span class="math inline">\(\text{HDU - 3001 Travelling}\)</span></a></p><h3 id="题意">题意</h3><p>  某一天你有个旅游的计划，这里有<span class="math inline">\(n\)</span>个城市，你想要访问完<span class="math inline">\(n\)</span>个城市，开始的时候你可以从任何城市出发，你已经知道了一个二维矩阵<span class="math inline">\(a[i][j]\)</span>，表示城市<span class="math inline">\(i\)</span>与城市<span class="math inline">\(j\)</span>之间互相抵达需要的花费，现在需要计算出访问完<span class="math inline">\(n\)</span>个城市所需要的最小花费，每个城市最多被允许访问两次。</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 10\)</span>.</p><a id="more"></a><h3 id="分析">分析</h3><p>  首先如果每个点只被允许访问一次，并且指定起点，那么显然是一个最短<span class="math inline">\(\text{Hamilton}\)</span>路径问题；</p><p>  第一次读题，我以为是个不指定起点的最短哈密顿路径问题，然后我就<span class="math inline">\(O(n^{2})\)</span>枚举起点终点，然后套个<span class="math inline">\(O(2^n*n^{2})\)</span>的状压<span class="math inline">\(dp\)</span>，就是<span class="math inline">\(O(n^4*2^n)\)</span>，后来看题解发现读错题了；对于不指定起点终点的情况来说，可以不用这么做，在指定起点为0的最短哈密顿路径中，我们初始化<span class="math inline">\(dp[1][0]=0\)</span>，其他为<span class="math inline">\(\infty\)</span>，那么不指定起点它可能开始的时候在任意位置，我们就初始化，在任意城市为起点的状态为0，即<span class="math inline">\(dp[1&lt;&lt;pos][pos]_{pos\in [0,n)}=0\)</span>，最后目标是<span class="math inline">\(\min_{end\in [0,n)}dp[(1&lt;&lt;n)-1][end]\)</span>；</p><p>  那么对于这一题来说，其实将最短哈密顿路径的<code>每个点只允许被经过一次</code>，变成了<code>每个点至少经过一次，最多经过2次</code>，那么原来使用2进制，0表示没经过，1表示经过；那么现在使用3进制，0表示没经过，1表示经过一次，2表示经过2次；与2进制不同，3进制不能通过简单位运算取出某一位上的数、对某一位进行取反等一些操作，所以我们需要进行一些预处理，预处理状态<span class="math inline">\(s\)</span>的第<span class="math inline">\(k\)</span>位是什么，还需要用到<code>仅走过城市k一次</code>所表示的状态，还需要处理下这个；</p><p>  <strong>注意代码中的<span class="math inline">\(status[x]\)</span>，在三进制下是怎么表示的，这里不是说它的意义。</strong></p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span>&amp;&amp;c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cost[<span class="number">11</span>][<span class="number">11</span>], dp[<span class="number">60005</span>][<span class="number">11</span>], status[<span class="number">11</span>], t[<span class="number">60005</span>][<span class="number">11</span>];</span><br><span class="line"><span class="comment">//预处理，状态s的第i位是t[s][i]，status[i]为，三进制下，n个城市中，只有第i个城市访被问一次所代表的状态</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    status[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        status[i] = status[i - <span class="number">1</span>] * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= status[<span class="number">10</span>]; s++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">            t[s][k] = num % <span class="number">3</span>;</span><br><span class="line">            num /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断x的每一位是不是都大于1,说明任意一个城市都至少访问过一次</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">is_ok</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x % <span class="number">3</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x /= <span class="number">3</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">//freopen("test.out", "w", stdout);</span></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cost, inf, <span class="keyword">sizeof</span>(cost));</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            a--, b--;</span><br><span class="line">            cost[a][b] = cost[b][a] = min(c, cost[b][a]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, inf, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[status[i]][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; status[n]; s++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">if</span> (t[s][i])</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span> (t[s][j]) &#123;</span><br><span class="line">                            dp[s][i] = min(dp[s][i], dp[s - status[i]][j] + cost[j][i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = status[n - <span class="number">1</span>]; i &lt; status[n]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_ok(i)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    ans = min(ans, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt;= inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{HDU - 3001 Travelling}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  某一天你有个旅游的计划，这里有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城市，你想要访问完&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城市，开始的时候你可以从任何城市出发，你已经知道了一个二维矩阵&lt;span class=&quot;math inline&quot;&gt;\(a[i][j]\)&lt;/span&gt;，表示城市&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;与城市&lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt;之间互相抵达需要的花费，现在需要计算出访问完&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个城市所需要的最小花费，每个城市最多被允许访问两次。&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 10\)&lt;/span&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>[ABC142] E.Get Everything</title>
    <link href="https://yuggu.github.io/2019/09/29/ABC142-E.Get-Everything/"/>
    <id>https://yuggu.github.io/2019/09/29/ABC142-E.Get-Everything/</id>
    <published>2019-09-29T11:45:14.000Z</published>
    <updated>2019-10-22T13:37:41.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接">链接</h3><p><a href="https://atcoder.jp/contests/abc142/tasks/abc142_e" target="_blank" rel="noopener"><span class="math inline">\(\text{ABC142 E - Get Everything}\)</span></a></p><h3 id="题意">题意</h3><p>  这里有<span class="math inline">\(n\)</span>个锁着的箱子，你需要购买一些钥匙来打开这<span class="math inline">\(n\)</span>个箱子，这里有<span class="math inline">\(m\)</span>钥匙，第<span class="math inline">\(i\)</span>个钥匙的花费为<span class="math inline">\(a_i\)</span>，它能打开<span class="math inline">\(n\)</span>个箱子中的<span class="math inline">\(b_i\)</span>个，分别是<span class="math inline">\(c_{i1}、c_{i2}\dots c_{i{b_{n}}}\)</span>，现在你需要从这<span class="math inline">\(m\)</span>个钥匙中选出若干个钥匙来打开这<span class="math inline">\(n\)</span>个箱子，使得花费最小。</p><p>  输入格式：第一行<span class="math inline">\(n、m\)</span>，之后<span class="math inline">\(2*m\)</span>行，每连续两行的第一行，<span class="math inline">\(a_i、b_i\)</span>，之后一行<span class="math inline">\(b_i\)</span>个数，代表这个钥匙可以打开的箱子的编号。</p><p>  输出格式：输出一行最小花费.</p><p>  数据范围：<span class="math inline">\(1\leq n\leq 12,1\leq m\leq 10^3,1\leq a_{i}\leq 10^5,1\leq b_i\leq n,1\leq c_{i1}&lt;c_{i2}&lt;\dots &lt;c_{ib_{i}}\leq n\)</span>.</p><a id="more"></a><h3 id="分析">分析</h3><p>  第一印象这是个<span class="math inline">\(dp\)</span>，注意到<span class="math inline">\(n\)</span>最大为<span class="math inline">\(12\)</span>，并结合题意可知，需要使用状压<span class="math inline">\(dp\)</span>；</p><p>  二进制压缩保存每个钥匙能开的那些宝箱的状态，<span class="math inline">\(1\)</span>表示箱子可以被开，<span class="math inline">\(0\)</span>表示箱子不能被打开，<span class="math inline">\(f[i]\)</span>表示打开箱子的状态为<span class="math inline">\(i\)</span>时，所需要的最小花费，枚举箱子的状态<span class="math inline">\(i\)</span>和第<span class="math inline">\(j\)</span>枚钥匙，进行状态转移：</p><p><span class="math display">\[f[i|state[j]]=\min(f[i|state[j]],f[i]+cost[j])\]</span></p><p>  初始状态<span class="math inline">\(f[0]\)</span>为<span class="math inline">\(0\)</span>，其他为<span class="math inline">\(\infty\)</span>，目标为<span class="math inline">\(f[(1&lt;&lt;n)-1]\)</span>.</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cost, state;</span><br><span class="line">&#125;p[<span class="number">1005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m, f[<span class="number">1</span> &lt;&lt; <span class="number">14</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">  f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p[i].cost;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, t, x;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">      <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">          sum += (<span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    p[i].state = sum;</span><br><span class="line">      f[sum] = p[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">        f[i | p[j].state] = min(f[i | p[j].state], f[i] + p[j].cost);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="keyword">if</span> (f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] == <span class="number">0x3f3f3f3f</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc142/tasks/abc142_e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\text{ABC142 E - Get Everything}\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;题意&lt;/h3&gt;
&lt;p&gt;  这里有&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个锁着的箱子，你需要购买一些钥匙来打开这&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个箱子，这里有&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;钥匙，第&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;个钥匙的花费为&lt;span class=&quot;math inline&quot;&gt;\(a_i\)&lt;/span&gt;，它能打开&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个箱子中的&lt;span class=&quot;math inline&quot;&gt;\(b_i\)&lt;/span&gt;个，分别是&lt;span class=&quot;math inline&quot;&gt;\(c_{i1}、c_{i2}\dots c_{i{b_{n}}}\)&lt;/span&gt;，现在你需要从这&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;个钥匙中选出若干个钥匙来打开这&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;个箱子，使得花费最小。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行&lt;span class=&quot;math inline&quot;&gt;\(n、m\)&lt;/span&gt;，之后&lt;span class=&quot;math inline&quot;&gt;\(2*m\)&lt;/span&gt;行，每连续两行的第一行，&lt;span class=&quot;math inline&quot;&gt;\(a_i、b_i\)&lt;/span&gt;，之后一行&lt;span class=&quot;math inline&quot;&gt;\(b_i\)&lt;/span&gt;个数，代表这个钥匙可以打开的箱子的编号。&lt;/p&gt;
&lt;p&gt;  输出格式：输出一行最小花费.&lt;/p&gt;
&lt;p&gt;  数据范围：&lt;span class=&quot;math inline&quot;&gt;\(1\leq n\leq 12,1\leq m\leq 10^3,1\leq a_{i}\leq 10^5,1\leq b_i\leq n,1\leq c_{i1}&amp;lt;c_{i2}&amp;lt;\dots &amp;lt;c_{ib_{i}}\leq n\)&lt;/span&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E7%8A%B6%E5%8E%8Bdp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="状压dp" scheme="https://yuggu.github.io/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
  </entry>
  
</feed>
