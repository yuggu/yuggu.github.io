<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuggu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuggu.github.io/"/>
  <updated>2019-09-10T05:23:28.329Z</updated>
  <id>https://yuggu.github.io/</id>
  
  <author>
    <name>yuggu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[2019徐州网络赛-F] so easy</title>
    <link href="https://yuggu.github.io/2019/09/09/2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-F-so-easy/"/>
    <id>https://yuggu.github.io/2019/09/09/2019徐州网络赛-F-so-easy/</id>
    <published>2019-09-09T14:48:48.000Z</published>
    <updated>2019-09-10T05:23:28.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41384" target="_blank" rel="noopener">$\text{2019徐州网络赛-B.so easy}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;现在，从下标1开始每个位置有一个点，需要你进行$q$次操作，共两种，1. $(1,x)$为删除$x$位置的点，2. $(2,x)$为查询$x$的后面(包括$x$位置)的第一个点的位置。<br>&emsp;&emsp;输入格式：第一行输入两个数$n$和$q$，之后$q$行每行一个操作。</p><p>&emsp;&emsp;数据范围：$1\leq x&lt; n&lt;10^9,1\leq q&lt;10^6$</p><p>&emsp;&emsp;输出格式：对于每个查询操作，输出一行一个结果。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;这一题感觉出的不太好，对点离散后线段树或者树状数组都会$\text{T}$，</p><p>&emsp;&emsp;这题的标答是用并查集做的，初始化数$x$查询的答案就是$x$，删除$x$之后答案就是$find(x+1)$，使用$unordered\_map$。</p><p>&emsp;&emsp;这题我是这样做的；开始的时候删除数$x$，那么使用两个$unordered\_map，l和r$记录$x$所在连续的被删除序列的左右端点，第一个删除的数$x$有$l[x]=x,r[x]=x$；</p><p>&emsp;&emsp;考虑其他三种不特殊情况，在一个连续的被删除序列的右侧或者左侧，以及在两个连续的被删除序列的中间删除$x$，那么我们分别讨论这三种情况，来更新$x、x-1、x+1$以及最左端点（通过$l[x-1]$获得）和最右端点（通过$r[x+1]$获得）的$l$和$r$，虽然中间有些点没有更新到，但是当查询某个点的时候，我们可以记忆化搜索，或者，我们每次删除后都进行一次路径压缩，查询$x$的时候可以$O(1)$查询$x$所在连续的被删除序列的最右边的那个已经被删除的点，那么这个点的右边一个点一定是没有被删除的。</p><p>&emsp;&emsp;这题不能用$map$，只能用$unordered\_map$，不然会$\text{T}$，或者离散化一下也可以。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我的$\text{AC}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; l,r,f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt;<span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径压缩</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = x;</span><br><span class="line">    <span class="keyword">while</span> (r[t] != t)&#123;</span><br><span class="line">        t = r[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r[x] != t)&#123;</span><br><span class="line">        <span class="keyword">int</span> p = r[x];</span><br><span class="line">        r[x] = t;</span><br><span class="line">        x = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read(), q = read();</span><br><span class="line">    <span class="keyword">int</span> op,x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; q;i++) &#123;</span><br><span class="line">        op = read(), x = read();</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(f.count(x)) <span class="keyword">continue</span>;</span><br><span class="line">            f[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l.count(x - <span class="number">1</span>) &amp;&amp; l.count(x + <span class="number">1</span>)) &#123;</span><br><span class="line">                l[x] = l[x - <span class="number">1</span>];</span><br><span class="line">                r[x] = r[x + <span class="number">1</span>];</span><br><span class="line">                r[x - <span class="number">1</span>] = r[x];</span><br><span class="line">                l[x + <span class="number">1</span>] = l[x];</span><br><span class="line">                r[l[x]] = r[x];</span><br><span class="line">                l[r[x]] = l[x];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(l.count(x - <span class="number">1</span>)) &#123;</span><br><span class="line">                l[x] = l[x - <span class="number">1</span>];</span><br><span class="line">                r[x - <span class="number">1</span>] = x;</span><br><span class="line">                r[l[x]] = r[x] = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(l.count(x + <span class="number">1</span>)) &#123;</span><br><span class="line">                r[x] = r[x + <span class="number">1</span>];</span><br><span class="line">                l[x + <span class="number">1</span>] = x;</span><br><span class="line">                l[r[x]] = l[x] = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l[x] = r[x] = x;</span><br><span class="line">            &#125;</span><br><span class="line">            cr(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!l.count(x)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> t = x;</span><br><span class="line">                <span class="keyword">while</span>(r[t] != t) t = r[t];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$大佬的\text{AC}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span>  <span class="keyword">int</span> maxn =  <span class="number">100010</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,  <span class="keyword">int</span>&gt; fa;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">findfa</span><span class="params">(<span class="keyword">int</span>  x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>  (!fa.count(x))<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span>  fa[x]  =  findfa(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d  %d"</span>,  &amp;n,  &amp;q);</span><br><span class="line"><span class="keyword">int</span> op, x;</span><br><span class="line"><span class="keyword">while</span>  (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d  %d"</span>,  &amp;op,  &amp;x);</span><br><span class="line"><span class="keyword">if</span>  (op ==  <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fa[x]  =  findfa(x +  <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans =  findfa(x);</span><br><span class="line"><span class="keyword">if</span>  (ans &gt; n)ans =  <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019徐州网络赛-B.so easy}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;现在，从下标1开始每个位置有一个点，需要你进行$q$次操作，共两种，1. $(1,x)$为删除$x$位置的点，2. $(2,x)$为查询$x$的后面(包括$x$位置)的第一个点的位置。&lt;br&gt;&amp;emsp;&amp;emsp;输入格式：第一行输入两个数$n$和$q$，之后$q$行每行一个操作。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq x&amp;lt; n&amp;lt;10^9,1\leq q&amp;lt;10^6$&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;输出格式：对于每个查询操作，输出一行一个结果。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="并查集" scheme="https://yuggu.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>一段神奇的cpp代码</title>
    <link href="https://yuggu.github.io/2019/09/09/%E4%B8%80%E6%AE%B5%E7%A5%9E%E5%A5%87%E7%9A%84cpp%E4%BB%A3%E7%A0%81/"/>
    <id>https://yuggu.github.io/2019/09/09/一段神奇的cpp代码/</id>
    <published>2019-09-09T10:48:50.000Z</published>
    <updated>2019-09-09T11:46:42.801Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这段代码应该涉及到了汇编的内容。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这段代码应该涉及到了汇编的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="汇编" scheme="https://yuggu.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="c++" scheme="https://yuggu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-F] Greedy Sequence</title>
    <link href="https://yuggu.github.io/2019/09/09/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-F-Greedy-Sequence/"/>
    <id>https://yuggu.github.io/2019/09/09/2019南京网络赛-F-Greedy-Sequence/</id>
    <published>2019-09-09T03:13:39.000Z</published>
    <updated>2019-09-10T05:26:24.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41303" target="_blank" rel="noopener">$\text{2019南京网络赛-F.Greedy Sequence}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个从1到$n$，$n$个数的排列，对于$i\in [1,n]$，你需要构造一个序列$s_i$，所以你需要构造$n$个序列。构造的规则如下<br>&emsp;&ensp;$1$.&ensp;$s_i[1]=i$；<br>&emsp;&ensp;$2$.&ensp;$s_i$的长度是$n$，并且对于每个$j\in [2,n],s_i[j]\leq s_i[j-1]$；<br>&emsp;&ensp;$3$.&ensp;对于$s_i[j]$在序列中的位置是$pos[j]$，对于任意的$j\geq 2$，$\left |pos[j]-pos[j-1]\right |\leq k(1\leq 10^5)$，并且对于任意一个$s_i$，它的任意一个元素在$a$中最多出现一次；<br>&emsp;&ensp;$4$.&ensp;对于$s_i$，如果它已经将$a$中满足要求的元素全部选择了，但是它的长度小于$n$，那么它的其他元素都为0；<br>&emsp;&ensp;$5$.&ensp;对于任意一个$s_i$，我们希望它的权值越大越好，(对于任意的两个序列$c,d$，如果存在$k$，$1\leq k\leq n,c_i=d_i\space for\space all\space 1\leq i &lt; k,\space and\space c_k&gt;d_k$，我们则说$c_i$的权值大于$d_i$)。<br><a id="more"></a><br>&emsp;&emsp;输入格式：第一行一个$t$，代表$t$组测试样例，每个测试样例第一行$n,k$，第二行$n$个数代表序列$a$.</p><p>&emsp;&emsp;数据范围：$1\leq t\leq 20,1\leq n,k\leq 10^5,1\leq a_i\leq n$.</p><p>&emsp;&emsp;输出格式：每个测试样例输出一行$n$个数，第$i$个数代表序列$s_i$中的非零元素的个数.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;对于任意的$s_i$，如果某一次我们选了$a$中的元素$a[j]$，那么我们下一次选的数一定是$[j-k,j+k]$中的小于$a[j]$的最大值，这样做能保证我们的$s_i$的权值最大以及$s_i$的非零元素最多；<br>&emsp;&emsp;那么对于序列$a$中的元素$a_i$，我们就用$set$维护一个$[i-k,i+k]$的窗口，之后$set$内二分找到选了$a_i$之后下一个会选的元素，对于每个$a_i$，我们都记录下这个值$c_i$，并且显然的，当选择$a_i$为s[1]时序列的非零元素个数等于选择$c_i$为s[1]时序列非零元素个数基础上加1，所以这个我们递推一下就可以了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, k, a[<span class="number">1000005</span>], c[<span class="number">1000005</span>], pos[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> len[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(len, <span class="number">0</span>, <span class="keyword">sizeof</span>(len));</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            pos[a[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">        s.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            s.insert(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos1 = i - k - <span class="number">1</span>, pos2 = i + k;</span><br><span class="line">            <span class="keyword">if</span>(pos1 &gt; <span class="number">0</span>)s.erase(a[pos1]);</span><br><span class="line">            <span class="keyword">if</span>(pos2 &lt;= n)s.insert(a[pos2]);</span><br><span class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it  = s.lower_bound(a[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != s.begin())c[a[i]] = *--it;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; c[a[i]] &lt;&lt; " " &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            len[i] = len[c[i]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; len[i]&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; len[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019南京网络赛-F.Greedy Sequence}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个从1到$n$，$n$个数的排列，对于$i\in [1,n]$，你需要构造一个序列$s_i$，所以你需要构造$n$个序列。构造的规则如下&lt;br&gt;&amp;emsp;&amp;ensp;$1$.&amp;ensp;$s_i[1]=i$；&lt;br&gt;&amp;emsp;&amp;ensp;$2$.&amp;ensp;$s_i$的长度是$n$，并且对于每个$j\in [2,n],s_i[j]\leq s_i[j-1]$；&lt;br&gt;&amp;emsp;&amp;ensp;$3$.&amp;ensp;对于$s_i[j]$在序列中的位置是$pos[j]$，对于任意的$j\geq 2$，$\left |pos[j]-pos[j-1]\right |\leq k(1\leq 10^5)$，并且对于任意一个$s_i$，它的任意一个元素在$a$中最多出现一次；&lt;br&gt;&amp;emsp;&amp;ensp;$4$.&amp;ensp;对于$s_i$，如果它已经将$a$中满足要求的元素全部选择了，但是它的长度小于$n$，那么它的其他元素都为0；&lt;br&gt;&amp;emsp;&amp;ensp;$5$.&amp;ensp;对于任意一个$s_i$，我们希望它的权值越大越好，(对于任意的两个序列$c,d$，如果存在$k$，$1\leq k\leq n,c_i=d_i\space for\space all\space 1\leq i &amp;lt; k,\space and\space c_k&amp;gt;d_k$，我们则说$c_i$的权值大于$d_i$)。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="二分" scheme="https://yuggu.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-B] super_log</title>
    <link href="https://yuggu.github.io/2019/09/06/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-B-super-log/"/>
    <id>https://yuggu.github.io/2019/09/06/2019南京网络赛-B-super-log/</id>
    <published>2019-09-06T04:10:34.000Z</published>
    <updated>2019-09-06T11:17:26.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41299" target="_blank" rel="noopener">$\text{2019南京网络赛-B.super_log}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;有一个分段函数如下：<br><img src="https://res.jisuanke.com/img/upload/20190826/76e9a143bf8f0ef149a1ef84a9adf72922f8260c.png"><br>&emsp;&emsp;现在需要你找到最小的正整数$x$，使得$log_{a}^* (x) \ge b$，由于结果可能会非常大，所以需要你输出$x$对$m$取余后的结果。</p><p>&emsp;&emsp;输入格式：共$t$组测试样例，每组样例有一行，一行三个数$a,b,m$.<br><a id="more"></a><br>&emsp;&emsp;数据范围：$1\leq a\leq 1000000,0\leq b\leq 1000000$,$1\leq m\leq 1000000$.</p><p>&emsp;&emsp;输出格式：每行对应一个样例结果。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;实际上这里是要计算$a^{a^{a^{\dots}}}\%m$这里共$b$个$a$，这是一个幂塔函数，显然是不能够直接计算的。<br>&emsp;&emsp;考虑欧拉降幂，如下：</p><script type="math/tex; mode=display">a^b\equiv \begin{cases} a^{b\space \text{mod}\phi(m)+\phi(m)} &b\geq \phi(m)\\ a^b&  b<\phi(m) \end{cases}(\text{mod}\space m)</script><p>&emsp;&emsp;显然直接套用公式即可，</p><script type="math/tex; mode=display">a^{a^{a^{\dots}}} = a(a^{a^{a^{\dots}}}\text{mod}\space \phi(m)+\phi(m))(\text{mod}\space m)</script><p>&emsp;&emsp;从上式可知，我们递归进行即可。<br>&emsp;&emsp;如果$a$是无限的，即乘方塔的层数无限，那么显然欧拉降幂公式里的$b$($b$在这里是$a^{a^{a^{\dots}}}$)一定是恒大于$\phi(m)$，如果$a$的层数是有限的，那么我们在计算过程中就需要对$b$($b$在这里是$a^{a^{a^{\dots}}}$)与$\phi(m)$的大小进行判断。<br>&emsp;&emsp;并且这里我们不知道最终的$\phi(m)$是多少，所以需要进行递归计算。具体细节见代码。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2  </span></span><br><span class="line"><span class="comment">//#define MOD 99991  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(a, b) a &gt;= b?a % b + b :a  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;  </span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)  </span></span><br><span class="line"> <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;  inline int read() &#123;  </span></span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;  </span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();  </span><br><span class="line">        <span class="keyword">return</span> x * f;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">phi</span><span class="params">(ll x)</span> </span>&#123;  </span><br><span class="line">    ll res = x, a = x;  </span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;  </span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">while</span> (a % i == <span class="number">0</span>) a /= i;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) res = res / a * (a - <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">k_pow</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;  </span><br><span class="line">    ll res = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (b) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = MOD(res * a, p);  </span><br><span class="line">        a = MOD(a * a, p);  </span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll a, ll l, ll r, ll m)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (l == r || m == <span class="number">1</span>)<span class="keyword">return</span> MOD(a, m);  </span><br><span class="line">    ll k = phi(m);  </span><br><span class="line">    <span class="keyword">return</span> k_pow(a, f(a, l + <span class="number">1</span>, r, k), m);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> T;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);  </span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;  </span><br><span class="line">        <span class="keyword">int</span> a, b, m;  </span><br><span class="line">        a = read(), b = read(), m = read();  </span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">1</span> % m);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a % m);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f(a, <span class="number">1</span>, b, m) % (<span class="number">1l</span>l * m) );  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019南京网络赛-B.super_log}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有一个分段函数如下：&lt;br&gt;&lt;img src=&quot;https://res.jisuanke.com/img/upload/20190826/76e9a143bf8f0ef149a1ef84a9adf72922f8260c.png&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;现在需要你找到最小的正整数$x$，使得$log_{a}^* (x) \ge b$，由于结果可能会非常大，所以需要你输出$x$对$m$取余后的结果。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;输入格式：共$t$组测试样例，每组样例有一行，一行三个数$a,b,m$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="欧拉降幂" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
    
      <category term="数学" scheme="https://yuggu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="欧拉降幂" scheme="https://yuggu.github.io/tags/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
      <category term="幂塔函数" scheme="https://yuggu.github.io/tags/%E5%B9%82%E5%A1%94%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[2019南京网络赛-A] The beautiful values of the palace</title>
    <link href="https://yuggu.github.io/2019/09/05/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-A-The-beautiful-values-of-the-palace/"/>
    <id>https://yuggu.github.io/2019/09/05/2019南京网络赛-A-The-beautiful-values-of-the-palace/</id>
    <published>2019-09-05T10:47:55.000Z</published>
    <updated>2019-09-05T12:22:49.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41298" target="_blank" rel="noopener">$\text{2019南京网络赛-A.The beautiful values of the palace}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;有一个$n\times  n$的螺旋数字矩阵，$n$一定是奇数，若边长为5则如下：<br><img src="https://res.jisuanke.com/img/upload/20190826/e188ba2f470e2afbf1d21ac4d1887e2f225dd40b.png"><br>&emsp;&emsp;这个矩阵内有$m$个点是有效的（即有一个值为对应螺旋矩阵该位置的值），其他位置都为0。现在有$p$次查询$(x1,y1,x2,y2)$，询问$(x1,y1,)、(x2,y2)$所围成的矩阵之间的所有数的数位和的和是多少。<br>&emsp;&emsp;输入格式：共$t$组测试样例，每组样例，第一行三个数$n,m,p$，接下来$m$行，每行一组坐标$(x,y)$，告诉$m$个有效点，之后$p$行，每行一次查询$(x1,y1,x2,y2)$。</p><p>&emsp;&emsp;数据范围：$(t\leq 5,n\leq 10^6),(m,p\leq 10^5)$.</p><p>&emsp;&emsp;输出格式：每行输出一个查询结果。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;螺旋矩阵$(x,y)$位置的数的计算，这里就不解释了。</p><p>&emsp;&emsp;看网上说这就是一个二维偏序问题，个人理解：逆序数的求解应该是算是一个一维偏序问题。对于二维偏序问题可以通过对$x$来排序，就是一个一维偏序问题了。<br>&emsp;&emsp;设$sum(x,y)$表示以$(1,1)$为左下角，以$(x,y)$为右上角所包含所有数的数位和的和，对于查询$(x1,y1,x2,y2)$即要求</p><script type="math/tex; mode=display">sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1)</script><p>&emsp;&emsp;我们就可以把这个查询表示成四个三元组（1为加，-1为减）</p><script type="math/tex; mode=display">(x2,y2,1),(x1-1,y2,-1),(x2,y1-1,-1),(x1-1,y1-1,1)</script><p>&emsp;&emsp;之后我们将这些每个查询所表示的四个三元组以及$m$个有效点的插入在一起按照$x$来排序（即离线），我们用树状数组来维护$sum(x,y)$（由于$x$是升序排列，因此我们只需要使用一个一维数组维护$1-y$的数的数位和的和），我们遍历所有离线的操作，如果当前操作是插入$(x,y)$，那么我们就在树状数组的$y$位置插入$(x,y)$位置的数的数位和，对于查询操作细节见代码。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll t, n, m, p, c[<span class="number">1000006</span>], res[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll x, y, id, va;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp; a)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x != x)<span class="keyword">return</span> a.x &gt; x;</span><br><span class="line">        <span class="keyword">if</span> (a.y != y)<span class="keyword">return</span> a.y &gt; y;</span><br><span class="line">        <span class="keyword">return</span> a.id &gt; id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ct[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QV</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="comment">//求美丽值</span></span><br><span class="line">    ll mi,ans=<span class="number">0</span>;</span><br><span class="line">    x=n-x+<span class="number">1</span>;y=n-y+<span class="number">1</span>;</span><br><span class="line">    mi=min(x,min(y,min(n-x+<span class="number">1</span>,n-y+<span class="number">1</span>)));</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=y)</span><br><span class="line">        ans=mi*(<span class="number">4</span>*(n<span class="number">-1</span>)<span class="number">-4</span>*mi)+<span class="number">10</span>*mi<span class="number">-4</span>*n<span class="number">-3</span>+x+y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans=mi*(<span class="number">4</span>*n<span class="number">-4</span>*mi)+<span class="number">2</span>*mi+<span class="number">1</span>-x-y;<span class="comment">//模拟过程</span></span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">        res+=(ans%<span class="number">10</span>);ans/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c =getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; n + <span class="number">3</span>; i += i &amp; -i)</span><br><span class="line">        c[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i)</span><br><span class="line">        ans += c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    t = read();</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(ct, <span class="number">0</span>, <span class="keyword">sizeof</span>(ct));</span><br><span class="line">        <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(res));</span><br><span class="line">        n = read(), m = read(), p = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">            ct[i].x = read(), ct[i].y = read();</span><br><span class="line">        <span class="keyword">int</span> x1, x2, y1, y2, cnt = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">            x1 = read(), y1 = read(), x2 = read(), y2 = read();</span><br><span class="line">            ct[++cnt].x = x2, ct[cnt].y = y2, ct[cnt].id = i, ct[cnt].va = <span class="number">1</span>;</span><br><span class="line">            ct[++cnt].x = x1 - <span class="number">1</span>, ct[cnt].y = y1 - <span class="number">1</span>, ct[cnt].id = i, ct[cnt].va = <span class="number">1</span>;</span><br><span class="line">            ct[++cnt].x = x1 - <span class="number">1</span>, ct[cnt].y = y2, ct[cnt].id = i, ct[cnt].va = <span class="number">-1</span>;</span><br><span class="line">            ct[++cnt].x = x2, ct[cnt].y = y1 - <span class="number">1</span>, ct[cnt].id = i, ct[cnt].va = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ct + <span class="number">1</span>, ct + <span class="number">1</span> + cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ct[i].id == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> val = QV(ct[i].x, ct[i].y);</span><br><span class="line">                insert(ct[i].y, val);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//ct[i].va为1则是加，为-1则是减</span></span><br><span class="line">                res[ct[i].id] += <span class="number">1l</span>l * ct[i].va * sum(ct[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019南京网络赛-A.The beautiful values of the palace}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有一个$n\times  n$的螺旋数字矩阵，$n$一定是奇数，若边长为5则如下：&lt;br&gt;&lt;img src=&quot;https://res.jisuanke.com/img/upload/20190826/e188ba2f470e2afbf1d21ac4d1887e2f225dd40b.png&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这个矩阵内有$m$个点是有效的（即有一个值为对应螺旋矩阵该位置的值），其他位置都为0。现在有$p$次查询$(x1,y1,x2,y2)$，询问$(x1,y1,)、(x2,y2)$所围成的矩阵之间的所有数的数位和的和是多少。&lt;br&gt;&amp;emsp;&amp;emsp;输入格式：共$t$组测试样例，每组样例，第一行三个数$n,m,p$，接下来$m$行，每行一组坐标$(x,y)$，告诉$m$个有效点，之后$p$行，每行一次查询$(x1,y1,x2,y2)$。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$(t\leq 5,n\leq 10^6),(m,p\leq 10^5)$.&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;输出格式：每行输出一个查询结果。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="树状数组" scheme="https://yuggu.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>[2019宁夏网络赛-F] Moving On</title>
    <link href="https://yuggu.github.io/2019/09/05/2019%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-F-Moving-On/"/>
    <id>https://yuggu.github.io/2019/09/05/2019宁夏网络赛-F-Moving-On/</id>
    <published>2019-09-05T05:09:04.000Z</published>
    <updated>2019-09-05T09:23:53.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41290" target="_blank" rel="noopener">$\text{2019宁夏网络赛-F.Moving On}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;有$n$个城市，城市$i$有一个犯罪值$r_i$，城市u和v之间的距离是$d[i][j]$(无向图)，现在有$q$次查询，每次查询询问从城市$u$到$v$，在中途经过的任意城市的犯罪值不超过$w$的情况下(中途城市不包括$i$和$j$)的最短路径是多少。<br><a id="more"></a><br>&emsp;&emsp;输入格式：共$t$组样例，每个测试样例的第一行$n,q$，代表$n$个城市，共$q$次查询，接下来一行$n$个整数$r_1,r_2…r_n$，接下来是一个$n\times n$的矩阵$d$，接下来$q$行代表$q$次查询，每行三个数$u,v,w$.</p><p>&emsp;&emsp;数据范围：$t&lt;50,1≤ri_​≤10^5,1≤d_{i,j}​≤10^5(ij),d_{i,i}​=0,d_{i,j}=d_{j,i},1\leq u,v\leq n,1\leq w\leq 10^5$.</p><p>&emsp;&emsp;输出格式：每个测试样例的第一行输出<strong>Case #x:</strong>，x代表第x个测试样例，接下来的每一行输出一个询问结果。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;题目给出了$n$个点，整个图是一个稠密图，并且有$q$次查询，即使每次查询都使用复杂度为$\text{O((N+M)logN)}$的堆优化的$\text{Dijstra}$也会超时。</p><p>&emsp;&emsp;这里使用$\text{floyd}$，对于$\text{floyd}$求最短路来说，$f[k][i][j]$表示从$i$到$j$中途经过$k$的最短路，那么我们可以把城市按照犯罪值$r[i]$升序排列，那么$f[k][i][j]$则就是从$i$到$j$中途经过犯罪值前$k$小城市（意思是经过前$k$小城市中的一部分）的最短路，那么我们需要求出所有的答案，我们的$f[k][i][j]$可以通过<code>从i到j中途经过犯罪值前k-1小城市（同上）的最短路</code>以及<code>从i到k和从k到j中途经过前k-1小城市（同上）的最短路的和</code>，这二者更新得到。<br>&emsp;&emsp;之后对于每个询问$(u,v,w)$，二分找到满足犯罪值小于等于$w$的犯罪值最大的城市编号$k$，$f[k][u][v]$即是查询结果。<br>&emsp;</p><ol><li>当图是个稠密图，并且询问多次两点之间最短路的时候可以使用Floyd算法；</li><li>注意使用Floyd的任何变形；</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, q, u, v, w;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">roberry</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> va, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> roberry &amp; a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.va &gt; va;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;r[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> l1, <span class="keyword">int</span> r1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l1 + <span class="number">1</span>&lt; r1) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l1 + r1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r[mid].va &lt;= w)l1 = mid;</span><br><span class="line">        <span class="keyword">else</span> r1 = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cnt);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;r[i].va);</span><br><span class="line">            r[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(r + <span class="number">1</span>, r + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);    </span><br><span class="line">                dp[<span class="number">0</span>][i][j] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> p = r[i].id;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                    dp[i][j][k] = min(dp[i - <span class="number">1</span>][j][k], dp[i - <span class="number">1</span>][j][p] + dp[i - <span class="number">1</span>][p][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[find(w, <span class="number">0</span>, n + <span class="number">1</span>)][u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019宁夏网络赛-F.Moving On}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有$n$个城市，城市$i$有一个犯罪值$r_i$，城市u和v之间的距离是$d[i][j]$(无向图)，现在有$q$次查询，每次查询询问从城市$u$到$v$，在中途经过的任意城市的犯罪值不超过$w$的情况下(中途城市不包括$i$和$j$)的最短路径是多少。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Floyd" scheme="https://yuggu.github.io/tags/Floyd/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[2019宁夏网络赛-A] Maximum Element In A Stack</title>
    <link href="https://yuggu.github.io/2019/09/04/2019%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-A-Maximum-Element-In-A-Stack/"/>
    <id>https://yuggu.github.io/2019/09/04/2019宁夏网络赛-A-Maximum-Element-In-A-Stack/</id>
    <published>2019-09-04T08:30:21.000Z</published>
    <updated>2019-09-05T12:17:21.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://nanti.jisuanke.com/t/41285" target="_blank" rel="noopener">$\text{2019宁夏网络赛-A.Maximum Element In A Stack}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个空的$\text{stack}$，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。</p><p>&emsp;&emsp;输入规格即数据范围：第一行一个$\text{T(T<50)}$，下面每行一组测试样例，包含七个整数$n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq p,q,m\leq 10^{9}),sa,sb,sc(10^{4}\leq sa,sb,sc\leq 10^{6})$，其中$n$是操作的数量，其中关于入栈出栈操作部分代码已给出，如下： <a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></50)}$，下面每行一组测试样例，包含七个整数$n(1\leq></p><p>&emsp;&emsp;对于每个测试样例，输出一行<code>Case #x: y</code>，x代表第x个测试样例，y等于$\oplus^n_{i=1} (i \cdot a_i)$，$a_i​$是第$i$次操作后的最大值。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;关键目标是求出，每次出栈入栈之后的最大值，如果没有出栈操作，仅仅只有入栈操作，那么我们需要一个res以及一个栈s1，在每次入栈元素x之后，使用它更新一下最大值res，但是这里出现了出栈的操作；</p><p>&emsp;&emsp;那么考虑一个出栈操作前后的最大值变化，如果出栈元素不是最大值，那么最大值不变，如果出栈元素是最大值，那么出栈后最大值为没出栈前的次大值，那么我们考虑使用一个单调的栈s2（栈底到栈顶递增）模拟最大值变化，栈s1模拟入栈出栈操作；如果当前操作是入栈元素x，并且x大于等于栈顶元素，那么就让x同时入栈s1、s2，若小于，则让x入栈s1，如果当前操作是出栈操作，比较s1栈顶元素与s2栈顶元素，若相等，说明当前最大元素即为s1栈顶元素，那么同时让s1与s2栈顶元素出栈，不相等则，让s1栈顶元素出栈，当前最大值即为s2栈顶元素。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line">    <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">ll res,cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">5000006</span>], b[<span class="number">5000006</span>];</span><br><span class="line">ll i1, i2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PUSH</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    b[++i2] = x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= a[i1])</span><br><span class="line">        a[++i1] = x;</span><br><span class="line">    res ^= (cnt * a[i1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">POP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(i2 &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i2] == a[i1])</span><br><span class="line">            i2--, i1--;</span><br><span class="line">        <span class="keyword">else</span> i2--;</span><br><span class="line">        res ^= (cnt * a[i1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p, q, m;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA, SB, SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">rng61</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SA ^= SA &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = SA; SA = SB;</span><br><span class="line">    SB = SC;</span><br><span class="line">    SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>, &amp;n, &amp;p, &amp;q, &amp;m, &amp;SA, &amp;SB, &amp;SC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rng61() % (p + q) &lt; p)&#123;</span><br><span class="line">            PUSH(rng61() % m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            POP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= t; k++) &#123;</span><br><span class="line">        i1 = i2 = cnt = res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        gen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, k, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41285&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{2019宁夏网络赛-A.Maximum Element In A Stack}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个空的$\text{stack}$，你有两种操作，入栈一个数以及将栈顶数出栈，每次入栈操作后或者出栈操作后，你需要输出当前栈中的最大值，如果栈为空而当前操作为出栈，那么应该输出0。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;输入规格即数据范围：第一行一个$\text{T(T&lt;50)}$，下面每行一组测试样例，包含七个整数$n(1\leq n \leq 5\times\ 10^{6}),p,q,m(1\leq p,q,m\leq 10^{9}),sa,sb,sc(10^{4}\leq sa,sb,sc\leq 10^{6})$，其中$n$是操作的数量，其中关于入栈出栈操作部分代码已给出，如下：
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="其他" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="思维" scheme="https://yuggu.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="模拟" scheme="https://yuggu.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫基础</title>
    <link href="https://yuggu.github.io/2019/08/29/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <id>https://yuggu.github.io/2019/08/29/Python爬虫基础/</id>
    <published>2019-08-29T07:35:24.000Z</published>
    <updated>2019-09-04T05:58:55.518Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h4><p>&emsp;网络爬虫可以按照指定的规则（网络爬虫的算法）自动浏览或抓取网络中的信息，通过Python可以很轻松地编写爬虫程序或者是脚本。<br>&emsp;如百度的爬虫，它的名字叫做百度蜘蛛，它是百度搜索引擎的一个自动程序。它每天都会在海量的互联网信息中进行爬取，收集并整理互联网上的网页、图片视频等信息。然后当用户在搜索引擎中输入对应的关键字时，百度将从收集的网络信息中找出相关的内容，按照一定的顺序将信息呈现给用户。</p><h4 id="网络爬虫的基本原理"><a href="#网络爬虫的基本原理" class="headerlink" title="网络爬虫的基本原理"></a>网络爬虫的基本原理</h4><a id="more"></a><p>一个通用的网络爬虫基本工作流程如下；<br><img src="https://img-blog.csdnimg.cn/2019070220415970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>获取初始的URL，该URL地址是用户自己指定的初始爬取的网页；</li><li>爬取对应URL地址的网页时，获取新的URL地址；</li><li>将新的URL地址放入URL队列中；</li><li>从URL队列中读取新的URL，然后依据新的URL爬取网页，同时从新的网页中获取新的URL地址，重复上述的爬取过程。</li><li>设置停止条件，即在满足停止条件时，停止爬取。<h4 id="网络爬虫的网络请求"><a href="#网络爬虫的网络请求" class="headerlink" title="网络爬虫的网络请求"></a>网络爬虫的网络请求</h4>&emsp;下面给出三种Python实现HTTP网络请求最常见的3中方式：urllib、urllib3、requests.</li><li><p>urllib模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求获取百度网页内容</span></span><br><span class="line"><span class="keyword">import</span> urllib.request<span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 打开指定需要爬取的网页</span></span><br><span class="line">response=urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">html=response.read()</span><br><span class="line">print(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求实现获取网页信息</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment"># 将数据用urlencode编码处理后，再使用encoding设置为utf-8编码</span></span><br><span class="line">data=bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>:<span class="string">'hello'</span>&#125;),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 打开指定需要爬取的网页</span></span><br><span class="line">response=urllib.request.urlopen(<span class="string">"http://httpbin.org/post"</span>,data=data)</span><br><span class="line">html=response.read()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure></li><li><p>urllib3模块，它用于http客户端的python库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get实现发送网络请求</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="comment"># 创建poolmanager对象，用于处理与线程池的连接以及线程安全的所有细节</span></span><br><span class="line">http=urllib3.PoolManager()</span><br><span class="line"><span class="comment"># 对索要爬取的对象发送请求</span></span><br><span class="line">response=http.request(<span class="string">'get'</span>,<span class="string">'http://blog.csdn.net'</span>)</span><br><span class="line">print(response.data)</span><br><span class="line"><span class="comment"># # post实现获取网络信息的内容</span></span><br><span class="line">response=http.request(<span class="string">'post'</span>,<span class="string">'http://httpbin.org/post'</span>,fields=&#123;<span class="string">'hello'</span>:<span class="string">'world'</span>&#125;)</span><br><span class="line">print(response.data)</span><br></pre></td></tr></table></figure></li><li><p>requests模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response=requests.get(<span class="string">'http://blog.csdn.net'</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.url)</span><br><span class="line">print(response.headers)</span><br><span class="line">print(response.headers)</span><br><span class="line">print(response.history)</span><br><span class="line">print(response.cookies)</span><br><span class="line">print(response.encoding)</span><br><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data=&#123;<span class="string">'world'</span>:<span class="string">'hello'</span>&#125;</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response=requests.get(<span class="string">'http://httpbin.org/post'</span>,data=data)</span><br><span class="line">print(response.content)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h4><p>&emsp;requests是python的第三方模块，它也是目前公认的爬取网页最好的python第三方库，它很简洁，它的信息可以从<code>http://www.python-request.org</code>获取；<br>&emsp;Requests库的get()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=requests.get(url)</span><br></pre></td></tr></table></figure></p><p>&emsp;它构造一个向服务器请求资源的Request，返回一个包含服务器资源的Response对象，response包含了网页爬虫爬取返回的所有内容；完整形式如下<br><code>requests.get(url,params=None,**kwargs)</code><br>&emsp;params为常用参数，**kwargs为其他控制访问访问参数；<br>&emsp;下面给出requests的get方法的源代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, params=None, **kwargs)</span>:</span></span><br><span class="line">kwargs.setdefault(<span class="string">'allow_redirects'</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> request(<span class="string">'get'</span>,url,params=params,**kwargs)</span><br></pre></td></tr></table></figure></p><p>&emsp;我们发现，它的实现用到了requests的request方法，实际上，requests库提供了7个方法，然而包含get的其他六个类似方法的实现，都用到了request方法，<br>&emsp;response的status_code用来检测请求的状态码，如果状态码是200说明访问成功，而非200则表明访问失败；response的常用属性如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">r.status_code</td><td style="text-align:left">http请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td style="text-align:left">r.text</td><td style="text-align:left">http响应内容的字符串形式，即url对应的内容</td></tr><tr><td style="text-align:left">r.encoding</td><td style="text-align:left">从http header中猜测的响应内容编码方式</td></tr><tr><td style="text-align:left">r.apparent_encoding</td><td style="text-align:left">从内容中分析出的响应内容编码方式</td></tr><tr><td style="text-align:left">r.content</td><td style="text-align:left">http响应内容的二进制形式</td></tr></tbody></table></div><p>&emsp;其中，r.encoding是从http的header中猜测内容编码方式，它不是向r.apparent_encoding一样根据内容进行分析编码方式，它相对来说是不准确的，我们要获取网页内容时，我们将它们输出到控制台上，有时编码不正确，可能会获取中文的乱码，所以我们一般需要看encoding与apparent_encoding是否相同；</p><p>request方法<br><code>requests.request(method,url,**kwargs)</code><br>method：请求方式<br><code>r=requests.request(&#39;GET&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;HEAD&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;POST&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;PUT&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;PATCH&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;delete&#39;,url,**kwargs)</code><br><code>r=requests.request(&#39;OPTIONS&#39;,url,**kwargs)</code><br>r=requests.request(‘GET’,url,**kwargs)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kv=&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">'GET'</span>,<span class="string">'http://python123.io/ws'</span>,params=kv)</span><br><span class="line">print(r.url)</span><br><span class="line"><span class="comment"># -&gt;http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure></p><p>&emsp;它添加了一个字典，被添加到url中，服务器接受这些参数，并根据这些参数筛选一些数据；<br>&emsp;对于**kwargs来说，它有13种：<br><code>pagrams,data,json,headers,cookies,auth,files,timeout,proxies,allow_redirects,stream,vertify,cert</code></p><h4 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态不是200，引发HTTPError异常,然后抛出</span></span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text        </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url=<span class="string">"http://blog.csdn.net"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h4 id="网络爬虫引用的问题"><a href="#网络爬虫引用的问题" class="headerlink" title="网络爬虫引用的问题"></a>网络爬虫引用的问题</h4><p>&emsp;网络爬虫的尺寸</p><div class="table-container"><table><thead><tr><th style="text-align:left">规模</th><th style="text-align:left">爬取对象</th></tr></thead><tbody><tr><td style="text-align:left">小规模，数据量小，爬取速度不敏感，Requests库&gt;90%</td><td style="text-align:left">爬取网页，玩转网页</td></tr><tr><td style="text-align:left">中规模，数据规模较大，爬取速度敏感，Scrapy库</td><td style="text-align:left">爬取网站，爬取系列网站</td></tr><tr><td style="text-align:left">大规模，搜索引擎，爬取速度关键，如百度、Google，定制开发</td><td style="text-align:left">爬取全网</td></tr></tbody></table></div><p>&emsp;带来的问题</p><ul><li>服务器骚扰：服务器默认按人数约定访问能力，爬虫的访问速度比人快的多，将带来对服务器的额外开销；</li><li>法律风险：服务器上的数据有产权归属，爬虫爬取数据进行牟利将带来法律风险；</li><li>隐私泄露：爬虫可以爬取一些网站上的私人信息，它可以破解简单的访问控制能力，获得保护数据从而泄露个人隐私；</li></ul><h4 id="Robot协议"><a href="#Robot协议" class="headerlink" title="Robot协议"></a>Robot协议</h4><p>&emsp;Robot协议是来告知网络爬虫，该网站哪些页面可以爬取，哪些不可爬取，它在网站的根目下，有些网站没有Robot协议，代表任何爬虫可以爬取任何数据；<br>&emsp;如京东：<code>https://www.jd.com/.robots.txt</code><br>&emsp;它包含两部分User-Agent表示哪些爬虫，Disallowe代表不可爬取的资源；<br>&emsp;网络爬虫自动或人工识别robots.txt，在进行内容爬取；网络其实可以不遵守Robots协议，但是存在法律风险</p><h4 id="请求headers处理"><a href="#请求headers处理" class="headerlink" title="请求headers处理"></a>请求headers处理</h4><p>&emsp;有时在请求一个网页内容时，无论发现是get还是post以及其他请求，都会出现status_code非200的错误，这种错误多为服务器拒绝了您的访问，那是因为这些网页为了防止恶意采集信息，采用了反爬虫设置，即浏览器根据请求的头部信息判断这个请求是浏览器还是一段爬虫程序发送来的；这时候可以通过模拟浏览器的头部信息来访问；如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kv=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125; </span><br><span class="line">response=requests.get(<span class="string">'http://www.amazon.cn/'</span>,headers=kv)</span><br><span class="line">response.encoding=response.apparent_encoding</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h4 id="搜索引擎关键词提交接口"><a href="#搜索引擎关键词提交接口" class="headerlink" title="搜索引擎关键词提交接口"></a>搜索引擎关键词提交接口</h4><p>百度的关键词接口<br><code>http://www.baidu.com/s?wd=keyword</code><br>360的关键词接口<br><code>http://www.so.com/s?q=keyword</code><br>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">kv=&#123;<span class="string">'wd'</span>:<span class="string">'Python'</span>&#125;</span><br><span class="line">r=requests.get(<span class="string">'http://www.baidu.com/s'</span>,params=kv)</span><br><span class="line">print(r.request.url)</span><br><span class="line"><span class="comment"># -&gt;http://www.baidu.com/s?wd=Python</span></span><br></pre></td></tr></table></figure></p><h4 id="网络图片的爬取"><a href="#网络图片的爬取" class="headerlink" title="网络图片的爬取"></a>网络图片的爬取</h4><p><code>https://wx4.sinaimg.cn/mw690/8d05b653ly1g4n0elm7axj20j60b475b.jpg</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">path=<span class="string">'D://abc.jpg'</span>  <span class="comment"># 保存在D盘下，以abc.jpg命名</span></span><br><span class="line">url=<span class="string">'https://wx4.sinaimg.cn/mw690/8d05b653ly1g4n0elm7axj20j60b475b.jpg'</span></span><br><span class="line"><span class="comment"># 以原文件名命名</span></span><br><span class="line"><span class="comment"># roo='D://'</span></span><br><span class="line"><span class="comment"># path=root+url.split('/')[-1]</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line"><span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></p><p>&emsp;首先打开一个文件，将url返回的内容写到这个路径中，r.content返回的是二进制形式;<br>&emsp;类似的还有视频，动画、音频文件等等的爬取</p><h4 id="IP地址查询"><a href="#IP地址查询" class="headerlink" title="IP地址查询"></a>IP地址查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://m.ip138.com/ip.asp?ip="</span></span><br><span class="line">r.requests.get(url+<span class="string">'202.204.80.112'</span>)</span><br><span class="line">r.encoding=r.apparent_coding</span><br><span class="line">print(r.text[<span class="number">-500</span>:])</span><br></pre></td></tr></table></figure><h4 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h4><h5 id="BeautifulSoup的使用-1"><a href="#BeautifulSoup的使用-1" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 第一个参数是html，第二个是解析器</span></span><br><span class="line">soup=BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html,parser'</span>)</span><br></pre></td></tr></table></figure><p>在一个html文件中，对应一个标签树，而一个标签树对应一个BeautifulSoup类，即一个BeautifuLSoup对应应一个HTML/XML文档的全部内容；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup=BeautifulSoup(<span class="string">'&lt;html&gt;data&lt;/html&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup2=BeautifulSoup(open(<span class="string">'D://demo.html'</span>),<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure></p><p>获取一个html网页源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># print(soup.contents)</span></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure></p><h5 id="BeautifulSoup库解析器"><a href="#BeautifulSoup库解析器" class="headerlink" title="BeautifulSoup库解析器"></a>BeautifulSoup库解析器</h5><p><img src="https://img-blog.csdnimg.cn/20190704132455969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="BeautifulSoup类的基本元素"><a href="#BeautifulSoup类的基本元素" class="headerlink" title="BeautifulSoup类的基本元素"></a>BeautifulSoup类的基本元素</h5><p><img src="https://img-blog.csdnimg.cn/20190704132526378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>这里需要注意的是，对于beautiful.tag来说，比如soup.a它是只返回html中的第一个a标签内的内容</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">tag=soup.a</span><br><span class="line">print(tag)</span><br><span class="line">print(tag.name)             <span class="comment"># a标签的名字</span></span><br><span class="line">print(tag.parent.name)      <span class="comment"># a标签的父亲</span></span><br><span class="line">print(tag.parent.parent.name)<span class="comment"># a的父亲的父亲</span></span><br><span class="line">print(tag.attrs)</span><br><span class="line">print(tag.attrs[<span class="string">'class'</span>])</span><br><span class="line">print(tag.attrs[<span class="string">'href'</span>])</span><br><span class="line">print(type(tag))            <span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line">print(tag.string)</span><br><span class="line">print(soup.p.string)</span><br><span class="line">print(type(soup.p.string))  <span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line">newsoup=BeautifulSoup(<span class="string">'&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">print(newsoup.b.string)</span><br><span class="line">print(type(newsoup.b.string))   <span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></span><br><span class="line">print(newsoup.p.string)</span><br><span class="line">print(type(newsoup.p.string))   <span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># -&gt;&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span></span><br><span class="line"><span class="comment"># -&gt;a</span></span><br><span class="line"><span class="comment"># -&gt;p</span></span><br><span class="line"><span class="comment"># -&gt;body</span></span><br><span class="line"><span class="comment"># -&gt;&#123;'href': 'http://www.icourse163.org/course/BIT-268001', 'class': ['py1'], 'id': 'link1'&#125;</span></span><br><span class="line"><span class="comment"># -&gt;['py1']</span></span><br><span class="line"><span class="comment"># -&gt;http://www.icourse163.org/course/BIT-268001</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;Basic Python</span></span><br><span class="line"><span class="comment"># -&gt;The demo python introduces several python courses.</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;This is a comment</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.Comment'&gt;</span></span><br><span class="line"><span class="comment"># -&gt;This is not a comment</span></span><br><span class="line"><span class="comment"># -&gt;&lt;class 'bs4.element.NavigableString'&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190704141033714.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190704141223913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure></p><h4 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h4><p><img src="https://img-blog.csdnimg.cn/20190704141612578.png" alt="在这里插入图片描述"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://python123.io/ws/demo.html'</span></span><br><span class="line">demo=requests.get(url).text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:<span class="comment"># a为一种标签类型，对先辈标签遍历</span></span><br><span class="line"><span class="keyword">if</span> parent <span class="keyword">is</span> Node:</span><br><span class="line">print(parent)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(parent.name)</span><br><span class="line"><span class="comment"># -&gt;p</span></span><br><span class="line"><span class="comment"># -&gt;body</span></span><br><span class="line"><span class="comment"># -&gt;html</span></span><br><span class="line"><span class="comment"># -&gt;[document]</span></span><br></pre></td></tr></table></figure></p><h5 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h5><p><img src="https://img-blog.csdnimg.cn/20190704141749574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvd2VNZWU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="平行遍历发生在同一个父节点下的个节点间"><a href="#平行遍历发生在同一个父节点下的个节点间" class="headerlink" title="平行遍历发生在同一个父节点下的个节点间"></a><code>平行遍历发生在同一个父节点下的个节点间</code></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:<span class="comment"># 遍历后序节点</span></span><br><span class="line">print(sibling)</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:<span class="comment"># 遍历前续节点</span></span><br><span class="line">print(sibling)</span><br></pre></td></tr></table></figure><h5 id="爬取天猫Ipad商品信息"><a href="#爬取天猫Ipad商品信息" class="headerlink" title="爬取天猫Ipad商品信息"></a>爬取天猫Ipad商品信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span> :</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        reponse = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> reponse.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> reponse.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInf</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern =re.compile(<span class="string">'&lt;div class="product.*?&lt;a href="(.*?)".*?&lt;/b&gt;(.*?)&lt;/em&gt;.*?title="(.*?)".*?&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?&lt;/div&gt;'</span>, re.S)</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'href'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'price'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'shop'</span>:item[<span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'3.txt'</span>, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(content, ensure_ascii = <span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url =<span class="string">'https://list.tmall.com/search_product.htm?q=ipad&amp;type=p&amp;vmarket=&amp;spm=875.7931836%2FB.a2227oh.d100&amp;from=mallfp..pc_1_searchbutton'</span></span><br><span class="line">    html = getHtml(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> getInf(html):</span><br><span class="line">        print(item)</span><br><span class="line">        writeFile(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这里自己第一次亲自，根据html，写出了正则表达式。<br>待续···</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是网络爬虫&quot;&gt;&lt;a href=&quot;#什么是网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;什么是网络爬虫&quot;&gt;&lt;/a&gt;什么是网络爬虫&lt;/h4&gt;&lt;p&gt;&amp;emsp;网络爬虫可以按照指定的规则（网络爬虫的算法）自动浏览或抓取网络中的信息，通过Python可以很轻松地编写爬虫程序或者是脚本。&lt;br&gt;&amp;emsp;如百度的爬虫，它的名字叫做百度蜘蛛，它是百度搜索引擎的一个自动程序。它每天都会在海量的互联网信息中进行爬取，收集并整理互联网上的网页、图片视频等信息。然后当用户在搜索引擎中输入对应的关键字时，百度将从收集的网络信息中找出相关的内容，按照一定的顺序将信息呈现给用户。&lt;/p&gt;
&lt;h4 id=&quot;网络爬虫的基本原理&quot;&gt;&lt;a href=&quot;#网络爬虫的基本原理&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫的基本原理&quot;&gt;&lt;/a&gt;网络爬虫的基本原理&lt;/h4&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yuggu.github.io/categories/Python/"/>
    
      <category term="爬虫" scheme="https://yuggu.github.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://yuggu.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yuggu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据库之范式</title>
    <link href="https://yuggu.github.io/2019/08/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E8%8C%83%E5%BC%8F/"/>
    <id>https://yuggu.github.io/2019/08/28/数据库之范式/</id>
    <published>2019-08-28T10:06:16.000Z</published>
    <updated>2019-08-28T10:09:15.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库之范式"><a href="#数据库之范式" class="headerlink" title="数据库之范式"></a>数据库之范式</h3><hr><p>&emsp;&emsp;范式来自英文$\text{Normal form}$，简称$\text{NF}$。设计关系<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">数据库</a>时，遵从不同的规范<a href="https://baike.baidu.com/item/%E8%A6%81%E6%B1%82/3598753" target="_blank" rel="noopener">要求</a>，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入、删除和更新操作异常。反之则是乱七八糟。<br><a id="more"></a><br>&emsp;&emsp;在介绍范式之前先介绍一些必要的概念。</p><h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>&emsp;&emsp;在一个关系模式R(U)下，X、Y是U的子集。若对于R(U)的任意一个关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，即由X可唯一确定Y，则有X函数确定Y或Y函数依赖于X，记作X→Y。</p><p>&emsp;&emsp;若X→Y，并且对于X的任意一个真子集Z，都得不到Y函数依赖于X，则有Y对于X完全函数依赖，否则成Y对X部分函数依赖。若X→Y（Y→X不成立），且Y→Z，则有Z对X传递函数依赖。<br>(以下范式均按照个人理解给出阐述)</p><h4 id="码"><a href="#码" class="headerlink" title="码"></a>码</h4><p>&emsp;&emsp;候选码码是可以唯一标识关系的属性或属性组（又称为码），可从候选码中任选一个当作主码，而包含在任意一个码中的属性称为主属性，不包含在任意一个码中的属性称非主属性。</p><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>&emsp;&emsp;即$\text{1NF}$在关系模型中，对于数据库中的每一列均是不能再分割的。</p><html><table>    <tr>        <td rowspan="2" colspan="1"><b>商品编号</b></td>        <td rowspan="2" colspan="1"><b>商品名</b></td>        <td rowspan="1" colspan="2"><b>销售</b></td>        </tr>    <tr>        <td><b>数量/个</b></td>        <td><b>单价/元<b></b></b></td>    </tr>    <tr>        <td>1</td>        <td>牙膏</td>        <td>20</td>        <td>10</td>    </tr>    <tr>        <td>2</td>        <td>矿泉水</td>        <td>50</td>        <td>2</td>    </tr></table></html><p>&emsp;&emsp;如该关系即不满足第一范式，销售属性可再分，修改后如下。修改后即满足第一范式。</p><div class="table-container"><table><thead><tr><th>商品编号</th><th>商品名</th><th>销售数量/个</th><th>销售单价/元</th></tr></thead><tbody><tr><td>1</td><td>牙膏</td><td>20</td><td>10</td></tr><tr><td>2</td><td>矿泉水</td><td>50</td><td>2</td></tr></tbody></table></div><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>&emsp;&emsp;即$\text{2NF}$，$\text{2NF}$在$\text{1NF}$的基础上消除了非主属性对于码的部分函数依赖；如关系R(A,B,C,D)，其中(A,B)→C、A→D，那么(A,B)可以唯一标识整个关系，所以(A,B)即是码，且存在非主属性D对于码(A,B)的部分函数依赖，所以它不满足第二范式，满足第一范式，所以为$\text{1NF}$。</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>&emsp;&emsp;即$\text{3NF}$，$\text{2NF}$在$\text{2NF}$的基础上消除了非主属性对于码的传递函数依赖；如关系R(A,B,C)，其中A→B，B→C，则码为A，存在非主属性C对于码A的传递函数依赖，所以它不满足第三范式，且满足$\text{2NF}$，所以为$\text{2NF}$。</p><h4 id="text-BC-范式"><a href="#text-BC-范式" class="headerlink" title="$\text{BC}$范式"></a>$\text{BC}$范式</h4><p>&emsp;&emsp;即$\text{BCNF}$，$\text{BCNF}$在$\text{3NF}$的基础上消除了主属性对于码的传递函数依赖和部分函数依赖；如关系R(A,B,C)，其中(A,B)→C，且C→A，那么显然的(A,B)、(C,B)是码，那么A、B、C均是主属性，存在主属性C对于码(A,B)的依赖，且它满足$\text{3NF}$，所以它是$\text{3NF}$。</p><p><strong>待续···</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库之范式&quot;&gt;&lt;a href=&quot;#数据库之范式&quot; class=&quot;headerlink&quot; title=&quot;数据库之范式&quot;&gt;&lt;/a&gt;数据库之范式&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;范式来自英文$\text{Normal form}$，简称$\text{NF}$。设计关系&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据库&lt;/a&gt;时，遵从不同的规范&lt;a href=&quot;https://baike.baidu.com/item/%E8%A6%81%E6%B1%82/3598753&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;要求&lt;/a&gt;，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入、删除和更新操作异常。反之则是乱七八糟。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://yuggu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="范式" scheme="https://yuggu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%8C%83%E5%BC%8F/"/>
    
    
      <category term="数据库" scheme="https://yuggu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="范式" scheme="https://yuggu.github.io/tags/%E8%8C%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu - P1352] 没有上司的舞会</title>
    <link href="https://yuggu.github.io/2019/07/23/Luogu-P1352-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/"/>
    <id>https://yuggu.github.io/2019/07/23/Luogu-P1352-没有上司的舞会/</id>
    <published>2019-07-23T14:39:30.000Z</published>
    <updated>2019-07-23T14:44:21.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1352" target="_blank" rel="noopener">$\text{Luogu - P1352}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;$\text{Ural}$大学有$N$名职员，编号$1\dots N$，它们的关系是一棵以校长为根的树，父节点即是子结点的直接上司。每个职员有一个快乐指数$H_i$。现在这里有一场宴会，但是没有职员愿意和直接上司一起参会，在此条件下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，输出这个最大值。</p><p>&emsp;&emsp;数据范围：$1\le N \le 6000,-128\le H_i\le 127$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;在树上设计动态规划算法时，一般以结点从深到浅（子树从小到大）的顺序作为$\text{DP}$的阶段，$\text{DP}$的状态表示时，第一维通常为结点编号（表示以该节点为根的子树），而第二维为从子树中选出的满足某种条件的结点的个数，第三维为选择或者不选择当前结点（所以它有$0$和$1$两种取值），有时第二维或者第三维可以省略。大多时候采用递归形式实现树形动态规划（所以$dfs$这时很好用），对于每个结点，先递归在它的每个子节点上$dp$，回溯时，从子结点向结点x进行状态转移。<br>&emsp;&emsp;对于本题来说，以使用$dp[i][0]$表示从以$i$为根中的子树中选择一部分结点，并且$i$不选，$dp[i][1]$表示选$i$；<br>&emsp;&emsp;如果结点$x$不选，那么它的子节点可以选也可以不选，则有</p><script type="math/tex; mode=display">dp[x][0]=\displaystyle \sum_{y\in Son(x)}\max\{dp[y][0],dp[y][1]\}</script><p>&emsp;&emsp;$Son(x)$表示$x$的子节点集合，如果$x$选，那么它的子节点一定不能选，则有：</p><script type="math/tex; mode=display">dp[x][1]=H_x+\displaystyle \sum_{y\in Son(x)}dp[y][0]</script><p>&emsp;&emsp;此题我们还需要找出这棵树的根。另外，树形$dp$是一种很优美的动态规划。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line">    <span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">        <span class="keyword">return</span> x * f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, r[<span class="number">6009</span>], vis[<span class="number">6009</span>], f[<span class="number">6009</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[<span class="number">6009</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = r[u];</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = vec[u][i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        f[u][<span class="number">0</span>] += max(f[v][<span class="number">1</span>], f[v][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        vis[a] = <span class="number">1</span>;</span><br><span class="line">        vec[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{Luogu - P1352}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;$\text{Ural}$大学有$N$名职员，编号$1\dots N$，它们的关系是一棵以校长为根的树，父节点即是子结点的直接上司。每个职员有一个快乐指数$H_i$。现在这里有一场宴会，但是没有职员愿意和直接上司一起参会，在此条件下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，输出这个最大值。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\le N \le 6000,-128\le H_i\le 127$.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[CodeForces - 607B] Zuma</title>
    <link href="https://yuggu.github.io/2019/07/23/CF-607B-Zuma/"/>
    <id>https://yuggu.github.io/2019/07/23/CF-607B-Zuma/</id>
    <published>2019-07-23T05:47:49.000Z</published>
    <updated>2019-07-23T05:48:58.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hihocoder.com/problemset/problem/1323" target="_blank" rel="noopener">$\text{CodeForces - 607B}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;这是一个类似于祖玛的游戏，你有一个长度为$\text{N}$的序列$c$，序列中一个联通块可以消去（即删除，类似消一消，只能一个联通块一个联通块的消去），一个联通块即是一个连续的子序列，且该子序列是回文的，一个联通块被消去就不存在了，问最少需要消几次。</p><p>&emsp;&emsp;数据范围：$1\le N \le 500,1\le c_i\le N$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；这道题的原型是括号序列；<br>&emsp;&emsp;对于一个序列，对于它的区间长度为$len$的阶段，区间长度小于$len$的阶段的所有状态，我们已经求出来了，之后对于阶段$len$，我们枚举起始点$i、j$，对于区间$[i,j]$，需要枚举划分点$k$，如果找到满足$c[i]==c[k]$的$k$，那么就有$dp[i][j]=\min{dp[i][j],dp[i][k]+dp[k+1][j]}$，另外我们还需要考虑一种特殊情况，对于区间长度为$2$，如果是回文串，我们需要额外判断一下。<br>&emsp;&emsp;对于初始状态$dp[i][i]=0$，其他为$\infty$.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">509</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i], dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> (a[i] == a[k])</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][k - <span class="number">1</span>] + dp[k + <span class="number">1</span>][j] + (i + <span class="number">1</span> == k));</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hihocoder.com/problemset/problem/1323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{CodeForces - 607B}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是一个类似于祖玛的游戏，你有一个长度为$\text{N}$的序列$c$，序列中一个联通块可以消去（即删除，类似消一消，只能一个联通块一个联通块的消去），一个联通块即是一个连续的子序列，且该子序列是回文的，一个联通块被消去就不存在了，问最少需要消几次。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\le N \le 500,1\le c_i\le N$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[hihoCoder - 1323] 回文字符串</title>
    <link href="https://yuggu.github.io/2019/07/23/HC-1323-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://yuggu.github.io/2019/07/23/HC-1323-回文字符串/</id>
    <published>2019-07-23T05:01:21.000Z</published>
    <updated>2019-07-23T05:02:43.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hihocoder.com/problemset/problem/1323" target="_blank" rel="noopener">$\text{hihoCoder - 1323}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给定一个字符串$\text S$ ，最少需要几次增删改操作可以把$\text S$变成一个回文字符串？一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。输出最少的操作次数。</p><p>&emsp;&emsp;数据范围：字符串$\text S$。$\text S$的长度不超过$100$, 只包含$\text{A-Z}$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；也是经典的最少操作次数变成回文串的问题；对于<br>&emsp;&emsp;$dp[i][j]$表示$[i,j]$区间的子串变成回文串最少操作次数，对于一个串$bab$，我们已经知道区间长度为$2$的所有状态，对于区间长度为$3$的阶段，此时$s[i]==s[j]$，那么显然有$dp[i][j]=dp[i+1][j-1]$，对于一个串$bba$，此时$s[i]!=s[j]$，此时来说，我们只需要修改$s[i]$为$s[j]$或者修改$s[j]$为$s[i]$即可，所以我们有$dp[i][j]=\min{dp[i+1][j]+1,dp[i][j-1]+1}$。<br>&emsp;&emsp;初始状态$dp[i][i]=0$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, max;</span><br><span class="line">&#125; tree[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].max = max(tree[x &lt;&lt; <span class="number">1</span>].max, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = max(tree[x].max, val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)update(x &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line"><span class="keyword">else</span> update(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> le = tree[x].l, ri = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= le &amp;&amp; ri &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> maxm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">10005</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i &amp;&amp; j &lt;= m; j++)</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i][<span class="number">0</span>], dp[i - j][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hihocoder.com/problemset/problem/1323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{hihoCoder - 1323}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给定一个字符串$\text S$ ，最少需要几次增删改操作可以把$\text S$变成一个回文字符串？一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。输出最少的操作次数。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：字符串$\text S$。$\text S$的长度不超过$100$, 只包含$\text{A-Z}$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 3661] Running</title>
    <link href="https://yuggu.github.io/2019/07/23/POJ-3661-Running/"/>
    <id>https://yuggu.github.io/2019/07/23/POJ-3661-Running/</id>
    <published>2019-07-23T04:24:44.000Z</published>
    <updated>2019-07-23T04:53:55.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=3661" target="_blank" rel="noopener">$\text{POJ - 3661}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;$\text{Bessie}$在一个直赛道上跑步，他需要跑$\text{N}$分钟，其中第$i$分钟他能跑$d_i$米，同时他还有一个最大疲劳值$M$，开始的时候它的疲劳值为$0$，跑步的时候每一分钟他都可以选择跑与不跑，如果跑的话，他的疲劳值就会增加$1$，如果选择休息，他的疲劳值就会下降，但是他只能等疲劳值下降到$0$才能再次跑，现在你需要求出$\text N$分钟之后，他的疲劳值为$0$时他能跑的最大距离是多少。</p><p>&emsp;&emsp;数据范围：$1\leq \text{M} \leq 500$，$1\le d_i\le 1000$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;$dp[i][j]$表示跑完$i$分钟，疲劳值为$j$时所能跑的最大距离；那么对于一个状态$dp[i][j]$，他有可能从两种状态转移过来，一种是第$i$分钟跑了，对于这种状态有$dp[i][j]=dp[i-1][j-1]+a[i]$，另一种情况是没跑，对于没跑的情况，有可能$i-1$分钟也没跑，第$i$分钟没跑也只是一个中间状态，这样就无法求解，所以我们需要考虑$dp[i][0]$，$dp[i][0]$一定是由$dp[i-j][j]$转移而来的（对于休息的情况，直接考虑开始休息和结束休息，中间不考虑）；<br>&emsp;&emsp;即对于第$i$分钟休息和跑的情况分开考虑。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, max;</span><br><span class="line">&#125; tree[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].max = max(tree[x &lt;&lt; <span class="number">1</span>].max, tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">tree[x].max = max(tree[x].max, val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt;= mid)update(x &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line"><span class="keyword">else</span> update(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> le = tree[x].l, ri = tree[x].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= le &amp;&amp; ri &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[x].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) maxm = max(maxm, query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line"><span class="keyword">return</span> maxm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">10005</span>], dp[<span class="number">10009</span>][<span class="number">509</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i &amp;&amp; j &lt;= m; j++)</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i][<span class="number">0</span>], dp[i - j][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3661&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 3661}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;$\text{Bessie}$在一个直赛道上跑步，他需要跑$\text{N}$分钟，其中第$i$分钟他能跑$d_i$米，同时他还有一个最大疲劳值$M$，开始的时候它的疲劳值为$0$，跑步的时候每一分钟他都可以选择跑与不跑，如果跑的话，他的疲劳值就会增加$1$，如果选择休息，他的疲劳值就会下降，但是他只能等疲劳值下降到$0$才能再次跑，现在你需要求出$\text N$分钟之后，他的疲劳值为$0$时他能跑的最大距离是多少。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{M} \leq 500$，$1\le d_i\le 1000$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 3280] Cheapest Palindrome</title>
    <link href="https://yuggu.github.io/2019/07/23/POJ-3280-Cheapest-Palindrome/"/>
    <id>https://yuggu.github.io/2019/07/23/POJ-3280-Cheapest-Palindrome/</id>
    <published>2019-07-23T03:39:24.000Z</published>
    <updated>2019-07-23T04:53:55.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=3280" target="_blank" rel="noopener">$\text{POJ - 3280}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个长度为$\text{M}$的由小写字母组成的字符串$s$，你希望通过插入字符或者删除字符的操作来得到一个回文串，你希望操作次数最少；同时对于$26$种字符中的字符$i$，有对应的删除该字符需要的花费$cost_1$和插入该字符需要的$cost_2$，所以你希望通过插入和删除操作并且花费尽量少的钱来获取一个回文串。</p><p>&emsp;&emsp;数据范围：$1\leq \text{M} \leq 500$，$0\le cost\le 10000$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;通过对字符串的插入、删除、修改来获取一<br>个回文串，然后求最少次数，这是一类比较典型且常见的区间$dp$题目；<br>&emsp;&emsp;区间$dp$即是小区间状态到大区间状态的合并或者说转移，一般我们都会枚举小区间，然后枚举起始点；<br>&emsp;&emsp;如对于一个串$aba$，假设区间长度为$2$的阶段的所有状态我们已经求出来了，那么此时区间长度为$3$，对于这个串来说，我们肯定需要看它的两个短点$i$与$j$，$s[i]==s[j]$，我们就得出了$dp[i][j]=dp[i+1][j-1]$，这是很显然的；那么对于一个串$aab$，如果我们也已经求出来了它的区间长度为$2$的状态，那么此时对于区间长度为$3$的状态，我们观察它的$s[i]!=s[j]$，如果同时把这两个字符都给删掉或者给两个字符均插入一个匹配的字符，那么这显然是糟糕的选择，所以我们不能这样做；最终我们可以得出$dp[i][j]=min(dp[i+1][j]+cost[i],dp[i][j-1]+cost[j])$<br>&emsp;&emsp;对于价格来说，其实都是一样的，不论插入和删除本质上都是一样的，所以我们仅需要考虑价格即可，对于每个字符，使用价格低的操作，初始状态$dp[i][i]=0$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, a[<span class="number">300</span>], dp[<span class="number">2005</span>][<span class="number">2004</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">char</span> t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; x &gt;&gt; y;</span><br><span class="line">a[t] = min(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= m; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = INF;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[j - <span class="number">1</span>])</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][j] + a[s[i - <span class="number">1</span>]]);</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][j - <span class="number">1</span>] + a[s[j - <span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3280&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 3280}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个长度为$\text{M}$的由小写字母组成的字符串$s$，你希望通过插入字符或者删除字符的操作来得到一个回文串，你希望操作次数最少；同时对于$26$种字符中的字符$i$，有对应的删除该字符需要的花费$cost_1$和插入该字符需要的$cost_2$，所以你希望通过插入和删除操作并且花费尽量少的钱来获取一个回文串。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{M} \leq 500$，$0\le cost\le 10000$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[LightOJ - 1422] Halloween Costumes</title>
    <link href="https://yuggu.github.io/2019/07/22/LightOJ-1422-Halloween-Costumes/"/>
    <id>https://yuggu.github.io/2019/07/22/LightOJ-1422-Halloween-Costumes/</id>
    <published>2019-07-22T05:34:12.000Z</published>
    <updated>2019-07-22T07:32:31.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://vjudge.net/problem/LightOJ-1422" target="_blank" rel="noopener">$\text{LightOJ - 1422}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;这里有$n$次宴会，每个宴会有一个特定的编号，每个宴会需要一件特定衣服，$n$次宴会有顺序，衣服可以套着穿，一件衣服脱下后不能在穿，问最少需要买多少件衣服，如宴会为1、2、1、2，开始买衣服1，然后买衣服2，第三个宴会为1，此时身上是有宴会1的衣服的，不过外面还有一件宴会2的衣服，所以需要脱掉衣服2，第四个宴会为2，此时需要再买一件；<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；从左往右考虑，对于一件衣服，可以选择脱与不脱，贪心的考虑肯定是不脱较好，这题需要从右往左进行枚举；<br>&emsp;&emsp;对于区间$dp$来说，是枚举区间长度，及起始点的，然后找划分点作为决策；对于区间$[l,r]$我们需要求它的最少需要购买的衣服，我们此时肯定需要去看$[l+1,r]$的状态（如看区间$[l+1,r]$有没有出现$l$这件衣服，如果有，我们可能会思考是不是不需要再多购买一件了，类似这样的想法），所以我们就需要在$[l+1,r]$区间内寻找划分点$k(a[l]==a[k])$作为状态转移决策，就有了动态转移方程$dp[i][j]=min(dp[i][j],dp[i+1][k]+dp[k+1][j])(a[i]==a[k])$.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, dp[<span class="number">130</span>][<span class="number">130</span>], a[<span class="number">130</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; " ";</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> (a[k] == a[i])</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][k] + dp[k + <span class="number">1</span>][j]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++cnt, dp[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/LightOJ-1422&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{LightOJ - 1422}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这里有$n$次宴会，每个宴会有一个特定的编号，每个宴会需要一件特定衣服，$n$次宴会有顺序，衣服可以套着穿，一件衣服脱下后不能在穿，问最少需要买多少件衣服，如宴会为1、2、1、2，开始买衣服1，然后买衣服2，第三个宴会为1，此时身上是有宴会1的衣服的，不过外面还有一件宴会2的衣服，所以需要脱掉衣服2，第四个宴会为2，此时需要再买一件；&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[CF - 1132F] Clear the String</title>
    <link href="https://yuggu.github.io/2019/07/21/CF-1132F-Clear-the-String/"/>
    <id>https://yuggu.github.io/2019/07/21/CF-1132F-Clear-the-String/</id>
    <published>2019-07-21T08:19:40.000Z</published>
    <updated>2019-07-22T07:33:49.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/1132/F" target="_blank" rel="noopener">$\text{CF - 1132F}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你一个长度为$\text{N}$的由小写字母组成的字符串$s$，你需要对它进行删除操作，你每次可以删除一个连续的、只含一种字母的子串，现在问你最少需要多少次可以把它含有的字符全部删除掉。<br>&emsp;&emsp;数据范围：$1\leq \text{N} \leq 500$.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$dp$的题目；<br>&emsp;&emsp;首先$dp[i][j]$表示把$[i, j]$的字符全部删除需要进行的最少操作次数，正常情况下，我们需要枚举区间长度、起点及终点；对于一个区间$[l,r]$,，如果$s[l]==s[r]$，那么$dp[l][r]$，一定等于$dp[l+1][r]$、$dp[l][r-1]$二者中较小者，如果$s[l]!=s[r]$，我们就需要枚举划分点作为转移决策，有转移方程：$dp[i][j]=\displaystyle \min_{i\leq k &lt; j}{dp[i][k]+dp[k+1][j]}$。<br>&emsp;&emsp;对于$dp[i][j]$的初值应该初始化为$i-j+1$。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m, dp[<span class="number">504</span>][<span class="number">503</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[j - <span class="number">1</span>])</span><br><span class="line">dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/1132/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{CF - 1132F}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你一个长度为$\text{N}$的由小写字母组成的字符串$s$，你需要对它进行删除操作，你每次可以删除一个连续的、只含一种字母的子串，现在问你最少需要多少次可以把它含有的字符全部删除掉。&lt;br&gt;&amp;emsp;&amp;emsp;数据范围：$1\leq \text{N} \leq 500$.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 1651] Multiplication Puzzle</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-1651-Multiplication-Puzzle/</id>
    <published>2019-07-20T10:59:22.000Z</published>
    <updated>2019-07-22T07:34:00.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=1651" target="_blank" rel="noopener">$\text{POJ - 1651}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp; 给你一个长度为$n$的序列$a$，现在你将要把，序列$a$中除开头和结尾外的所有元素都删除掉,你每次删除一个数$a_i$时，你将会得到的分数为$a_{i-1}*$$a_i*a_{i+1}$，你需要获得最少的分数，问这个分数最小为多少。<br>&emsp;&emsp;比如对于序列${10,1,50,20,5}$，你依次删除$50、20、1$，得到的分数分别为$1*50*20、1*20*5、10*1*5$，总共为$1150$，这样你就能获得最少的分数。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，依旧是枚举区间长度与起点，求出小区间的最优决策，然后得到大区间的解。状态转移方程为：<script type="math/tex">dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+a[i]*a[k]*a[j])</script><br>&emsp;&emsp;$dp[i][j]$即为区间$[i,j]$所能获得的最小分数。<br>&emsp;&emsp;另外，如果是获得最大分数，只需要将数组初始化为0即可。<br>&emsp;&emsp;区间$dp$一般基本套路即是枚举区间长度与起点，然后求接小区间解，进而合并得到大区间的解，关键是转移方程。</p></blockquote><h3 id="区间-dp-基本模板"><a href="#区间-dp-基本模板" class="headerlink" title="区间$dp$基本模板"></a>区间$dp$基本模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>;len&lt;=n;len++)&#123;<span class="comment">//枚举长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j+len&lt;=n+<span class="number">1</span>;j++)&#123;<span class="comment">//枚举起点，ends&lt;=n</span></span><br><span class="line">            <span class="keyword">int</span> ends = j+len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = j;i&lt;ends;i++)&#123;<span class="comment">//枚举分割点，更新小区间最优解</span></span><br><span class="line">                dp[j][ends] = min(dp[j][ends],dp[j][i]+dp[i+<span class="number">1</span>][ends]+something);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dp[<span class="number">130</span>][<span class="number">130</span>], a[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i],dp[i][i] = dp[i - <span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++)</span><br><span class="line">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]+ a[i] * a[k] * a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1651&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 1651}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp; 给你一个长度为$n$的序列$a$，现在你将要把，序列$a$中除开头和结尾外的所有元素都删除掉,你每次删除一个数$a_i$时，你将会得到的分数为$a_{i-1}*$$a_i*a_{i+1}$，你需要获得最少的分数，问这个分数最小为多少。&lt;br&gt;&amp;emsp;&amp;emsp;比如对于序列${10,1,50,20,5}$，你依次删除$50、20、1$，得到的分数分别为$1*50*20、1*20*5、10*1*5$，总共为$1150$，这样你就能获得最少的分数。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="dp" scheme="https://yuggu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[POJ - 2955] Brackets</title>
    <link href="https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/"/>
    <id>https://yuggu.github.io/2019/07/20/POJ-2955-Brackets/</id>
    <published>2019-07-20T07:00:19.000Z</published>
    <updated>2019-07-23T02:55:09.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://poj.org/problem?id=2955" target="_blank" rel="noopener">$\text{POJ - 2955}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：</p><p>&emsp;&ensp;$1$.&ensp;空的括号序列是合法的；<br>&emsp;&ensp;$2$.&ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；<br>&emsp;&ensp;$3$.&ensp;如果$a、b$是合法的，那么$ab$也是合法的；<br>&emsp;&ensp;$4$.&ensp;其他括号序列都是不合法的；<br> <a id="more"></a></p><p>&emsp;&emsp;括号序列长度$\text N$，$1\leq \text{N}\leq100$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;这是一道区间$\text{DP}$题目，对于某个序列，如$[xxx]oooo$，它被分成两部分，$xxx$和$oooo$；<br>&emsp;&emsp;设$dp[i][j]$表示$[i,j]$之间的最长合法括号子序列的长度，那么如果$[i+1,j]$内没有与$i$匹配的括号，则$dp[i][j]=dp[i+1][j]$，若存在一个$k$与之匹配，那么$dp[i][j]=\max{dp[i+1][j],dp[i+1][k-1]+dp[k+1][j]+2}$($i$与$k$匹配)，区间长度从小到大枚举，最终$dp[1][\text{N}]$即是答案。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 99991</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="comment">//#define getchar() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 1&lt;&lt;22, stdin), p1 == p2) ? EOF : *p1++)</span></span><br><span class="line"><span class="comment">//char buf[(1 &lt;&lt; 22)], *p1 = buf, *p2 = buf;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"end"</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> n = s.size();</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n ;len++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">if</span> ((s[i - <span class="number">1</span>] == <span class="string">'('</span> &amp;&amp; s[k - <span class="number">1</span>] ==<span class="string">')'</span>) || (s[i - <span class="number">1</span>] == <span class="string">'['</span> &amp;&amp; s[k - <span class="number">1</span>] == <span class="string">']'</span>))</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i + <span class="number">1</span>][k - <span class="number">1</span>] + dp[k + <span class="number">1</span>][j] + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{POJ - 2955}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给你包含小括号和中括号括号序列，求最长合法括号子序列的长度。合法的括号序列满足如下条件：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;ensp;$1$.&amp;ensp;空的括号序列是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$2$.&amp;ensp;如果一个括号序列$s$是合法的，那么$(s)、[s]$也都是合法；&lt;br&gt;&amp;emsp;&amp;ensp;$3$.&amp;ensp;如果$a、b$是合法的，那么$ab$也是合法的；&lt;br&gt;&amp;emsp;&amp;ensp;$4$.&amp;ensp;其他括号序列都是不合法的；&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/dp/%E5%8C%BA%E9%97%B4dp/"/>
    
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="区间dp" scheme="https://yuggu.github.io/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
  </entry>
  
  <entry>
    <title>[Luogu - P3379] 最近公共祖先</title>
    <link href="https://yuggu.github.io/2019/07/19/Luogu-P3379-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://yuggu.github.io/2019/07/19/Luogu-P3379-最近公共祖先/</id>
    <published>2019-07-19T14:36:54.000Z</published>
    <updated>2019-07-20T07:59:57.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3379" target="_blank" rel="noopener">$\text{Luogu - P3379}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;裸的$\text{LCA}$，这里先给出$\text{Tarjan}$的写法，实际上这里用$\text{Tarjan}$是不太好的，一开始没加入读入优化，有些数据过大直接$\text{TLE}$了，加了之后才$\text{AC}$，倍增和$\text{ST}$表之后再补。</p></blockquote><h3 id="关于-text-Tarjan"><a href="#关于-text-Tarjan" class="headerlink" title="关于$\text{Tarjan}$"></a>关于$\text{Tarjan}$</h3><blockquote><p>&emsp;&emsp;$\text{Tarjan}$的实现是这样的:首先沿着根节点$dfs$访问与它相邻的节点，并标记这个点，这样当访问完某个子树的某个节点之后，用数组标记它的父节点，当还没有向上回溯的时候，开始遍历查询(读入的时候把询问存起来，正所谓离线)，查询与当前子树的根节点即当前节点(假设当前节点为$u$)有关的询问$(u,v)$，如果与当前节点(即$u$)查询有关的查询的另一个节点(即$v$)已经在之前$dfs$过程中被访问过了，那么说明这个查询的$lca$就是节点$v$所在子树的根节点，因为你是$dfs$到$v$，然后$dfs$到$u$的，在你从$v$到$u$的这个过程中是肯定经过$lca$的；<br>&emsp;&emsp;<br>&emsp;&emsp;注意，虽然说这里是一个子树，但他并没有形成集合上的树(就是假如用$f[i]$存这颗树，但这个形成树的过程就是$dfs$到叶子节点，然后开始向上回溯的时候开始建立联系开始的，你一开始从根节点向下遍历的时候，实际上是不存在的，仅仅是一个图而不是树，建议模拟一下，画个图，把$f[i]$的具体变化看一下)，只是存在边的联系，在访问完整个图后，才有了树；<br>&emsp;&emsp;建立画个图照着代码模拟一下；</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,next,lca;</span><br><span class="line">&#125;Edge;</span><br><span class="line"><span class="comment">//e用来存边，query存查询</span></span><br><span class="line">Edge e[<span class="number">2</span>*maxn],query[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt,head[maxn],head1[maxn],cnt1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[cnt].u=u;</span><br><span class="line">    e[cnt].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    e[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">    e[cnt].u=v;</span><br><span class="line">    e[cnt].v=u;</span><br><span class="line"><span class="comment">/*e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    e[cnt].next=head[v];</span><br><span class="line">    head[v]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用来存query即存查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    query[cnt1].u=u;</span><br><span class="line">    query[cnt1].v=v;</span><br><span class="line">    <span class="comment">/*e[cnt].w=w;</span></span><br><span class="line"><span class="comment">    e[cnt].f=f;*/</span></span><br><span class="line">    query[cnt1].next=head1[u];</span><br><span class="line">    head1[u]=cnt1++;</span><br><span class="line">    query[cnt1].u=v;</span><br><span class="line">    query[cnt1].v=u;</span><br><span class="line"><span class="comment">/*  e[cnt].w=0;</span></span><br><span class="line"><span class="comment">    e[cnt].f=-f;*/</span></span><br><span class="line">    query[cnt1].next=head1[v];</span><br><span class="line">    head1[v]=cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span>&amp;&amp;c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,f[maxn],vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    f[x]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            f[v]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[x];i!=<span class="number">-1</span>;i=query[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=query[i].v;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            query[i].lca=find(v);</span><br><span class="line">            query[i^<span class="number">1</span>].lca=f[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// std::ios::sync_with_stdio(false);</span></span><br><span class="line">    n=read(),m=read(),s=read();</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(head1,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head1));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        add(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        u=read(),v=read();</span><br><span class="line">        addp(u,v);</span><br><span class="line">    &#125; </span><br><span class="line">    tarjan(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;query[i].lca&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3379&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{Luogu - P3379}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;给定一颗树，还有一定数量的询问，对于每个询问，输出它的$\text{LCA}$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/LCA/"/>
    
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LCA" scheme="https://yuggu.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>[HDU - 1874] 畅通工程续</title>
    <link href="https://yuggu.github.io/2019/07/19/HDU-1874-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD/"/>
    <id>https://yuggu.github.io/2019/07/19/HDU-1874-畅通工程续/</id>
    <published>2019-07-19T14:09:44.000Z</published>
    <updated>2019-07-19T14:34:17.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="noopener">$\text{HDU - 1874}$</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>&emsp;&emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>&emsp;&emsp;求单源最短路径，这里给出$\text{Dijkstra}$和$\text{Bellman_ford}$算法的两种实现模板。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (int)1e9+7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,s,t,u,v,in;</span><br><span class="line"><span class="comment">//dis存储最短距离，book用来标记某一点是否已确定其最短路径并存入dis里，cost存储两点是否有边及边的权值</span></span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">205</span>],book[<span class="number">205</span>],cost[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="comment">//初始化dis与book</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">dis[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从s出发到其他所有点的最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">in = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> minn = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp; minn &gt; dis[i]) &#123;</span><br><span class="line">minn = dis[i];</span><br><span class="line">in=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有更新，说明全部点的最短路已找到并保存</span></span><br><span class="line"><span class="keyword">if</span> (minn == INF)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//book[in]=1来标记in这个点的最短路径已找到并存在DIS[I]里</span></span><br><span class="line">book[in] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//如果dis[i]没有被确定保存的已是最短路径并且I与in之间存在边连接并且可已更新dis数组</span></span><br><span class="line"><span class="keyword">if</span> (!book[i] &amp;&amp;cost[i][in]!=INF&amp;&amp; dis[i] &gt;dis[in] + cost[i][in]) &#123;</span><br><span class="line">dis[i] = dis[in] + cost[i][in];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</span><br><span class="line"><span class="comment">//需要将cost初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">200</span>; j++)</span><br><span class="line">cost[i][j] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u&gt;&gt;v&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(cost[u][v]&gt;x)</span><br><span class="line">cost[v][u] = cost[u][v]=x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (dis[t] == INF ? <span class="number">-1</span> : dis[t] )&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1874&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\text{HDU - 1874}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;共$\text{n}$个城市，给出$\text{m}$个城市间的关系，即两个城市间的距离，现在给你一个起点和终点，需要你求出两个城市的最短路径。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://yuggu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="图论" scheme="https://yuggu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="算法" scheme="https://yuggu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
